### YamlMime:ManagedReference
items:
- uid: Refinity.Math.MathUtility
  commentId: T:Refinity.Math.MathUtility
  id: MathUtility
  parent: Refinity.Math
  children:
  - Refinity.Math.MathUtility.Clamp(System.Double,System.Double,System.Double)
  - Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
  - Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
  - Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
  - Refinity.Math.MathUtility.DegreesToHMS(System.Double)
  - Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
  - Refinity.Math.MathUtility.DegreesToRadians(System.Double)
  - Refinity.Math.MathUtility.Divisors(System.Int32)
  - Refinity.Math.MathUtility.Factorial(System.Int32)
  - Refinity.Math.MathUtility.Fibonacci(System.Int32)
  - Refinity.Math.MathUtility.GetStandardDeviation(System.Double[])
  - Refinity.Math.MathUtility.GetStandardDeviation(System.Int32[])
  - Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32,System.Int32)
  - Refinity.Math.MathUtility.Invert(System.Double)
  - Refinity.Math.MathUtility.Invert(System.Int32)
  - Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double,System.Double,System.Double)
  - Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32)
  - Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32,System.Int32@)
  - Refinity.Math.MathUtility.IsEven(System.Int32)
  - Refinity.Math.MathUtility.IsInRange(System.Double,System.Double,System.Double)
  - Refinity.Math.MathUtility.IsOdd(System.Int32)
  - Refinity.Math.MathUtility.IsPrime(System.Double)
  - Refinity.Math.MathUtility.IsPrime(System.Int32)
  - Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32,System.Int32)
  - Refinity.Math.MathUtility.LogBaseN(System.Double,System.Double)
  - Refinity.Math.MathUtility.MatrixAddition(System.Object,System.Object)
  - Refinity.Math.MathUtility.MatrixInverse(System.Object)
  - Refinity.Math.MathUtility.MatrixMultiplication(System.Object,System.Object)
  - Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object,System.Double)
  - Refinity.Math.MathUtility.MatrixSubtraction(System.Object,System.Object)
  - Refinity.Math.MathUtility.MatrixTranspose(System.Object)
  - Refinity.Math.MathUtility.Median(System.Double[])
  - Refinity.Math.MathUtility.Mode(System.Double[])
  - Refinity.Math.MathUtility.NextPrime(System.Double)
  - Refinity.Math.MathUtility.NextPrime(System.Int32)
  - Refinity.Math.MathUtility.Normalize(System.Double,System.Double,System.Double)
  - Refinity.Math.MathUtility.PercentageOf(System.Double,System.Double)
  - Refinity.Math.MathUtility.PercentageOf(System.Int32,System.Int32)
  - Refinity.Math.MathUtility.PerformLinearRegression(System.Double[],System.Double[])
  - Refinity.Math.MathUtility.PerformLinearRegression(System.Int32[],System.Int32[])
  - Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
  - Refinity.Math.MathUtility.SimpsonRuleIntegration(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)
  - Refinity.Math.MathUtility.SumTo(System.Double,System.Double)
  - Refinity.Math.MathUtility.SumTo(System.Int32,System.Int32)
  - Refinity.Math.MathUtility.ToScientificNotation(System.Double)
  - Refinity.Math.MathUtility.ToStringPercentage(System.Double,System.Int32)
  langs:
  - csharp
  - vb
  name: MathUtility
  nameWithType: MathUtility
  fullName: Refinity.Math.MathUtility
  type: Class
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MathUtility
    path: Refinity/Math/MathUtility.cs
    startLine: 4
  assemblies:
  - Refinity
  namespace: Refinity.Math
  syntax:
    content: public static class MathUtility
    content.vb: Public Module MathUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Refinity.Math.MathUtility.Factorial(System.Int32)
  commentId: M:Refinity.Math.MathUtility.Factorial(System.Int32)
  id: Factorial(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Factorial(int)
  nameWithType: MathUtility.Factorial(int)
  fullName: Refinity.Math.MathUtility.Factorial(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Factorial
    path: Refinity/Math/MathUtility.cs
    startLine: 11
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the factorial of a non-negative integer.
  example: []
  syntax:
    content: public static int Factorial(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The non-negative integer.
    return:
      type: System.Int32
      description: The factorial of the input integer.
    content.vb: Public Shared Function Factorial(n As Integer) As Integer
  overload: Refinity.Math.MathUtility.Factorial*
  nameWithType.vb: MathUtility.Factorial(Integer)
  fullName.vb: Refinity.Math.MathUtility.Factorial(Integer)
  name.vb: Factorial(Integer)
- uid: Refinity.Math.MathUtility.IsPrime(System.Int32)
  commentId: M:Refinity.Math.MathUtility.IsPrime(System.Int32)
  id: IsPrime(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsPrime(int)
  nameWithType: MathUtility.IsPrime(int)
  fullName: Refinity.Math.MathUtility.IsPrime(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsPrime
    path: Refinity/Math/MathUtility.cs
    startLine: 30
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether the specified number is a prime number.
  example: []
  syntax:
    content: public static bool IsPrime(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The number to check.
    return:
      type: System.Boolean
      description: <code>true</code> if the number is prime; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsPrime(n As Integer) As Boolean
  overload: Refinity.Math.MathUtility.IsPrime*
  nameWithType.vb: MathUtility.IsPrime(Integer)
  fullName.vb: Refinity.Math.MathUtility.IsPrime(Integer)
  name.vb: IsPrime(Integer)
- uid: Refinity.Math.MathUtility.IsPrime(System.Double)
  commentId: M:Refinity.Math.MathUtility.IsPrime(System.Double)
  id: IsPrime(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsPrime(double)
  nameWithType: MathUtility.IsPrime(double)
  fullName: Refinity.Math.MathUtility.IsPrime(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsPrime
    path: Refinity/Math/MathUtility.cs
    startLine: 49
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether the specified number is a prime number.
  example: []
  syntax:
    content: public static bool IsPrime(this double n)
    parameters:
    - id: n
      type: System.Double
      description: The number to check.
    return:
      type: System.Boolean
      description: <code>true</code> if the number is prime; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsPrime(n As Double) As Boolean
  overload: Refinity.Math.MathUtility.IsPrime*
  nameWithType.vb: MathUtility.IsPrime(Double)
  fullName.vb: Refinity.Math.MathUtility.IsPrime(Double)
  name.vb: IsPrime(Double)
- uid: Refinity.Math.MathUtility.IsEven(System.Int32)
  commentId: M:Refinity.Math.MathUtility.IsEven(System.Int32)
  id: IsEven(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsEven(int)
  nameWithType: MathUtility.IsEven(int)
  fullName: Refinity.Math.MathUtility.IsEven(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsEven
    path: Refinity/Math/MathUtility.cs
    startLine: 68
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether the specified integer is even.
  example: []
  syntax:
    content: public static bool IsEven(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to check.
    return:
      type: System.Boolean
      description: true if the integer is even; otherwise, false.
    content.vb: Public Shared Function IsEven(n As Integer) As Boolean
  overload: Refinity.Math.MathUtility.IsEven*
  nameWithType.vb: MathUtility.IsEven(Integer)
  fullName.vb: Refinity.Math.MathUtility.IsEven(Integer)
  name.vb: IsEven(Integer)
- uid: Refinity.Math.MathUtility.IsOdd(System.Int32)
  commentId: M:Refinity.Math.MathUtility.IsOdd(System.Int32)
  id: IsOdd(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsOdd(int)
  nameWithType: MathUtility.IsOdd(int)
  fullName: Refinity.Math.MathUtility.IsOdd(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsOdd
    path: Refinity/Math/MathUtility.cs
    startLine: 78
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether the specified integer is odd.
  example: []
  syntax:
    content: public static bool IsOdd(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to check.
    return:
      type: System.Boolean
      description: true if the specified integer is odd; otherwise, false.
    content.vb: Public Shared Function IsOdd(n As Integer) As Boolean
  overload: Refinity.Math.MathUtility.IsOdd*
  nameWithType.vb: MathUtility.IsOdd(Integer)
  fullName.vb: Refinity.Math.MathUtility.IsOdd(Integer)
  name.vb: IsOdd(Integer)
- uid: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32)
  commentId: M:Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32)
  id: IsDivisibleBy(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsDivisibleBy(int, int)
  nameWithType: MathUtility.IsDivisibleBy(int, int)
  fullName: Refinity.Math.MathUtility.IsDivisibleBy(int, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsDivisibleBy
    path: Refinity/Math/MathUtility.cs
    startLine: 89
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether an integer is divisible by a given divisor.
  example: []
  syntax:
    content: public static bool IsDivisibleBy(this int n, int divisor)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to check for divisibility.
    - id: divisor
      type: System.Int32
      description: The divisor to check against.
    return:
      type: System.Boolean
      description: True if the integer is divisible by the divisor, otherwise false.
    content.vb: Public Shared Function IsDivisibleBy(n As Integer, divisor As Integer) As Boolean
  overload: Refinity.Math.MathUtility.IsDivisibleBy*
  nameWithType.vb: MathUtility.IsDivisibleBy(Integer, Integer)
  fullName.vb: Refinity.Math.MathUtility.IsDivisibleBy(Integer, Integer)
  name.vb: IsDivisibleBy(Integer, Integer)
- uid: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32,System.Int32@)
  commentId: M:Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32,System.Int32@)
  id: IsDivisibleBy(System.Int32,System.Int32,System.Int32@)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsDivisibleBy(int, int, out int)
  nameWithType: MathUtility.IsDivisibleBy(int, int, out int)
  fullName: Refinity.Math.MathUtility.IsDivisibleBy(int, int, out int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsDivisibleBy
    path: Refinity/Math/MathUtility.cs
    startLine: 101
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether an integer is divisible by a given divisor and calculates the quotient.
  example: []
  syntax:
    content: public static bool IsDivisibleBy(this int n, int divisor, out int quotient)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to check for divisibility.
    - id: divisor
      type: System.Int32
      description: The divisor to check against.
    - id: quotient
      type: System.Int32
      description: The calculated quotient if the integer is divisible by the divisor.
    return:
      type: System.Boolean
      description: True if the integer is divisible by the divisor, false otherwise.
    content.vb: Public Shared Function IsDivisibleBy(n As Integer, divisor As Integer, quotient As Integer) As Boolean
  overload: Refinity.Math.MathUtility.IsDivisibleBy*
  nameWithType.vb: MathUtility.IsDivisibleBy(Integer, Integer, Integer)
  fullName.vb: Refinity.Math.MathUtility.IsDivisibleBy(Integer, Integer, Integer)
  name.vb: IsDivisibleBy(Integer, Integer, Integer)
- uid: Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32,System.Int32)
  commentId: M:Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32,System.Int32)
  id: GreatestCommonDivisor(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: GreatestCommonDivisor(int, int)
  nameWithType: MathUtility.GreatestCommonDivisor(int, int)
  fullName: Refinity.Math.MathUtility.GreatestCommonDivisor(int, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: GreatestCommonDivisor
    path: Refinity/Math/MathUtility.cs
    startLine: 113
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the greatest common divisor (GCD) of two integers.
  example: []
  syntax:
    content: public static int GreatestCommonDivisor(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
      description: The first integer.
    - id: b
      type: System.Int32
      description: The second integer.
    return:
      type: System.Int32
      description: The greatest common divisor of the two integers.
    content.vb: Public Shared Function GreatestCommonDivisor(a As Integer, b As Integer) As Integer
  overload: Refinity.Math.MathUtility.GreatestCommonDivisor*
  nameWithType.vb: MathUtility.GreatestCommonDivisor(Integer, Integer)
  fullName.vb: Refinity.Math.MathUtility.GreatestCommonDivisor(Integer, Integer)
  name.vb: GreatestCommonDivisor(Integer, Integer)
- uid: Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32,System.Int32)
  commentId: M:Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32,System.Int32)
  id: LeastCommonMultiple(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: LeastCommonMultiple(int, int)
  nameWithType: MathUtility.LeastCommonMultiple(int, int)
  fullName: Refinity.Math.MathUtility.LeastCommonMultiple(int, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: LeastCommonMultiple
    path: Refinity/Math/MathUtility.cs
    startLine: 132
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the least common multiple (LCM) of two integers.
  example: []
  syntax:
    content: public static int LeastCommonMultiple(this int a, int b)
    parameters:
    - id: a
      type: System.Int32
      description: The first integer.
    - id: b
      type: System.Int32
      description: The second integer.
    return:
      type: System.Int32
      description: The least common multiple of the two integers.
    content.vb: Public Shared Function LeastCommonMultiple(a As Integer, b As Integer) As Integer
  overload: Refinity.Math.MathUtility.LeastCommonMultiple*
  nameWithType.vb: MathUtility.LeastCommonMultiple(Integer, Integer)
  fullName.vb: Refinity.Math.MathUtility.LeastCommonMultiple(Integer, Integer)
  name.vb: LeastCommonMultiple(Integer, Integer)
- uid: Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
  commentId: M:Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
  id: ConvertToBaseBinary(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: ConvertToBaseBinary(int)
  nameWithType: MathUtility.ConvertToBaseBinary(int)
  fullName: Refinity.Math.MathUtility.ConvertToBaseBinary(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ConvertToBaseBinary
    path: Refinity/Math/MathUtility.cs
    startLine: 142
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts an integer to its binary representation in base 2.
  example: []
  syntax:
    content: public static int ConvertToBaseBinary(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to convert.
    return:
      type: System.Int32
      description: The binary representation of the input integer.
    content.vb: Public Shared Function ConvertToBaseBinary(n As Integer) As Integer
  overload: Refinity.Math.MathUtility.ConvertToBaseBinary*
  nameWithType.vb: MathUtility.ConvertToBaseBinary(Integer)
  fullName.vb: Refinity.Math.MathUtility.ConvertToBaseBinary(Integer)
  name.vb: ConvertToBaseBinary(Integer)
- uid: Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
  commentId: M:Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
  id: ConvertToBaseOctal(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: ConvertToBaseOctal(int)
  nameWithType: MathUtility.ConvertToBaseOctal(int)
  fullName: Refinity.Math.MathUtility.ConvertToBaseOctal(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ConvertToBaseOctal
    path: Refinity/Math/MathUtility.cs
    startLine: 163
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts an integer to its octal representation.
  example: []
  syntax:
    content: public static int ConvertToBaseOctal(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to be converted.
    return:
      type: System.Int32
      description: The octal representation of the input integer.
    content.vb: Public Shared Function ConvertToBaseOctal(n As Integer) As Integer
  overload: Refinity.Math.MathUtility.ConvertToBaseOctal*
  nameWithType.vb: MathUtility.ConvertToBaseOctal(Integer)
  fullName.vb: Refinity.Math.MathUtility.ConvertToBaseOctal(Integer)
  name.vb: ConvertToBaseOctal(Integer)
- uid: Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
  commentId: M:Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
  id: ConvertToBaseHexadecimal(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: ConvertToBaseHexadecimal(int)
  nameWithType: MathUtility.ConvertToBaseHexadecimal(int)
  fullName: Refinity.Math.MathUtility.ConvertToBaseHexadecimal(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ConvertToBaseHexadecimal
    path: Refinity/Math/MathUtility.cs
    startLine: 184
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts an integer to its hexadecimal representation.
  example: []
  syntax:
    content: public static int ConvertToBaseHexadecimal(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The integer to convert.
    return:
      type: System.Int32
      description: The hexadecimal representation of the input integer.
    content.vb: Public Shared Function ConvertToBaseHexadecimal(n As Integer) As Integer
  overload: Refinity.Math.MathUtility.ConvertToBaseHexadecimal*
  nameWithType.vb: MathUtility.ConvertToBaseHexadecimal(Integer)
  fullName.vb: Refinity.Math.MathUtility.ConvertToBaseHexadecimal(Integer)
  name.vb: ConvertToBaseHexadecimal(Integer)
- uid: Refinity.Math.MathUtility.Fibonacci(System.Int32)
  commentId: M:Refinity.Math.MathUtility.Fibonacci(System.Int32)
  id: Fibonacci(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Fibonacci(int)
  nameWithType: MathUtility.Fibonacci(int)
  fullName: Refinity.Math.MathUtility.Fibonacci(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Fibonacci
    path: Refinity/Math/MathUtility.cs
    startLine: 215
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the Fibonacci number for a given integer.
  example: []
  syntax:
    content: public static int Fibonacci(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The input integer.
    return:
      type: System.Int32
      description: The Fibonacci number.
    content.vb: Public Shared Function Fibonacci(n As Integer) As Integer
  overload: Refinity.Math.MathUtility.Fibonacci*
  nameWithType.vb: MathUtility.Fibonacci(Integer)
  fullName.vb: Refinity.Math.MathUtility.Fibonacci(Integer)
  name.vb: Fibonacci(Integer)
- uid: Refinity.Math.MathUtility.GetStandardDeviation(System.Int32[])
  commentId: M:Refinity.Math.MathUtility.GetStandardDeviation(System.Int32[])
  id: GetStandardDeviation(System.Int32[])
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: GetStandardDeviation(int[])
  nameWithType: MathUtility.GetStandardDeviation(int[])
  fullName: Refinity.Math.MathUtility.GetStandardDeviation(int[])
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: GetStandardDeviation
    path: Refinity/Math/MathUtility.cs
    startLine: 234
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the mean and standard deviation of an array of integers.
  example: []
  syntax:
    content: public static (double mean, double standardDeviation) GetStandardDeviation(this int[] values)
    parameters:
    - id: values
      type: System.Int32[]
      description: The array of integers.
    return:
      type: System.ValueTuple{System.Double,System.Double}
      description: A tuple containing the mean and standard deviation.
    content.vb: Public Shared Function GetStandardDeviation(values As Integer()) As (mean As Double, standardDeviation As Double)
  overload: Refinity.Math.MathUtility.GetStandardDeviation*
  nameWithType.vb: MathUtility.GetStandardDeviation(Integer())
  fullName.vb: Refinity.Math.MathUtility.GetStandardDeviation(Integer())
  name.vb: GetStandardDeviation(Integer())
- uid: Refinity.Math.MathUtility.GetStandardDeviation(System.Double[])
  commentId: M:Refinity.Math.MathUtility.GetStandardDeviation(System.Double[])
  id: GetStandardDeviation(System.Double[])
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: GetStandardDeviation(double[])
  nameWithType: MathUtility.GetStandardDeviation(double[])
  fullName: Refinity.Math.MathUtility.GetStandardDeviation(double[])
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: GetStandardDeviation
    path: Refinity/Math/MathUtility.cs
    startLine: 245
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the mean and standard deviation of an array of doubles.
  example: []
  syntax:
    content: public static (double mean, double standardDeviation) GetStandardDeviation(this double[] values)
    parameters:
    - id: values
      type: System.Double[]
      description: The array of doubles.
    return:
      type: System.ValueTuple{System.Double,System.Double}
      description: A tuple containing the mean and standard deviation.
    content.vb: Public Shared Function GetStandardDeviation(values As Double()) As (mean As Double, standardDeviation As Double)
  overload: Refinity.Math.MathUtility.GetStandardDeviation*
  nameWithType.vb: MathUtility.GetStandardDeviation(Double())
  fullName.vb: Refinity.Math.MathUtility.GetStandardDeviation(Double())
  name.vb: GetStandardDeviation(Double())
- uid: Refinity.Math.MathUtility.PerformLinearRegression(System.Double[],System.Double[])
  commentId: M:Refinity.Math.MathUtility.PerformLinearRegression(System.Double[],System.Double[])
  id: PerformLinearRegression(System.Double[],System.Double[])
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: PerformLinearRegression(double[], double[])
  nameWithType: MathUtility.PerformLinearRegression(double[], double[])
  fullName: Refinity.Math.MathUtility.PerformLinearRegression(double[], double[])
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PerformLinearRegression
    path: Refinity/Math/MathUtility.cs
    startLine: 259
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Performs linear regression on the given arrays of x and y values.
  example: []
  syntax:
    content: public static LinearRegressionModel PerformLinearRegression(this double[] x, double[] y)
    parameters:
    - id: x
      type: System.Double[]
      description: The array of x values.
    - id: y
      type: System.Double[]
      description: The array of y values.
    return:
      type: Refinity.Math.LinearRegressionModel
      description: An object containing the slope (m), y-intercept (b), and correlation coefficient (r).
    content.vb: Public Shared Function PerformLinearRegression(x As Double(), y As Double()) As LinearRegressionModel
  overload: Refinity.Math.MathUtility.PerformLinearRegression*
  nameWithType.vb: MathUtility.PerformLinearRegression(Double(), Double())
  fullName.vb: Refinity.Math.MathUtility.PerformLinearRegression(Double(), Double())
  name.vb: PerformLinearRegression(Double(), Double())
- uid: Refinity.Math.MathUtility.PerformLinearRegression(System.Int32[],System.Int32[])
  commentId: M:Refinity.Math.MathUtility.PerformLinearRegression(System.Int32[],System.Int32[])
  id: PerformLinearRegression(System.Int32[],System.Int32[])
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: PerformLinearRegression(int[], int[])
  nameWithType: MathUtility.PerformLinearRegression(int[], int[])
  fullName: Refinity.Math.MathUtility.PerformLinearRegression(int[], int[])
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PerformLinearRegression
    path: Refinity/Math/MathUtility.cs
    startLine: 284
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Performs linear regression on the given arrays of x and y values.
  example: []
  syntax:
    content: public static LinearRegressionModel PerformLinearRegression(this int[] x, int[] y)
    parameters:
    - id: x
      type: System.Int32[]
      description: The array of x values.
    - id: y
      type: System.Int32[]
      description: The array of y values.
    return:
      type: Refinity.Math.LinearRegressionModel
      description: An object containing the slope (m), y-intercept (b), and correlation coefficient (r).
    content.vb: Public Shared Function PerformLinearRegression(x As Integer(), y As Integer()) As LinearRegressionModel
  overload: Refinity.Math.MathUtility.PerformLinearRegression*
  nameWithType.vb: MathUtility.PerformLinearRegression(Integer(), Integer())
  fullName.vb: Refinity.Math.MathUtility.PerformLinearRegression(Integer(), Integer())
  name.vb: PerformLinearRegression(Integer(), Integer())
- uid: Refinity.Math.MathUtility.SimpsonRuleIntegration(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)
  commentId: M:Refinity.Math.MathUtility.SimpsonRuleIntegration(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)
  id: SimpsonRuleIntegration(System.Func{System.Double,System.Double},System.Double,System.Double,System.Int32)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: SimpsonRuleIntegration(Func<double, double>, double, double, int)
  nameWithType: MathUtility.SimpsonRuleIntegration(Func<double, double>, double, double, int)
  fullName: Refinity.Math.MathUtility.SimpsonRuleIntegration(System.Func<double, double>, double, double, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: SimpsonRuleIntegration
    path: Refinity/Math/MathUtility.cs
    startLine: 303
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Performs numerical integration using Simpson's rule.
  example: []
  syntax:
    content: public static double SimpsonRuleIntegration(Func<double, double> function, double a, double b, int n)
    parameters:
    - id: function
      type: System.Func{System.Double,System.Double}
      description: The function to integrate.
    - id: a
      type: System.Double
      description: The lower limit of integration.
    - id: b
      type: System.Double
      description: The upper limit of integration.
    - id: n
      type: System.Int32
      description: The number of intervals.
    return:
      type: System.Double
      description: The approximate value of the integral.
    content.vb: Public Shared Function SimpsonRuleIntegration([function] As Func(Of Double, Double), a As Double, b As Double, n As Integer) As Double
  overload: Refinity.Math.MathUtility.SimpsonRuleIntegration*
  nameWithType.vb: MathUtility.SimpsonRuleIntegration(Func(Of Double, Double), Double, Double, Integer)
  fullName.vb: Refinity.Math.MathUtility.SimpsonRuleIntegration(System.Func(Of Double, Double), Double, Double, Integer)
  name.vb: SimpsonRuleIntegration(Func(Of Double, Double), Double, Double, Integer)
- uid: Refinity.Math.MathUtility.NextPrime(System.Double)
  commentId: M:Refinity.Math.MathUtility.NextPrime(System.Double)
  id: NextPrime(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: NextPrime(double)
  nameWithType: MathUtility.NextPrime(double)
  fullName: Refinity.Math.MathUtility.NextPrime(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: NextPrime
    path: Refinity/Math/MathUtility.cs
    startLine: 325
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Finds the next prime number greater than the specified number.
  example: []
  syntax:
    content: public static double NextPrime(this double n)
    parameters:
    - id: n
      type: System.Double
      description: The number to find the next prime number after.
    return:
      type: System.Double
      description: The next prime number greater than <code class="paramref">n</code>.
    content.vb: Public Shared Function NextPrime(n As Double) As Double
  overload: Refinity.Math.MathUtility.NextPrime*
  nameWithType.vb: MathUtility.NextPrime(Double)
  fullName.vb: Refinity.Math.MathUtility.NextPrime(Double)
  name.vb: NextPrime(Double)
- uid: Refinity.Math.MathUtility.NextPrime(System.Int32)
  commentId: M:Refinity.Math.MathUtility.NextPrime(System.Int32)
  id: NextPrime(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: NextPrime(int)
  nameWithType: MathUtility.NextPrime(int)
  fullName: Refinity.Math.MathUtility.NextPrime(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: NextPrime
    path: Refinity/Math/MathUtility.cs
    startLine: 350
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Finds the next prime number greater than the specified number.
  example: []
  syntax:
    content: public static int NextPrime(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The number to find the next prime number after.
    return:
      type: System.Int32
      description: The next prime number greater than <code class="paramref">n</code>.
    content.vb: Public Shared Function NextPrime(n As Integer) As Integer
  overload: Refinity.Math.MathUtility.NextPrime*
  nameWithType.vb: MathUtility.NextPrime(Integer)
  fullName.vb: Refinity.Math.MathUtility.NextPrime(Integer)
  name.vb: NextPrime(Integer)
- uid: Refinity.Math.MathUtility.PercentageOf(System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.PercentageOf(System.Double,System.Double)
  id: PercentageOf(System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: PercentageOf(double, double)
  nameWithType: MathUtility.PercentageOf(double, double)
  fullName: Refinity.Math.MathUtility.PercentageOf(double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PercentageOf
    path: Refinity/Math/MathUtility.cs
    startLine: 376
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the percentage of a value relative to another value.
  example: []
  syntax:
    content: public static double PercentageOf(this double value, double otherValue)
    parameters:
    - id: value
      type: System.Double
      description: The value to calculate the percentage of.
    - id: otherValue
      type: System.Double
      description: The value to calculate the percentage relative to.
    return:
      type: System.Double
      description: The percentage of the value relative to the other value.
    content.vb: Public Shared Function PercentageOf(value As Double, otherValue As Double) As Double
  overload: Refinity.Math.MathUtility.PercentageOf*
  nameWithType.vb: MathUtility.PercentageOf(Double, Double)
  fullName.vb: Refinity.Math.MathUtility.PercentageOf(Double, Double)
  name.vb: PercentageOf(Double, Double)
- uid: Refinity.Math.MathUtility.PercentageOf(System.Int32,System.Int32)
  commentId: M:Refinity.Math.MathUtility.PercentageOf(System.Int32,System.Int32)
  id: PercentageOf(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: PercentageOf(int, int)
  nameWithType: MathUtility.PercentageOf(int, int)
  fullName: Refinity.Math.MathUtility.PercentageOf(int, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PercentageOf
    path: Refinity/Math/MathUtility.cs
    startLine: 387
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the percentage of a value relative to another value.
  example: []
  syntax:
    content: public static double PercentageOf(this int value, int otherValue)
    parameters:
    - id: value
      type: System.Int32
      description: The value to calculate the percentage of.
    - id: otherValue
      type: System.Int32
      description: The value to calculate the percentage relative to.
    return:
      type: System.Double
      description: The percentage of the value relative to the other value.
    content.vb: Public Shared Function PercentageOf(value As Integer, otherValue As Integer) As Double
  overload: Refinity.Math.MathUtility.PercentageOf*
  nameWithType.vb: MathUtility.PercentageOf(Integer, Integer)
  fullName.vb: Refinity.Math.MathUtility.PercentageOf(Integer, Integer)
  name.vb: PercentageOf(Integer, Integer)
- uid: Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double,System.Double,System.Double)
  id: IsApproximatelyEqualTo(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsApproximatelyEqualTo(double, double, double)
  nameWithType: MathUtility.IsApproximatelyEqualTo(double, double, double)
  fullName: Refinity.Math.MathUtility.IsApproximatelyEqualTo(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsApproximatelyEqualTo
    path: Refinity/Math/MathUtility.cs
    startLine: 399
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether the specified value is approximately equal to the other value within the given tolerance.
  example: []
  syntax:
    content: public static bool IsApproximatelyEqualTo(this double value, double otherValue, double tolerance)
    parameters:
    - id: value
      type: System.Double
      description: The value to compare.
    - id: otherValue
      type: System.Double
      description: The other value to compare.
    - id: tolerance
      type: System.Double
      description: The tolerance within which the values are considered equal.
    return:
      type: System.Boolean
      description: <code>true</code> if the values are approximately equal; otherwise, <code>false</code>.
    content.vb: Public Shared Function IsApproximatelyEqualTo(value As Double, otherValue As Double, tolerance As Double) As Boolean
  overload: Refinity.Math.MathUtility.IsApproximatelyEqualTo*
  nameWithType.vb: MathUtility.IsApproximatelyEqualTo(Double, Double, Double)
  fullName.vb: Refinity.Math.MathUtility.IsApproximatelyEqualTo(Double, Double, Double)
  name.vb: IsApproximatelyEqualTo(Double, Double, Double)
- uid: Refinity.Math.MathUtility.Clamp(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.Clamp(System.Double,System.Double,System.Double)
  id: Clamp(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Clamp(double, double, double)
  nameWithType: MathUtility.Clamp(double, double, double)
  fullName: Refinity.Math.MathUtility.Clamp(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Clamp
    path: Refinity/Math/MathUtility.cs
    startLine: 411
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Clamps a value between a minimum and maximum value.
  example: []
  syntax:
    content: public static double Clamp(this double value, double min, double max)
    parameters:
    - id: value
      type: System.Double
      description: The value to clamp.
    - id: min
      type: System.Double
      description: The minimum value.
    - id: max
      type: System.Double
      description: The maximum value.
    return:
      type: System.Double
      description: The clamped value.
    content.vb: Public Shared Function Clamp(value As Double, min As Double, max As Double) As Double
  overload: Refinity.Math.MathUtility.Clamp*
  nameWithType.vb: MathUtility.Clamp(Double, Double, Double)
  fullName.vb: Refinity.Math.MathUtility.Clamp(Double, Double, Double)
  name.vb: Clamp(Double, Double, Double)
- uid: Refinity.Math.MathUtility.Divisors(System.Int32)
  commentId: M:Refinity.Math.MathUtility.Divisors(System.Int32)
  id: Divisors(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Divisors(int)
  nameWithType: MathUtility.Divisors(int)
  fullName: Refinity.Math.MathUtility.Divisors(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Divisors
    path: Refinity/Math/MathUtility.cs
    startLine: 421
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Returns an array of divisors for the given integer.
  example: []
  syntax:
    content: public static int[] Divisors(this int n)
    parameters:
    - id: n
      type: System.Int32
      description: The integer for which to find divisors.
    return:
      type: System.Int32[]
      description: An array of divisors.
    content.vb: Public Shared Function Divisors(n As Integer) As Integer()
  overload: Refinity.Math.MathUtility.Divisors*
  nameWithType.vb: MathUtility.Divisors(Integer)
  fullName.vb: Refinity.Math.MathUtility.Divisors(Integer)
  name.vb: Divisors(Integer)
- uid: Refinity.Math.MathUtility.Normalize(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.Normalize(System.Double,System.Double,System.Double)
  id: Normalize(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Normalize(double, double, double)
  nameWithType: MathUtility.Normalize(double, double, double)
  fullName: Refinity.Math.MathUtility.Normalize(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Normalize
    path: Refinity/Math/MathUtility.cs
    startLine: 440
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Normalizes a value within a specified range.
  example: []
  syntax:
    content: public static double Normalize(this double value, double min, double max)
    parameters:
    - id: value
      type: System.Double
      description: The value to be normalized.
    - id: min
      type: System.Double
      description: The minimum value of the range.
    - id: max
      type: System.Double
      description: The maximum value of the range.
    return:
      type: System.Double
      description: The normalized value.
    content.vb: Public Shared Function Normalize(value As Double, min As Double, max As Double) As Double
  overload: Refinity.Math.MathUtility.Normalize*
  nameWithType.vb: MathUtility.Normalize(Double, Double, Double)
  fullName.vb: Refinity.Math.MathUtility.Normalize(Double, Double, Double)
  name.vb: Normalize(Double, Double, Double)
- uid: Refinity.Math.MathUtility.LogBaseN(System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.LogBaseN(System.Double,System.Double)
  id: LogBaseN(System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: LogBaseN(double, double)
  nameWithType: MathUtility.LogBaseN(double, double)
  fullName: Refinity.Math.MathUtility.LogBaseN(double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: LogBaseN
    path: Refinity/Math/MathUtility.cs
    startLine: 459
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the logarithm of a specified value in a specified base.
  example: []
  syntax:
    content: public static double LogBaseN(this double value, double n)
    parameters:
    - id: value
      type: System.Double
      description: The value for which to calculate the logarithm.
    - id: n
      type: System.Double
      description: The base of the logarithm.
    return:
      type: System.Double
      description: The logarithm of the specified value in the specified base.
    content.vb: Public Shared Function LogBaseN(value As Double, n As Double) As Double
  overload: Refinity.Math.MathUtility.LogBaseN*
  nameWithType.vb: MathUtility.LogBaseN(Double, Double)
  fullName.vb: Refinity.Math.MathUtility.LogBaseN(Double, Double)
  name.vb: LogBaseN(Double, Double)
- uid: Refinity.Math.MathUtility.IsInRange(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.IsInRange(System.Double,System.Double,System.Double)
  id: IsInRange(System.Double,System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: IsInRange(double, double, double)
  nameWithType: MathUtility.IsInRange(double, double, double)
  fullName: Refinity.Math.MathUtility.IsInRange(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: IsInRange
    path: Refinity/Math/MathUtility.cs
    startLine: 476
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Determines whether the specified value is within the specified range.
  example: []
  syntax:
    content: public static bool IsInRange(this double value, double min, double max)
    parameters:
    - id: value
      type: System.Double
      description: The value to check.
    - id: min
      type: System.Double
      description: The minimum value of the range.
    - id: max
      type: System.Double
      description: The maximum value of the range.
    return:
      type: System.Boolean
      description: true if the value is within the range; otherwise, false.
    content.vb: Public Shared Function IsInRange(value As Double, min As Double, max As Double) As Boolean
  overload: Refinity.Math.MathUtility.IsInRange*
  nameWithType.vb: MathUtility.IsInRange(Double, Double, Double)
  fullName.vb: Refinity.Math.MathUtility.IsInRange(Double, Double, Double)
  name.vb: IsInRange(Double, Double, Double)
- uid: Refinity.Math.MathUtility.ToStringPercentage(System.Double,System.Int32)
  commentId: M:Refinity.Math.MathUtility.ToStringPercentage(System.Double,System.Int32)
  id: ToStringPercentage(System.Double,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: ToStringPercentage(double, int)
  nameWithType: MathUtility.ToStringPercentage(double, int)
  fullName: Refinity.Math.MathUtility.ToStringPercentage(double, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ToStringPercentage
    path: Refinity/Math/MathUtility.cs
    startLine: 487
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Formats a double value as a percentage string.
  example: []
  syntax:
    content: public static string ToStringPercentage(this double value, int decimalPlaces = 2)
    parameters:
    - id: value
      type: System.Double
      description: The double value to format.
    - id: decimalPlaces
      type: System.Int32
      description: The number of decimal places to include in the formatted string. Default is 2.
    return:
      type: System.String
      description: A string representation of the double value formatted as a percentage.
    content.vb: Public Shared Function ToStringPercentage(value As Double, decimalPlaces As Integer = 2) As String
  overload: Refinity.Math.MathUtility.ToStringPercentage*
  nameWithType.vb: MathUtility.ToStringPercentage(Double, Integer)
  fullName.vb: Refinity.Math.MathUtility.ToStringPercentage(Double, Integer)
  name.vb: ToStringPercentage(Double, Integer)
- uid: Refinity.Math.MathUtility.ToScientificNotation(System.Double)
  commentId: M:Refinity.Math.MathUtility.ToScientificNotation(System.Double)
  id: ToScientificNotation(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: ToScientificNotation(double)
  nameWithType: MathUtility.ToScientificNotation(double)
  fullName: Refinity.Math.MathUtility.ToScientificNotation(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ToScientificNotation
    path: Refinity/Math/MathUtility.cs
    startLine: 497
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts a number to scientific notation.
  example: []
  syntax:
    content: public static string ToScientificNotation(this double number)
    parameters:
    - id: number
      type: System.Double
      description: The number to convert.
    return:
      type: System.String
      description: The number in scientific notation.
    content.vb: Public Shared Function ToScientificNotation(number As Double) As String
  overload: Refinity.Math.MathUtility.ToScientificNotation*
  nameWithType.vb: MathUtility.ToScientificNotation(Double)
  fullName.vb: Refinity.Math.MathUtility.ToScientificNotation(Double)
  name.vb: ToScientificNotation(Double)
- uid: Refinity.Math.MathUtility.SumTo(System.Double,System.Double)
  commentId: M:Refinity.Math.MathUtility.SumTo(System.Double,System.Double)
  id: SumTo(System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: SumTo(double, double)
  nameWithType: MathUtility.SumTo(double, double)
  fullName: Refinity.Math.MathUtility.SumTo(double, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: SumTo
    path: Refinity/Math/MathUtility.cs
    startLine: 508
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the sum of an arithmetic series up to a given number of terms.
  example: []
  syntax:
    content: public static double SumTo(this double value, double n)
    parameters:
    - id: value
      type: System.Double
      description: The first term of the series.
    - id: n
      type: System.Double
      description: The number of terms in the series.
    return:
      type: System.Double
      description: The sum of the arithmetic series.
    content.vb: Public Shared Function SumTo(value As Double, n As Double) As Double
  overload: Refinity.Math.MathUtility.SumTo*
  nameWithType.vb: MathUtility.SumTo(Double, Double)
  fullName.vb: Refinity.Math.MathUtility.SumTo(Double, Double)
  name.vb: SumTo(Double, Double)
- uid: Refinity.Math.MathUtility.SumTo(System.Int32,System.Int32)
  commentId: M:Refinity.Math.MathUtility.SumTo(System.Int32,System.Int32)
  id: SumTo(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: SumTo(int, int)
  nameWithType: MathUtility.SumTo(int, int)
  fullName: Refinity.Math.MathUtility.SumTo(int, int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: SumTo
    path: Refinity/Math/MathUtility.cs
    startLine: 519
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the sum of an arithmetic series up to a given number of terms.
  example: []
  syntax:
    content: public static double SumTo(this int value, int n)
    parameters:
    - id: value
      type: System.Int32
      description: The first term of the series.
    - id: n
      type: System.Int32
      description: The number of terms in the series.
    return:
      type: System.Double
      description: The sum of the arithmetic series.
    content.vb: Public Shared Function SumTo(value As Integer, n As Integer) As Double
  overload: Refinity.Math.MathUtility.SumTo*
  nameWithType.vb: MathUtility.SumTo(Integer, Integer)
  fullName.vb: Refinity.Math.MathUtility.SumTo(Integer, Integer)
  name.vb: SumTo(Integer, Integer)
- uid: Refinity.Math.MathUtility.Invert(System.Double)
  commentId: M:Refinity.Math.MathUtility.Invert(System.Double)
  id: Invert(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Invert(double)
  nameWithType: MathUtility.Invert(double)
  fullName: Refinity.Math.MathUtility.Invert(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Invert
    path: Refinity/Math/MathUtility.cs
    startLine: 529
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Inverts the specified value.
  example: []
  syntax:
    content: public static double Invert(this double value)
    parameters:
    - id: value
      type: System.Double
      description: The value to invert.
    return:
      type: System.Double
      description: The inverted value.
    content.vb: Public Shared Function Invert(value As Double) As Double
  overload: Refinity.Math.MathUtility.Invert*
  nameWithType.vb: MathUtility.Invert(Double)
  fullName.vb: Refinity.Math.MathUtility.Invert(Double)
  name.vb: Invert(Double)
- uid: Refinity.Math.MathUtility.Invert(System.Int32)
  commentId: M:Refinity.Math.MathUtility.Invert(System.Int32)
  id: Invert(System.Int32)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Invert(int)
  nameWithType: MathUtility.Invert(int)
  fullName: Refinity.Math.MathUtility.Invert(int)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Invert
    path: Refinity/Math/MathUtility.cs
    startLine: 539
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Inverts the specified integer value.
  example: []
  syntax:
    content: public static double Invert(this int value)
    parameters:
    - id: value
      type: System.Int32
      description: The value to invert.
    return:
      type: System.Double
      description: The inverted value.
    content.vb: Public Shared Function Invert(value As Integer) As Double
  overload: Refinity.Math.MathUtility.Invert*
  nameWithType.vb: MathUtility.Invert(Integer)
  fullName.vb: Refinity.Math.MathUtility.Invert(Integer)
  name.vb: Invert(Integer)
- uid: Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
  commentId: M:Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
  id: DegreesToHMSString(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: DegreesToHMSString(double)
  nameWithType: MathUtility.DegreesToHMSString(double)
  fullName: Refinity.Math.MathUtility.DegreesToHMSString(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: DegreesToHMSString
    path: Refinity/Math/MathUtility.cs
    startLine: 549
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts the given degrees to a string representation in hours, minutes, and seconds format.
  example: []
  syntax:
    content: public static string DegreesToHMSString(this double degrees)
    parameters:
    - id: degrees
      type: System.Double
      description: The degrees to convert.
    return:
      type: System.String
      description: A string representation of the degrees in hours, minutes, and seconds format.
    content.vb: Public Shared Function DegreesToHMSString(degrees As Double) As String
  overload: Refinity.Math.MathUtility.DegreesToHMSString*
  nameWithType.vb: MathUtility.DegreesToHMSString(Double)
  fullName.vb: Refinity.Math.MathUtility.DegreesToHMSString(Double)
  name.vb: DegreesToHMSString(Double)
- uid: Refinity.Math.MathUtility.DegreesToHMS(System.Double)
  commentId: M:Refinity.Math.MathUtility.DegreesToHMS(System.Double)
  id: DegreesToHMS(System.Double)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: DegreesToHMS(double)
  nameWithType: MathUtility.DegreesToHMS(double)
  fullName: Refinity.Math.MathUtility.DegreesToHMS(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: DegreesToHMS
    path: Refinity/Math/MathUtility.cs
    startLine: 560
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts degrees to hours, minutes, and seconds.
  example: []
  syntax:
    content: public static (int hours, int minutes, double seconds) DegreesToHMS(double degrees)
    parameters:
    - id: degrees
      type: System.Double
      description: The degrees to convert.
    return:
      type: System.ValueTuple{System.Int32,System.Int32,System.Double}
      description: A tuple containing the hours, minutes, and seconds.
    content.vb: Public Shared Function DegreesToHMS(degrees As Double) As (hours As Integer, minutes As Integer, seconds As Double)
  overload: Refinity.Math.MathUtility.DegreesToHMS*
  nameWithType.vb: MathUtility.DegreesToHMS(Double)
  fullName.vb: Refinity.Math.MathUtility.DegreesToHMS(Double)
  name.vb: DegreesToHMS(Double)
- uid: Refinity.Math.MathUtility.DegreesToRadians(System.Double)
  commentId: M:Refinity.Math.MathUtility.DegreesToRadians(System.Double)
  id: DegreesToRadians(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: DegreesToRadians(double)
  nameWithType: MathUtility.DegreesToRadians(double)
  fullName: Refinity.Math.MathUtility.DegreesToRadians(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: DegreesToRadians
    path: Refinity/Math/MathUtility.cs
    startLine: 586
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts degrees to radians.
  example: []
  syntax:
    content: public static double DegreesToRadians(this double degrees)
    parameters:
    - id: degrees
      type: System.Double
      description: The angle in degrees.
    return:
      type: System.Double
      description: The angle in radians.
    content.vb: Public Shared Function DegreesToRadians(degrees As Double) As Double
  overload: Refinity.Math.MathUtility.DegreesToRadians*
  nameWithType.vb: MathUtility.DegreesToRadians(Double)
  fullName.vb: Refinity.Math.MathUtility.DegreesToRadians(Double)
  name.vb: DegreesToRadians(Double)
- uid: Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
  commentId: M:Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
  id: RadiansToDegrees(System.Double)
  isExtensionMethod: true
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: RadiansToDegrees(double)
  nameWithType: MathUtility.RadiansToDegrees(double)
  fullName: Refinity.Math.MathUtility.RadiansToDegrees(double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: RadiansToDegrees
    path: Refinity/Math/MathUtility.cs
    startLine: 596
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Converts an angle from radians to degrees.
  example: []
  syntax:
    content: public static double RadiansToDegrees(this double radians)
    parameters:
    - id: radians
      type: System.Double
      description: The angle in radians.
    return:
      type: System.Double
      description: The angle in degrees.
    content.vb: Public Shared Function RadiansToDegrees(radians As Double) As Double
  overload: Refinity.Math.MathUtility.RadiansToDegrees*
  nameWithType.vb: MathUtility.RadiansToDegrees(Double)
  fullName.vb: Refinity.Math.MathUtility.RadiansToDegrees(Double)
  name.vb: RadiansToDegrees(Double)
- uid: Refinity.Math.MathUtility.Median(System.Double[])
  commentId: M:Refinity.Math.MathUtility.Median(System.Double[])
  id: Median(System.Double[])
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Median(params double[])
  nameWithType: MathUtility.Median(params double[])
  fullName: Refinity.Math.MathUtility.Median(params double[])
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Median
    path: Refinity/Math/MathUtility.cs
    startLine: 606
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the median value of an array of numbers.
  example: []
  syntax:
    content: public static double Median(params double[] numbers)
    parameters:
    - id: numbers
      type: System.Double[]
      description: The array of numbers.
    return:
      type: System.Double
      description: The median value.
    content.vb: Public Shared Function Median(ParamArray numbers As Double()) As Double
  overload: Refinity.Math.MathUtility.Median*
  nameWithType.vb: MathUtility.Median(ParamArray Double())
  fullName.vb: Refinity.Math.MathUtility.Median(ParamArray Double())
  name.vb: Median(ParamArray Double())
- uid: Refinity.Math.MathUtility.Mode(System.Double[])
  commentId: M:Refinity.Math.MathUtility.Mode(System.Double[])
  id: Mode(System.Double[])
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: Mode(params double[])
  nameWithType: MathUtility.Mode(params double[])
  fullName: Refinity.Math.MathUtility.Mode(params double[])
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: Mode
    path: Refinity/Math/MathUtility.cs
    startLine: 627
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Calculates the mode value of an array of numbers.
  example: []
  syntax:
    content: public static double Mode(params double[] numbers)
    parameters:
    - id: numbers
      type: System.Double[]
      description: The array of numbers.
    return:
      type: System.Double
      description: The mode value.
    content.vb: Public Shared Function Mode(ParamArray numbers As Double()) As Double
  overload: Refinity.Math.MathUtility.Mode*
  nameWithType.vb: MathUtility.Mode(ParamArray Double())
  fullName.vb: Refinity.Math.MathUtility.Mode(ParamArray Double())
  name.vb: Mode(ParamArray Double())
- uid: Refinity.Math.MathUtility.MatrixAddition(System.Object,System.Object)
  commentId: M:Refinity.Math.MathUtility.MatrixAddition(System.Object,System.Object)
  id: MatrixAddition(System.Object,System.Object)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: MatrixAddition(dynamic, dynamic)
  nameWithType: MathUtility.MatrixAddition(dynamic, dynamic)
  fullName: Refinity.Math.MathUtility.MatrixAddition(dynamic, dynamic)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MatrixAddition
    path: Refinity/Math/MathUtility.cs
    startLine: 664
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Adds two matrices together.
  example: []
  syntax:
    content: public static dynamic MatrixAddition(dynamic matrix1, dynamic matrix2)
    parameters:
    - id: matrix1
      type: dynamic
      description: The first matrix.
    - id: matrix2
      type: dynamic
      description: The second matrix.
    return:
      type: dynamic
      description: The result of the matrix addition.
    content.vb: Public Shared Function MatrixAddition(matrix1 As Object, matrix2 As Object) As Object
  overload: Refinity.Math.MathUtility.MatrixAddition*
  nameWithType.vb: MathUtility.MatrixAddition(Object, Object)
  fullName.vb: Refinity.Math.MathUtility.MatrixAddition(Object, Object)
  name.vb: MatrixAddition(Object, Object)
- uid: Refinity.Math.MathUtility.MatrixSubtraction(System.Object,System.Object)
  commentId: M:Refinity.Math.MathUtility.MatrixSubtraction(System.Object,System.Object)
  id: MatrixSubtraction(System.Object,System.Object)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: MatrixSubtraction(dynamic, dynamic)
  nameWithType: MathUtility.MatrixSubtraction(dynamic, dynamic)
  fullName: Refinity.Math.MathUtility.MatrixSubtraction(dynamic, dynamic)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MatrixSubtraction
    path: Refinity/Math/MathUtility.cs
    startLine: 692
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Performs subtraction of two matrices.
  example: []
  syntax:
    content: public static dynamic MatrixSubtraction(dynamic matrix1, dynamic matrix2)
    parameters:
    - id: matrix1
      type: dynamic
      description: The first matrix.
    - id: matrix2
      type: dynamic
      description: The second matrix.
    return:
      type: dynamic
      description: The result of the matrix subtraction.
    content.vb: Public Shared Function MatrixSubtraction(matrix1 As Object, matrix2 As Object) As Object
  overload: Refinity.Math.MathUtility.MatrixSubtraction*
  nameWithType.vb: MathUtility.MatrixSubtraction(Object, Object)
  fullName.vb: Refinity.Math.MathUtility.MatrixSubtraction(Object, Object)
  name.vb: MatrixSubtraction(Object, Object)
- uid: Refinity.Math.MathUtility.MatrixMultiplication(System.Object,System.Object)
  commentId: M:Refinity.Math.MathUtility.MatrixMultiplication(System.Object,System.Object)
  id: MatrixMultiplication(System.Object,System.Object)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: MatrixMultiplication(dynamic, dynamic)
  nameWithType: MathUtility.MatrixMultiplication(dynamic, dynamic)
  fullName: Refinity.Math.MathUtility.MatrixMultiplication(dynamic, dynamic)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MatrixMultiplication
    path: Refinity/Math/MathUtility.cs
    startLine: 720
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Performs matrix multiplication on two dynamic matrices.
  example: []
  syntax:
    content: public static dynamic MatrixMultiplication(dynamic matrix1, dynamic matrix2)
    parameters:
    - id: matrix1
      type: dynamic
      description: The first matrix.
    - id: matrix2
      type: dynamic
      description: The second matrix.
    return:
      type: dynamic
      description: The result of the matrix multiplication.
    content.vb: Public Shared Function MatrixMultiplication(matrix1 As Object, matrix2 As Object) As Object
  overload: Refinity.Math.MathUtility.MatrixMultiplication*
  nameWithType.vb: MathUtility.MatrixMultiplication(Object, Object)
  fullName.vb: Refinity.Math.MathUtility.MatrixMultiplication(Object, Object)
  name.vb: MatrixMultiplication(Object, Object)
- uid: Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object,System.Double)
  commentId: M:Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object,System.Double)
  id: MatrixScalarMultiplication(System.Object,System.Double)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: MatrixScalarMultiplication(dynamic, double)
  nameWithType: MathUtility.MatrixScalarMultiplication(dynamic, double)
  fullName: Refinity.Math.MathUtility.MatrixScalarMultiplication(dynamic, double)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MatrixScalarMultiplication
    path: Refinity/Math/MathUtility.cs
    startLine: 752
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Performs scalar multiplication on a matrix.
  example: []
  syntax:
    content: public static dynamic MatrixScalarMultiplication(dynamic matrix, double scalar)
    parameters:
    - id: matrix
      type: dynamic
      description: The matrix to be multiplied.
    - id: scalar
      type: System.Double
      description: The scalar value to multiply the matrix by.
    return:
      type: dynamic
      description: The result of the matrix scalar multiplication.
    content.vb: Public Shared Function MatrixScalarMultiplication(matrix As Object, scalar As Double) As Object
  overload: Refinity.Math.MathUtility.MatrixScalarMultiplication*
  nameWithType.vb: MathUtility.MatrixScalarMultiplication(Object, Double)
  fullName.vb: Refinity.Math.MathUtility.MatrixScalarMultiplication(Object, Double)
  name.vb: MatrixScalarMultiplication(Object, Double)
- uid: Refinity.Math.MathUtility.MatrixTranspose(System.Object)
  commentId: M:Refinity.Math.MathUtility.MatrixTranspose(System.Object)
  id: MatrixTranspose(System.Object)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: MatrixTranspose(dynamic)
  nameWithType: MathUtility.MatrixTranspose(dynamic)
  fullName: Refinity.Math.MathUtility.MatrixTranspose(dynamic)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MatrixTranspose
    path: Refinity/Math/MathUtility.cs
    startLine: 774
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Transposes a matrix.
  example: []
  syntax:
    content: public static dynamic MatrixTranspose(dynamic matrix)
    parameters:
    - id: matrix
      type: dynamic
      description: The matrix to transpose.
    return:
      type: dynamic
      description: The transposed matrix.
    content.vb: Public Shared Function MatrixTranspose(matrix As Object) As Object
  overload: Refinity.Math.MathUtility.MatrixTranspose*
  nameWithType.vb: MathUtility.MatrixTranspose(Object)
  fullName.vb: Refinity.Math.MathUtility.MatrixTranspose(Object)
  name.vb: MatrixTranspose(Object)
- uid: Refinity.Math.MathUtility.MatrixInverse(System.Object)
  commentId: M:Refinity.Math.MathUtility.MatrixInverse(System.Object)
  id: MatrixInverse(System.Object)
  parent: Refinity.Math.MathUtility
  langs:
  - csharp
  - vb
  name: MatrixInverse(dynamic)
  nameWithType: MathUtility.MatrixInverse(dynamic)
  fullName: Refinity.Math.MathUtility.MatrixInverse(dynamic)
  type: Method
  source:
    remote:
      path: Refinity/Math/MathUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: MatrixInverse
    path: Refinity/Math/MathUtility.cs
    startLine: 845
  assemblies:
  - Refinity
  namespace: Refinity.Math
  summary: Represents a type that can hold values of any type.
  remarks: >-
    The dynamic type is used to bypass compile-time type checking and enable late binding.

    It allows you to invoke members and perform operations on objects without knowing their specific type at compile time.
  example: []
  syntax:
    content: public static dynamic MatrixInverse(dynamic matrix)
    parameters:
    - id: matrix
      type: dynamic
    return:
      type: dynamic
    content.vb: Public Shared Function MatrixInverse(matrix As Object) As Object
  overload: Refinity.Math.MathUtility.MatrixInverse*
  nameWithType.vb: MathUtility.MatrixInverse(Object)
  fullName.vb: Refinity.Math.MathUtility.MatrixInverse(Object)
  name.vb: MatrixInverse(Object)
references:
- uid: Refinity.Math
  commentId: N:Refinity.Math
  href: Refinity.html
  name: Refinity.Math
  nameWithType: Refinity.Math
  fullName: Refinity.Math
  spec.csharp:
  - uid: Refinity
    name: Refinity
    href: Refinity.html
  - name: .
  - uid: Refinity.Math
    name: Math
    href: Refinity.Math.html
  spec.vb:
  - uid: Refinity
    name: Refinity
    href: Refinity.html
  - name: .
  - uid: Refinity.Math
    name: Math
    href: Refinity.Math.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Refinity.Math.MathUtility.Factorial*
  commentId: Overload:Refinity.Math.MathUtility.Factorial
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Factorial_System_Int32_
  name: Factorial
  nameWithType: MathUtility.Factorial
  fullName: Refinity.Math.MathUtility.Factorial
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Refinity.Math.MathUtility.IsPrime*
  commentId: Overload:Refinity.Math.MathUtility.IsPrime
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_IsPrime_System_Int32_
  name: IsPrime
  nameWithType: MathUtility.IsPrime
  fullName: Refinity.Math.MathUtility.IsPrime
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: Refinity.Math.MathUtility.IsEven*
  commentId: Overload:Refinity.Math.MathUtility.IsEven
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_IsEven_System_Int32_
  name: IsEven
  nameWithType: MathUtility.IsEven
  fullName: Refinity.Math.MathUtility.IsEven
- uid: Refinity.Math.MathUtility.IsOdd*
  commentId: Overload:Refinity.Math.MathUtility.IsOdd
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_IsOdd_System_Int32_
  name: IsOdd
  nameWithType: MathUtility.IsOdd
  fullName: Refinity.Math.MathUtility.IsOdd
- uid: Refinity.Math.MathUtility.IsDivisibleBy*
  commentId: Overload:Refinity.Math.MathUtility.IsDivisibleBy
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_IsDivisibleBy_System_Int32_System_Int32_
  name: IsDivisibleBy
  nameWithType: MathUtility.IsDivisibleBy
  fullName: Refinity.Math.MathUtility.IsDivisibleBy
- uid: Refinity.Math.MathUtility.GreatestCommonDivisor*
  commentId: Overload:Refinity.Math.MathUtility.GreatestCommonDivisor
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_GreatestCommonDivisor_System_Int32_System_Int32_
  name: GreatestCommonDivisor
  nameWithType: MathUtility.GreatestCommonDivisor
  fullName: Refinity.Math.MathUtility.GreatestCommonDivisor
- uid: Refinity.Math.MathUtility.LeastCommonMultiple*
  commentId: Overload:Refinity.Math.MathUtility.LeastCommonMultiple
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_LeastCommonMultiple_System_Int32_System_Int32_
  name: LeastCommonMultiple
  nameWithType: MathUtility.LeastCommonMultiple
  fullName: Refinity.Math.MathUtility.LeastCommonMultiple
- uid: Refinity.Math.MathUtility.ConvertToBaseBinary*
  commentId: Overload:Refinity.Math.MathUtility.ConvertToBaseBinary
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_ConvertToBaseBinary_System_Int32_
  name: ConvertToBaseBinary
  nameWithType: MathUtility.ConvertToBaseBinary
  fullName: Refinity.Math.MathUtility.ConvertToBaseBinary
- uid: Refinity.Math.MathUtility.ConvertToBaseOctal*
  commentId: Overload:Refinity.Math.MathUtility.ConvertToBaseOctal
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_ConvertToBaseOctal_System_Int32_
  name: ConvertToBaseOctal
  nameWithType: MathUtility.ConvertToBaseOctal
  fullName: Refinity.Math.MathUtility.ConvertToBaseOctal
- uid: Refinity.Math.MathUtility.ConvertToBaseHexadecimal*
  commentId: Overload:Refinity.Math.MathUtility.ConvertToBaseHexadecimal
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_ConvertToBaseHexadecimal_System_Int32_
  name: ConvertToBaseHexadecimal
  nameWithType: MathUtility.ConvertToBaseHexadecimal
  fullName: Refinity.Math.MathUtility.ConvertToBaseHexadecimal
- uid: Refinity.Math.MathUtility.Fibonacci*
  commentId: Overload:Refinity.Math.MathUtility.Fibonacci
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Fibonacci_System_Int32_
  name: Fibonacci
  nameWithType: MathUtility.Fibonacci
  fullName: Refinity.Math.MathUtility.Fibonacci
- uid: Refinity.Math.MathUtility.GetStandardDeviation*
  commentId: Overload:Refinity.Math.MathUtility.GetStandardDeviation
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_GetStandardDeviation_System_Int32___
  name: GetStandardDeviation
  nameWithType: MathUtility.GetStandardDeviation
  fullName: Refinity.Math.MathUtility.GetStandardDeviation
- uid: System.Int32[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int[]
  nameWithType: int[]
  fullName: int[]
  nameWithType.vb: Integer()
  fullName.vb: Integer()
  name.vb: Integer()
  spec.csharp:
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: (
  - name: )
- uid: System.ValueTuple{System.Double,System.Double}
  commentId: T:System.ValueTuple{System.Double,System.Double}
  parent: System
  definition: System.ValueTuple`2
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: (double mean, double standardDeviation)
  nameWithType: (double mean, double standardDeviation)
  fullName: (double mean, double standardDeviation)
  nameWithType.vb: (mean As Double, standardDeviation As Double)
  fullName.vb: (mean As Double, standardDeviation As Double)
  name.vb: (mean As Double, standardDeviation As Double)
  spec.csharp:
  - name: (
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.mean
    name: mean
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.mean
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.standardDeviation
    name: standardDeviation
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.standarddeviation
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Double,System.Double}.mean
    name: mean
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.mean
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Double,System.Double}.standardDeviation
    name: standardDeviation
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.double,system.double-.standarddeviation
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.ValueTuple`2
  commentId: T:System.ValueTuple`2
  name: (T1, T2)
  nameWithType: (T1, T2)
  fullName: (T1, T2)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: )
- uid: System.Double[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double[]
  nameWithType: double[]
  fullName: double[]
  nameWithType.vb: Double()
  fullName.vb: Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: (
  - name: )
- uid: Refinity.Math.MathUtility.PerformLinearRegression*
  commentId: Overload:Refinity.Math.MathUtility.PerformLinearRegression
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_PerformLinearRegression_System_Double___System_Double___
  name: PerformLinearRegression
  nameWithType: MathUtility.PerformLinearRegression
  fullName: Refinity.Math.MathUtility.PerformLinearRegression
- uid: Refinity.Math.LinearRegressionModel
  commentId: T:Refinity.Math.LinearRegressionModel
  parent: Refinity.Math
  href: Refinity.Math.LinearRegressionModel.html
  name: LinearRegressionModel
  nameWithType: LinearRegressionModel
  fullName: Refinity.Math.LinearRegressionModel
- uid: Refinity.Math.MathUtility.SimpsonRuleIntegration*
  commentId: Overload:Refinity.Math.MathUtility.SimpsonRuleIntegration
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_SimpsonRuleIntegration_System_Func_System_Double_System_Double__System_Double_System_Double_System_Int32_
  name: SimpsonRuleIntegration
  nameWithType: MathUtility.SimpsonRuleIntegration
  fullName: Refinity.Math.MathUtility.SimpsonRuleIntegration
- uid: System.Func{System.Double,System.Double}
  commentId: T:System.Func{System.Double,System.Double}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<double, double>
  nameWithType: Func<double, double>
  fullName: System.Func<double, double>
  nameWithType.vb: Func(Of Double, Double)
  fullName.vb: System.Func(Of Double, Double)
  name.vb: Func(Of Double, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: ','
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: Refinity.Math.MathUtility.NextPrime*
  commentId: Overload:Refinity.Math.MathUtility.NextPrime
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_NextPrime_System_Double_
  name: NextPrime
  nameWithType: MathUtility.NextPrime
  fullName: Refinity.Math.MathUtility.NextPrime
- uid: Refinity.Math.MathUtility.PercentageOf*
  commentId: Overload:Refinity.Math.MathUtility.PercentageOf
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_PercentageOf_System_Double_System_Double_
  name: PercentageOf
  nameWithType: MathUtility.PercentageOf
  fullName: Refinity.Math.MathUtility.PercentageOf
- uid: Refinity.Math.MathUtility.IsApproximatelyEqualTo*
  commentId: Overload:Refinity.Math.MathUtility.IsApproximatelyEqualTo
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_IsApproximatelyEqualTo_System_Double_System_Double_System_Double_
  name: IsApproximatelyEqualTo
  nameWithType: MathUtility.IsApproximatelyEqualTo
  fullName: Refinity.Math.MathUtility.IsApproximatelyEqualTo
- uid: Refinity.Math.MathUtility.Clamp*
  commentId: Overload:Refinity.Math.MathUtility.Clamp
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Clamp_System_Double_System_Double_System_Double_
  name: Clamp
  nameWithType: MathUtility.Clamp
  fullName: Refinity.Math.MathUtility.Clamp
- uid: Refinity.Math.MathUtility.Divisors*
  commentId: Overload:Refinity.Math.MathUtility.Divisors
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Divisors_System_Int32_
  name: Divisors
  nameWithType: MathUtility.Divisors
  fullName: Refinity.Math.MathUtility.Divisors
- uid: Refinity.Math.MathUtility.Normalize*
  commentId: Overload:Refinity.Math.MathUtility.Normalize
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Normalize_System_Double_System_Double_System_Double_
  name: Normalize
  nameWithType: MathUtility.Normalize
  fullName: Refinity.Math.MathUtility.Normalize
- uid: Refinity.Math.MathUtility.LogBaseN*
  commentId: Overload:Refinity.Math.MathUtility.LogBaseN
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_LogBaseN_System_Double_System_Double_
  name: LogBaseN
  nameWithType: MathUtility.LogBaseN
  fullName: Refinity.Math.MathUtility.LogBaseN
- uid: Refinity.Math.MathUtility.IsInRange*
  commentId: Overload:Refinity.Math.MathUtility.IsInRange
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_IsInRange_System_Double_System_Double_System_Double_
  name: IsInRange
  nameWithType: MathUtility.IsInRange
  fullName: Refinity.Math.MathUtility.IsInRange
- uid: Refinity.Math.MathUtility.ToStringPercentage*
  commentId: Overload:Refinity.Math.MathUtility.ToStringPercentage
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_ToStringPercentage_System_Double_System_Int32_
  name: ToStringPercentage
  nameWithType: MathUtility.ToStringPercentage
  fullName: Refinity.Math.MathUtility.ToStringPercentage
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Refinity.Math.MathUtility.ToScientificNotation*
  commentId: Overload:Refinity.Math.MathUtility.ToScientificNotation
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_ToScientificNotation_System_Double_
  name: ToScientificNotation
  nameWithType: MathUtility.ToScientificNotation
  fullName: Refinity.Math.MathUtility.ToScientificNotation
- uid: Refinity.Math.MathUtility.SumTo*
  commentId: Overload:Refinity.Math.MathUtility.SumTo
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_SumTo_System_Double_System_Double_
  name: SumTo
  nameWithType: MathUtility.SumTo
  fullName: Refinity.Math.MathUtility.SumTo
- uid: Refinity.Math.MathUtility.Invert*
  commentId: Overload:Refinity.Math.MathUtility.Invert
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Invert_System_Double_
  name: Invert
  nameWithType: MathUtility.Invert
  fullName: Refinity.Math.MathUtility.Invert
- uid: Refinity.Math.MathUtility.DegreesToHMSString*
  commentId: Overload:Refinity.Math.MathUtility.DegreesToHMSString
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_DegreesToHMSString_System_Double_
  name: DegreesToHMSString
  nameWithType: MathUtility.DegreesToHMSString
  fullName: Refinity.Math.MathUtility.DegreesToHMSString
- uid: Refinity.Math.MathUtility.DegreesToHMS*
  commentId: Overload:Refinity.Math.MathUtility.DegreesToHMS
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_DegreesToHMS_System_Double_
  name: DegreesToHMS
  nameWithType: MathUtility.DegreesToHMS
  fullName: Refinity.Math.MathUtility.DegreesToHMS
- uid: System.ValueTuple{System.Int32,System.Int32,System.Double}
  commentId: T:System.ValueTuple{System.Int32,System.Int32,System.Double}
  parent: System
  definition: System.ValueTuple`3
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: (int hours, int minutes, double seconds)
  nameWithType: (int hours, int minutes, double seconds)
  fullName: (int hours, int minutes, double seconds)
  nameWithType.vb: (hours As Integer, minutes As Integer, seconds As Double)
  fullName.vb: (hours As Integer, minutes As Integer, seconds As Double)
  name.vb: (hours As Integer, minutes As Integer, seconds As Double)
  spec.csharp:
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32,System.Double}.hours
    name: hours
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32,system.double-.hours
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32,System.Double}.minutes
    name: minutes
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32,system.double-.minutes
  - name: ','
  - name: " "
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32,System.Double}.seconds
    name: seconds
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32,system.double-.seconds
  - name: )
  spec.vb:
  - name: (
  - uid: System.ValueTuple{System.Int32,System.Int32,System.Double}.hours
    name: hours
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32,system.double-.hours
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32,System.Double}.minutes
    name: minutes
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32,system.double-.minutes
  - name: " "
  - name: As
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.ValueTuple{System.Int32,System.Int32,System.Double}.seconds
    name: seconds
    href: https://learn.microsoft.com/dotnet/api/system.valuetuple-system.int32,system.int32,system.double-.seconds
  - name: " "
  - name: As
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.ValueTuple`3
  commentId: T:System.ValueTuple`3
  name: (T1, T2, T3)
  nameWithType: (T1, T2, T3)
  fullName: (T1, T2, T3)
  spec.csharp:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
  spec.vb:
  - name: (
  - name: T1
  - name: ','
  - name: " "
  - name: T2
  - name: ','
  - name: " "
  - name: T3
  - name: )
- uid: Refinity.Math.MathUtility.DegreesToRadians*
  commentId: Overload:Refinity.Math.MathUtility.DegreesToRadians
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_DegreesToRadians_System_Double_
  name: DegreesToRadians
  nameWithType: MathUtility.DegreesToRadians
  fullName: Refinity.Math.MathUtility.DegreesToRadians
- uid: Refinity.Math.MathUtility.RadiansToDegrees*
  commentId: Overload:Refinity.Math.MathUtility.RadiansToDegrees
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_RadiansToDegrees_System_Double_
  name: RadiansToDegrees
  nameWithType: MathUtility.RadiansToDegrees
  fullName: Refinity.Math.MathUtility.RadiansToDegrees
- uid: Refinity.Math.MathUtility.Median*
  commentId: Overload:Refinity.Math.MathUtility.Median
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Median_System_Double___
  name: Median
  nameWithType: MathUtility.Median
  fullName: Refinity.Math.MathUtility.Median
- uid: Refinity.Math.MathUtility.Mode*
  commentId: Overload:Refinity.Math.MathUtility.Mode
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_Mode_System_Double___
  name: Mode
  nameWithType: MathUtility.Mode
  fullName: Refinity.Math.MathUtility.Mode
- uid: Refinity.Math.MathUtility.MatrixAddition*
  commentId: Overload:Refinity.Math.MathUtility.MatrixAddition
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_MatrixAddition_System_Object_System_Object_
  name: MatrixAddition
  nameWithType: MathUtility.MatrixAddition
  fullName: Refinity.Math.MathUtility.MatrixAddition
- uid: dynamic
  commentId: T:System.Object
  isExternal: true
  name: dynamic
  nameWithType: dynamic
  fullName: dynamic
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Refinity.Math.MathUtility.MatrixSubtraction*
  commentId: Overload:Refinity.Math.MathUtility.MatrixSubtraction
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_MatrixSubtraction_System_Object_System_Object_
  name: MatrixSubtraction
  nameWithType: MathUtility.MatrixSubtraction
  fullName: Refinity.Math.MathUtility.MatrixSubtraction
- uid: Refinity.Math.MathUtility.MatrixMultiplication*
  commentId: Overload:Refinity.Math.MathUtility.MatrixMultiplication
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_MatrixMultiplication_System_Object_System_Object_
  name: MatrixMultiplication
  nameWithType: MathUtility.MatrixMultiplication
  fullName: Refinity.Math.MathUtility.MatrixMultiplication
- uid: Refinity.Math.MathUtility.MatrixScalarMultiplication*
  commentId: Overload:Refinity.Math.MathUtility.MatrixScalarMultiplication
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_MatrixScalarMultiplication_System_Object_System_Double_
  name: MatrixScalarMultiplication
  nameWithType: MathUtility.MatrixScalarMultiplication
  fullName: Refinity.Math.MathUtility.MatrixScalarMultiplication
- uid: Refinity.Math.MathUtility.MatrixTranspose*
  commentId: Overload:Refinity.Math.MathUtility.MatrixTranspose
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_MatrixTranspose_System_Object_
  name: MatrixTranspose
  nameWithType: MathUtility.MatrixTranspose
  fullName: Refinity.Math.MathUtility.MatrixTranspose
- uid: Refinity.Math.MathUtility.MatrixInverse*
  commentId: Overload:Refinity.Math.MathUtility.MatrixInverse
  href: Refinity.Math.MathUtility.html#Refinity_Math_MathUtility_MatrixInverse_System_Object_
  name: MatrixInverse
  nameWithType: MathUtility.MatrixInverse
  fullName: Refinity.Math.MathUtility.MatrixInverse
