### YamlMime:ManagedReference
items:
- uid: Refinity.Finance.FinanceUtility
  commentId: T:Refinity.Finance.FinanceUtility
  id: FinanceUtility
  parent: Refinity.Finance
  children:
  - Refinity.Finance.FinanceUtility.ApplyTax(System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double,System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double,System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.CalculateInterest(System.Double,System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(System.Collections.Generic.List{System.Double})
  - Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double,System.Collections.Generic.List{System.Double})
  - Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double,System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.DaysUntilDue(System.DateTime)
  - Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32,System.Int32)
  - Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double,System.Collections.Generic.List{System.Double})
  - Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.DateTime,System.DateTime)
  - Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.Double)
  - Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
  - Refinity.Finance.FinanceUtility.ToCurrency(System.Double,System.Globalization.CultureInfo)
  langs:
  - csharp
  - vb
  name: FinanceUtility
  nameWithType: FinanceUtility
  fullName: Refinity.Finance.FinanceUtility
  type: Class
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: FinanceUtility
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 5
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  syntax:
    content: public static class FinanceUtility
    content.vb: Public Module FinanceUtility
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double,System.Double)
  id: DifferencePercentage(System.Double,System.Double)
  isExtensionMethod: true
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: DifferencePercentage(double, double)
  nameWithType: FinanceUtility.DifferencePercentage(double, double)
  fullName: Refinity.Finance.FinanceUtility.DifferencePercentage(double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: DifferencePercentage
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 13
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the difference between two values as a percentage.
  example: []
  syntax:
    content: public static double DifferencePercentage(this double value, double otherValue)
    parameters:
    - id: value
      type: System.Double
      description: The first value.
    - id: otherValue
      type: System.Double
      description: The second value.
    return:
      type: System.Double
      description: The difference between the two values as a percentage.
    content.vb: Public Shared Function DifferencePercentage(value As Double, otherValue As Double) As Double
  overload: Refinity.Finance.FinanceUtility.DifferencePercentage*
  nameWithType.vb: FinanceUtility.DifferencePercentage(Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.DifferencePercentage(Double, Double)
  name.vb: DifferencePercentage(Double, Double)
- uid: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32,System.Int32)
  commentId: M:Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32,System.Int32)
  id: DifferencePercentage(System.Int32,System.Int32)
  isExtensionMethod: true
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: DifferencePercentage(int, int)
  nameWithType: FinanceUtility.DifferencePercentage(int, int)
  fullName: Refinity.Finance.FinanceUtility.DifferencePercentage(int, int)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: DifferencePercentage
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 24
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the difference between two integers as a percentage.
  example: []
  syntax:
    content: public static double DifferencePercentage(this int value, int otherValue)
    parameters:
    - id: value
      type: System.Int32
      description: The first integer value.
    - id: otherValue
      type: System.Int32
      description: The second integer value.
    return:
      type: System.Double
      description: The difference between the two integers as a percentage.
    content.vb: Public Shared Function DifferencePercentage(value As Integer, otherValue As Integer) As Double
  overload: Refinity.Finance.FinanceUtility.DifferencePercentage*
  nameWithType.vb: FinanceUtility.DifferencePercentage(Integer, Integer)
  fullName.vb: Refinity.Finance.FinanceUtility.DifferencePercentage(Integer, Integer)
  name.vb: DifferencePercentage(Integer, Integer)
- uid: Refinity.Finance.FinanceUtility.CalculateInterest(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.CalculateInterest(System.Double,System.Double,System.Double)
  id: CalculateInterest(System.Double,System.Double,System.Double)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: CalculateInterest(double, double, double)
  nameWithType: FinanceUtility.CalculateInterest(double, double, double)
  fullName: Refinity.Finance.FinanceUtility.CalculateInterest(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: CalculateInterest
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 36
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the interest based on the principal amount, interest rate, and time period.
  example: []
  syntax:
    content: public static double CalculateInterest(double principal, double interestRate, double timePeriod)
    parameters:
    - id: principal
      type: System.Double
      description: The principal amount.
    - id: interestRate
      type: System.Double
      description: The interest rate.
    - id: timePeriod
      type: System.Double
      description: The time period in years.
    return:
      type: System.Double
      description: The calculated interest.
    content.vb: Public Shared Function CalculateInterest(principal As Double, interestRate As Double, timePeriod As Double) As Double
  overload: Refinity.Finance.FinanceUtility.CalculateInterest*
  nameWithType.vb: FinanceUtility.CalculateInterest(Double, Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.CalculateInterest(Double, Double, Double)
  name.vb: CalculateInterest(Double, Double, Double)
- uid: Refinity.Finance.FinanceUtility.ApplyTax(System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.ApplyTax(System.Double,System.Double)
  id: ApplyTax(System.Double,System.Double)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: ApplyTax(double, double)
  nameWithType: FinanceUtility.ApplyTax(double, double)
  fullName: Refinity.Finance.FinanceUtility.ApplyTax(double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ApplyTax
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 47
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Applies tax to the given amount.
  example: []
  syntax:
    content: public static double ApplyTax(double amount, double taxRate)
    parameters:
    - id: amount
      type: System.Double
      description: The amount to apply tax to.
    - id: taxRate
      type: System.Double
      description: The tax rate in percentage.
    return:
      type: System.Double
      description: The amount with tax applied.
    content.vb: Public Shared Function ApplyTax(amount As Double, taxRate As Double) As Double
  overload: Refinity.Finance.FinanceUtility.ApplyTax*
  nameWithType.vb: FinanceUtility.ApplyTax(Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.ApplyTax(Double, Double)
  name.vb: ApplyTax(Double, Double)
- uid: Refinity.Finance.FinanceUtility.DaysUntilDue(System.DateTime)
  commentId: M:Refinity.Finance.FinanceUtility.DaysUntilDue(System.DateTime)
  id: DaysUntilDue(System.DateTime)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: DaysUntilDue(DateTime)
  nameWithType: FinanceUtility.DaysUntilDue(DateTime)
  fullName: Refinity.Finance.FinanceUtility.DaysUntilDue(System.DateTime)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: DaysUntilDue
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 57
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the number of days until the specified due date.
  example: []
  syntax:
    content: public static int DaysUntilDue(DateTime dueDate)
    parameters:
    - id: dueDate
      type: System.DateTime
      description: The due date to calculate the days until.
    return:
      type: System.Int32
      description: The number of days until the due date.
    content.vb: Public Shared Function DaysUntilDue(dueDate As Date) As Integer
  overload: Refinity.Finance.FinanceUtility.DaysUntilDue*
  nameWithType.vb: FinanceUtility.DaysUntilDue(Date)
  fullName.vb: Refinity.Finance.FinanceUtility.DaysUntilDue(Date)
  name.vb: DaysUntilDue(Date)
- uid: Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double,System.Double,System.Double)
  id: BreakEvenPoint(System.Double,System.Double,System.Double)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: BreakEvenPoint(double, double, double)
  nameWithType: FinanceUtility.BreakEvenPoint(double, double, double)
  fullName: Refinity.Finance.FinanceUtility.BreakEvenPoint(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: BreakEvenPoint
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 69
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the break-even point based on fixed costs, variable costs, and selling price per unit.
  example: []
  syntax:
    content: public static double BreakEvenPoint(double fixedCosts, double variableCosts, double sellingPrice)
    parameters:
    - id: fixedCosts
      type: System.Double
      description: The total fixed costs.
    - id: variableCosts
      type: System.Double
      description: The variable costs per unit.
    - id: sellingPrice
      type: System.Double
      description: The selling price per unit.
    return:
      type: System.Double
      description: The break-even point in units.
    content.vb: Public Shared Function BreakEvenPoint(fixedCosts As Double, variableCosts As Double, sellingPrice As Double) As Double
  overload: Refinity.Finance.FinanceUtility.BreakEvenPoint*
  nameWithType.vb: FinanceUtility.BreakEvenPoint(Double, Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.BreakEvenPoint(Double, Double, Double)
  name.vb: BreakEvenPoint(Double, Double, Double)
- uid: Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double,System.Double,System.Double)
  id: CalculateCompoundInterest(System.Double,System.Double,System.Double)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: CalculateCompoundInterest(double, double, double)
  nameWithType: FinanceUtility.CalculateCompoundInterest(double, double, double)
  fullName: Refinity.Finance.FinanceUtility.CalculateCompoundInterest(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: CalculateCompoundInterest
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 87
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the compound interest based on the principal amount, interest rate, and time period.
  example: []
  syntax:
    content: public static double CalculateCompoundInterest(double principal, double interestRate, double timePeriod)
    parameters:
    - id: principal
      type: System.Double
      description: The principal amount.
    - id: interestRate
      type: System.Double
      description: The interest rate.
    - id: timePeriod
      type: System.Double
      description: The time period in years.
    return:
      type: System.Double
      description: The calculated compound interest.
    content.vb: Public Shared Function CalculateCompoundInterest(principal As Double, interestRate As Double, timePeriod As Double) As Double
  overload: Refinity.Finance.FinanceUtility.CalculateCompoundInterest*
  nameWithType.vb: FinanceUtility.CalculateCompoundInterest(Double, Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.CalculateCompoundInterest(Double, Double, Double)
  name.vb: CalculateCompoundInterest(Double, Double, Double)
- uid: Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
  id: ToCurrency(System.Double)
  isExtensionMethod: true
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: ToCurrency(double)
  nameWithType: FinanceUtility.ToCurrency(double)
  fullName: Refinity.Finance.FinanceUtility.ToCurrency(double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ToCurrency
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 98
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Converts a double value to a currency string representation.
  example: []
  syntax:
    content: public static string ToCurrency(this double value)
    parameters:
    - id: value
      type: System.Double
      description: The double value to convert.
    return:
      type: System.String
      description: A string representation of the double value formatted as currency.
    content.vb: Public Shared Function ToCurrency(value As Double) As String
  overload: Refinity.Finance.FinanceUtility.ToCurrency*
  nameWithType.vb: FinanceUtility.ToCurrency(Double)
  fullName.vb: Refinity.Finance.FinanceUtility.ToCurrency(Double)
  name.vb: ToCurrency(Double)
- uid: Refinity.Finance.FinanceUtility.ToCurrency(System.Double,System.Globalization.CultureInfo)
  commentId: M:Refinity.Finance.FinanceUtility.ToCurrency(System.Double,System.Globalization.CultureInfo)
  id: ToCurrency(System.Double,System.Globalization.CultureInfo)
  isExtensionMethod: true
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: ToCurrency(double, CultureInfo)
  nameWithType: FinanceUtility.ToCurrency(double, CultureInfo)
  fullName: Refinity.Finance.FinanceUtility.ToCurrency(double, System.Globalization.CultureInfo)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: ToCurrency
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 109
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Converts the specified integer value to a currency string representation using the specified culture information.
  example: []
  syntax:
    content: public static string ToCurrency(this double value, CultureInfo cultureInfo)
    parameters:
    - id: value
      type: System.Double
      description: The integer value to convert.
    - id: cultureInfo
      type: System.Globalization.CultureInfo
      description: The culture information used for formatting the currency string.
    return:
      type: System.String
      description: A string representation of the specified integer value formatted as a currency.
    content.vb: Public Shared Function ToCurrency(value As Double, cultureInfo As CultureInfo) As String
  overload: Refinity.Finance.FinanceUtility.ToCurrency*
  nameWithType.vb: FinanceUtility.ToCurrency(Double, CultureInfo)
  fullName.vb: Refinity.Finance.FinanceUtility.ToCurrency(Double, System.Globalization.CultureInfo)
  name.vb: ToCurrency(Double, CultureInfo)
- uid: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.Double)
  id: PredictFutureValue(System.Double,System.Double,System.Double)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: PredictFutureValue(double, double, double)
  nameWithType: FinanceUtility.PredictFutureValue(double, double, double)
  fullName: Refinity.Finance.FinanceUtility.PredictFutureValue(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PredictFutureValue
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 121
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the future value of a present value based on the interest rate and time period.
  example: []
  syntax:
    content: public static double PredictFutureValue(double presentValue, double interestRate, double timePeriod)
    parameters:
    - id: presentValue
      type: System.Double
      description: The present value.
    - id: interestRate
      type: System.Double
      description: The interest rate.
    - id: timePeriod
      type: System.Double
      description: The time period in years.
    return:
      type: System.Double
      description: The future value of the present value.
    content.vb: Public Shared Function PredictFutureValue(presentValue As Double, interestRate As Double, timePeriod As Double) As Double
  overload: Refinity.Finance.FinanceUtility.PredictFutureValue*
  nameWithType.vb: FinanceUtility.PredictFutureValue(Double, Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.PredictFutureValue(Double, Double, Double)
  name.vb: PredictFutureValue(Double, Double, Double)
- uid: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.DateTime,System.DateTime)
  commentId: M:Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.DateTime,System.DateTime)
  id: PredictFutureValue(System.Double,System.Double,System.DateTime,System.DateTime)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: PredictFutureValue(double, double, DateTime, DateTime)
  nameWithType: FinanceUtility.PredictFutureValue(double, double, DateTime, DateTime)
  fullName: Refinity.Finance.FinanceUtility.PredictFutureValue(double, double, System.DateTime, System.DateTime)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PredictFutureValue
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 134
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Predicts the future value based on the present value, interest rate, start date, and end date.
  example: []
  syntax:
    content: public static double PredictFutureValue(double presentValue, double interestRate, DateTime startDate, DateTime endDate)
    parameters:
    - id: presentValue
      type: System.Double
      description: The present value.
    - id: interestRate
      type: System.Double
      description: The interest rate.
    - id: startDate
      type: System.DateTime
      description: The start date.
    - id: endDate
      type: System.DateTime
      description: The end date.
    return:
      type: System.Double
      description: The predicted future value.
    content.vb: Public Shared Function PredictFutureValue(presentValue As Double, interestRate As Double, startDate As Date, endDate As Date) As Double
  overload: Refinity.Finance.FinanceUtility.PredictFutureValue*
  nameWithType.vb: FinanceUtility.PredictFutureValue(Double, Double, Date, Date)
  fullName.vb: Refinity.Finance.FinanceUtility.PredictFutureValue(Double, Double, Date, Date)
  name.vb: PredictFutureValue(Double, Double, Date, Date)
- uid: Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double,System.Collections.Generic.List{System.Double})
  commentId: M:Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double,System.Collections.Generic.List{System.Double})
  id: PaybackPeriod(System.Double,System.Collections.Generic.List{System.Double})
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: PaybackPeriod(double, List<double>)
  nameWithType: FinanceUtility.PaybackPeriod(double, List<double>)
  fullName: Refinity.Finance.FinanceUtility.PaybackPeriod(double, System.Collections.Generic.List<double>)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: PaybackPeriod
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 146
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the time required to recover the cost of an investment.
  example: []
  syntax:
    content: public static double PaybackPeriod(double initialInvestment, List<double> cashFlows)
    parameters:
    - id: initialInvestment
      type: System.Double
      description: The initial investment cost.
    - id: cashFlows
      type: System.Collections.Generic.List{System.Double}
      description: The cash flows generated by the investment.
    return:
      type: System.Double
      description: The payback period in years.
    content.vb: Public Shared Function PaybackPeriod(initialInvestment As Double, cashFlows As List(Of Double)) As Double
  overload: Refinity.Finance.FinanceUtility.PaybackPeriod*
  nameWithType.vb: FinanceUtility.PaybackPeriod(Double, List(Of Double))
  fullName.vb: Refinity.Finance.FinanceUtility.PaybackPeriod(Double, System.Collections.Generic.List(Of Double))
  name.vb: PaybackPeriod(Double, List(Of Double))
- uid: Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double,System.Double,System.Double)
  commentId: M:Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double,System.Double,System.Double)
  id: CalculateSimpleInterest(System.Double,System.Double,System.Double)
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: CalculateSimpleInterest(double, double, double)
  nameWithType: FinanceUtility.CalculateSimpleInterest(double, double, double)
  fullName: Refinity.Finance.FinanceUtility.CalculateSimpleInterest(double, double, double)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: CalculateSimpleInterest
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 175
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the simple interest based on the principal amount, interest rate, and time period.
  example: []
  syntax:
    content: public static double CalculateSimpleInterest(double principal, double interestRate, double timePeriod)
    parameters:
    - id: principal
      type: System.Double
      description: The principal amount.
    - id: interestRate
      type: System.Double
      description: The interest rate.
    - id: timePeriod
      type: System.Double
      description: The time period in years.
    return:
      type: System.Double
      description: The calculated simple interest.
    content.vb: Public Shared Function CalculateSimpleInterest(principal As Double, interestRate As Double, timePeriod As Double) As Double
  overload: Refinity.Finance.FinanceUtility.CalculateSimpleInterest*
  nameWithType.vb: FinanceUtility.CalculateSimpleInterest(Double, Double, Double)
  fullName.vb: Refinity.Finance.FinanceUtility.CalculateSimpleInterest(Double, Double, Double)
  name.vb: CalculateSimpleInterest(Double, Double, Double)
- uid: Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double,System.Collections.Generic.List{System.Double})
  commentId: M:Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double,System.Collections.Generic.List{System.Double})
  id: CalculateNetPresentValue(System.Double,System.Collections.Generic.List{System.Double})
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: CalculateNetPresentValue(double, List<double>)
  nameWithType: FinanceUtility.CalculateNetPresentValue(double, List<double>)
  fullName: Refinity.Finance.FinanceUtility.CalculateNetPresentValue(double, System.Collections.Generic.List<double>)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: CalculateNetPresentValue
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 186
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the net present value (NPV) of a series of cash flows based on a discount rate.
  example: []
  syntax:
    content: public static double CalculateNetPresentValue(double discountRate, List<double> cashFlows)
    parameters:
    - id: discountRate
      type: System.Double
      description: The discount rate.
    - id: cashFlows
      type: System.Collections.Generic.List{System.Double}
      description: The cash flows.
    return:
      type: System.Double
      description: The calculated net present value.
    content.vb: Public Shared Function CalculateNetPresentValue(discountRate As Double, cashFlows As List(Of Double)) As Double
  overload: Refinity.Finance.FinanceUtility.CalculateNetPresentValue*
  nameWithType.vb: FinanceUtility.CalculateNetPresentValue(Double, List(Of Double))
  fullName.vb: Refinity.Finance.FinanceUtility.CalculateNetPresentValue(Double, System.Collections.Generic.List(Of Double))
  name.vb: CalculateNetPresentValue(Double, List(Of Double))
- uid: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(System.Collections.Generic.List{System.Double})
  commentId: M:Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(System.Collections.Generic.List{System.Double})
  id: CalculateInternalRateOfReturn(System.Collections.Generic.List{System.Double})
  parent: Refinity.Finance.FinanceUtility
  langs:
  - csharp
  - vb
  name: CalculateInternalRateOfReturn(List<double>)
  nameWithType: FinanceUtility.CalculateInternalRateOfReturn(List<double>)
  fullName: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(System.Collections.Generic.List<double>)
  type: Method
  source:
    remote:
      path: Refinity/Finance/FinanceUtility.cs
      branch: main
      repo: https://github.com/InfinitySoftware-House/Refinity.git
    id: CalculateInternalRateOfReturn
    path: Refinity/Finance/FinanceUtility.cs
    startLine: 203
  assemblies:
  - Refinity
  namespace: Refinity.Finance
  summary: Calculates the internal rate of return (IRR) of a series of cash flows.
  example: []
  syntax:
    content: public static double CalculateInternalRateOfReturn(List<double> cashFlows)
    parameters:
    - id: cashFlows
      type: System.Collections.Generic.List{System.Double}
      description: The cash flows.
    return:
      type: System.Double
      description: The calculated internal rate of return.
    content.vb: Public Shared Function CalculateInternalRateOfReturn(cashFlows As List(Of Double)) As Double
  overload: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn*
  nameWithType.vb: FinanceUtility.CalculateInternalRateOfReturn(List(Of Double))
  fullName.vb: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(System.Collections.Generic.List(Of Double))
  name.vb: CalculateInternalRateOfReturn(List(Of Double))
references:
- uid: Refinity.Finance
  commentId: N:Refinity.Finance
  href: Refinity.html
  name: Refinity.Finance
  nameWithType: Refinity.Finance
  fullName: Refinity.Finance
  spec.csharp:
  - uid: Refinity
    name: Refinity
    href: Refinity.html
  - name: .
  - uid: Refinity.Finance
    name: Finance
    href: Refinity.Finance.html
  spec.vb:
  - uid: Refinity
    name: Refinity
    href: Refinity.html
  - name: .
  - uid: Refinity.Finance
    name: Finance
    href: Refinity.Finance.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Refinity.Finance.FinanceUtility.DifferencePercentage*
  commentId: Overload:Refinity.Finance.FinanceUtility.DifferencePercentage
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_DifferencePercentage_System_Double_System_Double_
  name: DifferencePercentage
  nameWithType: FinanceUtility.DifferencePercentage
  fullName: Refinity.Finance.FinanceUtility.DifferencePercentage
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Refinity.Finance.FinanceUtility.CalculateInterest*
  commentId: Overload:Refinity.Finance.FinanceUtility.CalculateInterest
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_CalculateInterest_System_Double_System_Double_System_Double_
  name: CalculateInterest
  nameWithType: FinanceUtility.CalculateInterest
  fullName: Refinity.Finance.FinanceUtility.CalculateInterest
- uid: Refinity.Finance.FinanceUtility.ApplyTax*
  commentId: Overload:Refinity.Finance.FinanceUtility.ApplyTax
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_ApplyTax_System_Double_System_Double_
  name: ApplyTax
  nameWithType: FinanceUtility.ApplyTax
  fullName: Refinity.Finance.FinanceUtility.ApplyTax
- uid: Refinity.Finance.FinanceUtility.DaysUntilDue*
  commentId: Overload:Refinity.Finance.FinanceUtility.DaysUntilDue
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_DaysUntilDue_System_DateTime_
  name: DaysUntilDue
  nameWithType: FinanceUtility.DaysUntilDue
  fullName: Refinity.Finance.FinanceUtility.DaysUntilDue
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.datetime
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  nameWithType.vb: Date
  fullName.vb: Date
  name.vb: Date
- uid: Refinity.Finance.FinanceUtility.BreakEvenPoint*
  commentId: Overload:Refinity.Finance.FinanceUtility.BreakEvenPoint
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_BreakEvenPoint_System_Double_System_Double_System_Double_
  name: BreakEvenPoint
  nameWithType: FinanceUtility.BreakEvenPoint
  fullName: Refinity.Finance.FinanceUtility.BreakEvenPoint
- uid: Refinity.Finance.FinanceUtility.CalculateCompoundInterest*
  commentId: Overload:Refinity.Finance.FinanceUtility.CalculateCompoundInterest
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_CalculateCompoundInterest_System_Double_System_Double_System_Double_
  name: CalculateCompoundInterest
  nameWithType: FinanceUtility.CalculateCompoundInterest
  fullName: Refinity.Finance.FinanceUtility.CalculateCompoundInterest
- uid: Refinity.Finance.FinanceUtility.ToCurrency*
  commentId: Overload:Refinity.Finance.FinanceUtility.ToCurrency
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_ToCurrency_System_Double_
  name: ToCurrency
  nameWithType: FinanceUtility.ToCurrency
  fullName: Refinity.Finance.FinanceUtility.ToCurrency
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.Globalization.CultureInfo
  commentId: T:System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.globalization.cultureinfo
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Globalization
    name: Globalization
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.globalization
- uid: Refinity.Finance.FinanceUtility.PredictFutureValue*
  commentId: Overload:Refinity.Finance.FinanceUtility.PredictFutureValue
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_PredictFutureValue_System_Double_System_Double_System_Double_
  name: PredictFutureValue
  nameWithType: FinanceUtility.PredictFutureValue
  fullName: Refinity.Finance.FinanceUtility.PredictFutureValue
- uid: Refinity.Finance.FinanceUtility.PaybackPeriod*
  commentId: Overload:Refinity.Finance.FinanceUtility.PaybackPeriod
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_PaybackPeriod_System_Double_System_Collections_Generic_List_System_Double__
  name: PaybackPeriod
  nameWithType: FinanceUtility.PaybackPeriod
  fullName: Refinity.Finance.FinanceUtility.PaybackPeriod
- uid: System.Collections.Generic.List{System.Double}
  commentId: T:System.Collections.Generic.List{System.Double}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<double>
  nameWithType: List<double>
  fullName: System.Collections.Generic.List<double>
  nameWithType.vb: List(Of Double)
  fullName.vb: System.Collections.Generic.List(Of Double)
  name.vb: List(Of Double)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: System.Double
    name: double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Double
    name: Double
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.double
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Refinity.Finance.FinanceUtility.CalculateSimpleInterest*
  commentId: Overload:Refinity.Finance.FinanceUtility.CalculateSimpleInterest
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_CalculateSimpleInterest_System_Double_System_Double_System_Double_
  name: CalculateSimpleInterest
  nameWithType: FinanceUtility.CalculateSimpleInterest
  fullName: Refinity.Finance.FinanceUtility.CalculateSimpleInterest
- uid: Refinity.Finance.FinanceUtility.CalculateNetPresentValue*
  commentId: Overload:Refinity.Finance.FinanceUtility.CalculateNetPresentValue
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_CalculateNetPresentValue_System_Double_System_Collections_Generic_List_System_Double__
  name: CalculateNetPresentValue
  nameWithType: FinanceUtility.CalculateNetPresentValue
  fullName: Refinity.Finance.FinanceUtility.CalculateNetPresentValue
- uid: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn*
  commentId: Overload:Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn
  href: Refinity.Finance.FinanceUtility.html#Refinity_Finance_FinanceUtility_CalculateInternalRateOfReturn_System_Collections_Generic_List_System_Double__
  name: CalculateInternalRateOfReturn
  nameWithType: FinanceUtility.CalculateInternalRateOfReturn
  fullName: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn
