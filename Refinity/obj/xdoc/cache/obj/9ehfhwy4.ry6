id: Refinity
language: CSharp
name:
  Default: Refinity
qualifiedName:
  Default: Refinity
type: Assembly
modifiers: {}
items:
- id: Refinity
  commentId: N:Refinity
  language: CSharp
  name:
    CSharp: Refinity
    VB: Refinity
  nameWithType:
    CSharp: Refinity
    VB: Refinity
  qualifiedName:
    CSharp: Refinity
    VB: Refinity
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.DateDifference
    commentId: T:Refinity.DateDifference
    language: CSharp
    name:
      CSharp: DateDifference
      VB: DateDifference
    nameWithType:
      CSharp: DateDifference
      VB: DateDifference
    qualifiedName:
      CSharp: Refinity.DateDifference
      VB: Refinity.DateDifference
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity
    source:
      remote:
        path: Refinity/Date/Models/DateDifferenceModel.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: DateDifference
      path: Date/Models/DateDifferenceModel.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public class DateDifference : object'
        VB: >-
          Public Class DateDifference

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.DateDifference.Years
      commentId: P:Refinity.DateDifference.Years
      language: CSharp
      name:
        CSharp: Years
        VB: Years
      nameWithType:
        CSharp: DateDifference.Years
        VB: DateDifference.Years
      qualifiedName:
        CSharp: Refinity.DateDifference.Years
        VB: Refinity.DateDifference.Years
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Date/Models/DateDifferenceModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Years
        path: Date/Models/DateDifferenceModel.cs
        startLine: 4
      syntax:
        content:
          CSharp: public int Years { get; set; }
          VB: Public Property Years As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.DateDifference.Years*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.DateDifference.Months
      commentId: P:Refinity.DateDifference.Months
      language: CSharp
      name:
        CSharp: Months
        VB: Months
      nameWithType:
        CSharp: DateDifference.Months
        VB: DateDifference.Months
      qualifiedName:
        CSharp: Refinity.DateDifference.Months
        VB: Refinity.DateDifference.Months
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Date/Models/DateDifferenceModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Months
        path: Date/Models/DateDifferenceModel.cs
        startLine: 5
      syntax:
        content:
          CSharp: public int Months { get; set; }
          VB: Public Property Months As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.DateDifference.Months*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.DateDifference.Days
      commentId: P:Refinity.DateDifference.Days
      language: CSharp
      name:
        CSharp: Days
        VB: Days
      nameWithType:
        CSharp: DateDifference.Days
        VB: DateDifference.Days
      qualifiedName:
        CSharp: Refinity.DateDifference.Days
        VB: Refinity.DateDifference.Days
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Date/Models/DateDifferenceModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Days
        path: Date/Models/DateDifferenceModel.cs
        startLine: 6
      syntax:
        content:
          CSharp: public int Days { get; set; }
          VB: Public Property Days As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.DateDifference.Days*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.DateDifference.Hours
      commentId: P:Refinity.DateDifference.Hours
      language: CSharp
      name:
        CSharp: Hours
        VB: Hours
      nameWithType:
        CSharp: DateDifference.Hours
        VB: DateDifference.Hours
      qualifiedName:
        CSharp: Refinity.DateDifference.Hours
        VB: Refinity.DateDifference.Hours
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Date/Models/DateDifferenceModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Hours
        path: Date/Models/DateDifferenceModel.cs
        startLine: 7
      syntax:
        content:
          CSharp: public int Hours { get; set; }
          VB: Public Property Hours As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.DateDifference.Hours*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.DateDifference.Minutes
      commentId: P:Refinity.DateDifference.Minutes
      language: CSharp
      name:
        CSharp: Minutes
        VB: Minutes
      nameWithType:
        CSharp: DateDifference.Minutes
        VB: DateDifference.Minutes
      qualifiedName:
        CSharp: Refinity.DateDifference.Minutes
        VB: Refinity.DateDifference.Minutes
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Date/Models/DateDifferenceModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Minutes
        path: Date/Models/DateDifferenceModel.cs
        startLine: 8
      syntax:
        content:
          CSharp: public int Minutes { get; set; }
          VB: Public Property Minutes As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.DateDifference.Minutes*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.DateDifference.Seconds
      commentId: P:Refinity.DateDifference.Seconds
      language: CSharp
      name:
        CSharp: Seconds
        VB: Seconds
      nameWithType:
        CSharp: DateDifference.Seconds
        VB: DateDifference.Seconds
      qualifiedName:
        CSharp: Refinity.DateDifference.Seconds
        VB: Refinity.DateDifference.Seconds
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Date/Models/DateDifferenceModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Seconds
        path: Date/Models/DateDifferenceModel.cs
        startLine: 9
      syntax:
        content:
          CSharp: public int Seconds { get; set; }
          VB: Public Property Seconds As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.DateDifference.Seconds*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Refinity.CoordinateModel
    commentId: T:Refinity.CoordinateModel
    language: CSharp
    name:
      CSharp: CoordinateModel
      VB: CoordinateModel
    nameWithType:
      CSharp: CoordinateModel
      VB: CoordinateModel
    qualifiedName:
      CSharp: Refinity.CoordinateModel
      VB: Refinity.CoordinateModel
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity
    source:
      remote:
        path: Refinity/Geometry/Models/CoordinateModel.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: CoordinateModel
      path: Geometry/Models/CoordinateModel.cs
      startLine: 5
    summary: "\nRepresents a coordinate model with X, Y, and optional Z values.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class CoordinateModel : object'
        VB: >-
          Public Class CoordinateModel

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.CoordinateModel.X
      commentId: P:Refinity.CoordinateModel.X
      language: CSharp
      name:
        CSharp: X
        VB: X
      nameWithType:
        CSharp: CoordinateModel.X
        VB: CoordinateModel.X
      qualifiedName:
        CSharp: Refinity.CoordinateModel.X
        VB: Refinity.CoordinateModel.X
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Geometry/Models/CoordinateModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: X
        path: Geometry/Models/CoordinateModel.cs
        startLine: 10
      summary: "\nGets or sets the X value of the coordinate.\n"
      example: []
      syntax:
        content:
          CSharp: public double X { get; set; }
          VB: Public Property X As Double
        parameters: []
        return:
          type: System.Double
      overload: Refinity.CoordinateModel.X*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.CoordinateModel.Y
      commentId: P:Refinity.CoordinateModel.Y
      language: CSharp
      name:
        CSharp: Y
        VB: Y
      nameWithType:
        CSharp: CoordinateModel.Y
        VB: CoordinateModel.Y
      qualifiedName:
        CSharp: Refinity.CoordinateModel.Y
        VB: Refinity.CoordinateModel.Y
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Geometry/Models/CoordinateModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Y
        path: Geometry/Models/CoordinateModel.cs
        startLine: 15
      summary: "\nGets or sets the Y value of the coordinate.\n"
      example: []
      syntax:
        content:
          CSharp: public double Y { get; set; }
          VB: Public Property Y As Double
        parameters: []
        return:
          type: System.Double
      overload: Refinity.CoordinateModel.Y*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.CoordinateModel.Z
      commentId: P:Refinity.CoordinateModel.Z
      language: CSharp
      name:
        CSharp: Z
        VB: Z
      nameWithType:
        CSharp: CoordinateModel.Z
        VB: CoordinateModel.Z
      qualifiedName:
        CSharp: Refinity.CoordinateModel.Z
        VB: Refinity.CoordinateModel.Z
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity
      source:
        remote:
          path: Refinity/Geometry/Models/CoordinateModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Z
        path: Geometry/Models/CoordinateModel.cs
        startLine: 20
      summary: "\nGets or sets the optional Z value of the coordinate.\n"
      example: []
      syntax:
        content:
          CSharp: public double? Z { get; set; }
          VB: Public Property Z As Double?
        parameters: []
        return:
          type: System.Nullable{System.Double}
      overload: Refinity.CoordinateModel.Z*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Refinity.Benchmark
  commentId: N:Refinity.Benchmark
  language: CSharp
  name:
    CSharp: Refinity.Benchmark
    VB: Refinity.Benchmark
  nameWithType:
    CSharp: Refinity.Benchmark
    VB: Refinity.Benchmark
  qualifiedName:
    CSharp: Refinity.Benchmark
    VB: Refinity.Benchmark
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Benchmark.BenchmarkUtility
    commentId: T:Refinity.Benchmark.BenchmarkUtility
    language: CSharp
    name:
      CSharp: BenchmarkUtility
      VB: BenchmarkUtility
    nameWithType:
      CSharp: BenchmarkUtility
      VB: BenchmarkUtility
    qualifiedName:
      CSharp: Refinity.Benchmark.BenchmarkUtility
      VB: Refinity.Benchmark.BenchmarkUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Benchmark
    source:
      remote:
        path: Refinity/Benchmark/BenchmarkUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: BenchmarkUtility
      path: Benchmark/BenchmarkUtility.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public static class BenchmarkUtility : object'
        VB: >-
          Public Module BenchmarkUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark``1(Func{``0},System.Int32)
      commentId: M:Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark``1(Func{``0},System.Int32)
      language: CSharp
      name:
        CSharp: RunCodeBenchmark<T>(Func<T>, Int32)
        VB: RunCodeBenchmark(Of T)(Func(Of T), Int32)
      nameWithType:
        CSharp: BenchmarkUtility.RunCodeBenchmark<T>(Func<T>, Int32)
        VB: BenchmarkUtility.RunCodeBenchmark(Of T)(Func(Of T), Int32)
      qualifiedName:
        CSharp: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark<T>(Func<T>, System.Int32)
        VB: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark(Of T)(Func(Of T), System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark
      source:
        remote:
          path: Refinity/Benchmark/BenchmarkUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RunCodeBenchmark
        path: Benchmark/BenchmarkUtility.cs
        startLine: 14
      summary: "\nRun a benchmark on a method.\n"
      example: []
      syntax:
        content:
          CSharp: public static BenchmarkModels RunCodeBenchmark<T>(Func<T> testMethod, int iterations = 1)
          VB: Public Shared Function RunCodeBenchmark(Of T)(testMethod As Func(Of T), iterations As Integer = 1) As BenchmarkModels
        parameters:
        - id: testMethod
          type: Func{{T}}
          description: The method to test.
        - id: iterations
          type: System.Int32
          description: The number of iterations to run.
        typeParameters:
        - id: T
          description: The type of the method&apos;s return value.
        return:
          type: Refinity.Benchmark.Models.BenchmarkModels
          description: A BenchmarkModels object containing the benchmark results.
      overload: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark(Action,System.Int32)
      commentId: M:Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark(Action,System.Int32)
      language: CSharp
      name:
        CSharp: RunCodeBenchmark(Action, Int32)
        VB: RunCodeBenchmark(Action, Int32)
      nameWithType:
        CSharp: BenchmarkUtility.RunCodeBenchmark(Action, Int32)
        VB: BenchmarkUtility.RunCodeBenchmark(Action, Int32)
      qualifiedName:
        CSharp: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark(Action, System.Int32)
        VB: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark(Action, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark
      source:
        remote:
          path: Refinity/Benchmark/BenchmarkUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RunCodeBenchmark
        path: Benchmark/BenchmarkUtility.cs
        startLine: 50
      summary: "\nRun a benchmark on an action.\n"
      example: []
      syntax:
        content:
          CSharp: public static BenchmarkModels RunCodeBenchmark(Action testMethod, int iterations = 1)
          VB: Public Shared Function RunCodeBenchmark(testMethod As Action, iterations As Integer = 1) As BenchmarkModels
        parameters:
        - id: testMethod
          type: Action
          description: The method to test.
        - id: iterations
          type: System.Int32
          description: The number of iterations to run.
        return:
          type: Refinity.Benchmark.Models.BenchmarkModels
          description: A BenchmarkModels object containing the benchmark results.
      overload: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Refinity.Benchmark.Enums
  commentId: N:Refinity.Benchmark.Enums
  language: CSharp
  name:
    CSharp: Refinity.Benchmark.Enums
    VB: Refinity.Benchmark.Enums
  nameWithType:
    CSharp: Refinity.Benchmark.Enums
    VB: Refinity.Benchmark.Enums
  qualifiedName:
    CSharp: Refinity.Benchmark.Enums
    VB: Refinity.Benchmark.Enums
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Benchmark.Enums.BenchmarkResult
    commentId: T:Refinity.Benchmark.Enums.BenchmarkResult
    language: CSharp
    name:
      CSharp: BenchmarkResult
      VB: BenchmarkResult
    nameWithType:
      CSharp: BenchmarkResult
      VB: BenchmarkResult
    qualifiedName:
      CSharp: Refinity.Benchmark.Enums.BenchmarkResult
      VB: Refinity.Benchmark.Enums.BenchmarkResult
    type: Enum
    assemblies:
    - Refinity
    namespace: Refinity.Benchmark.Enums
    source:
      remote:
        path: Refinity/Benchmark/Enums/BenchmarkResult.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: BenchmarkResult
      path: Benchmark/Enums/BenchmarkResult.cs
      startLine: 1
    syntax:
      content:
        CSharp: 'public enum BenchmarkResult : int'
        VB: Public Enum BenchmarkResult As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Refinity.Benchmark.Enums.BenchmarkResult.Success
      commentId: F:Refinity.Benchmark.Enums.BenchmarkResult.Success
      language: CSharp
      name:
        CSharp: Success
        VB: Success
      nameWithType:
        CSharp: BenchmarkResult.Success
        VB: BenchmarkResult.Success
      qualifiedName:
        CSharp: Refinity.Benchmark.Enums.BenchmarkResult.Success
        VB: Refinity.Benchmark.Enums.BenchmarkResult.Success
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Enums
      source:
        remote:
          path: Refinity/Benchmark/Enums/BenchmarkResult.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Success
        path: Benchmark/Enums/BenchmarkResult.cs
        startLine: 3
      syntax:
        content:
          CSharp: Success = 0
          VB: Success = 0
        return:
          type: Refinity.Benchmark.Enums.BenchmarkResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Benchmark.Enums.BenchmarkResult.Failure
      commentId: F:Refinity.Benchmark.Enums.BenchmarkResult.Failure
      language: CSharp
      name:
        CSharp: Failure
        VB: Failure
      nameWithType:
        CSharp: BenchmarkResult.Failure
        VB: BenchmarkResult.Failure
      qualifiedName:
        CSharp: Refinity.Benchmark.Enums.BenchmarkResult.Failure
        VB: Refinity.Benchmark.Enums.BenchmarkResult.Failure
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Enums
      source:
        remote:
          path: Refinity/Benchmark/Enums/BenchmarkResult.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Failure
        path: Benchmark/Enums/BenchmarkResult.cs
        startLine: 4
      syntax:
        content:
          CSharp: Failure = 1
          VB: Failure = 1
        return:
          type: Refinity.Benchmark.Enums.BenchmarkResult
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: Refinity.Benchmark.Models
  commentId: N:Refinity.Benchmark.Models
  language: CSharp
  name:
    CSharp: Refinity.Benchmark.Models
    VB: Refinity.Benchmark.Models
  nameWithType:
    CSharp: Refinity.Benchmark.Models
    VB: Refinity.Benchmark.Models
  qualifiedName:
    CSharp: Refinity.Benchmark.Models
    VB: Refinity.Benchmark.Models
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Benchmark.Models.BenchmarkModels
    commentId: T:Refinity.Benchmark.Models.BenchmarkModels
    language: CSharp
    name:
      CSharp: BenchmarkModels
      VB: BenchmarkModels
    nameWithType:
      CSharp: BenchmarkModels
      VB: BenchmarkModels
    qualifiedName:
      CSharp: Refinity.Benchmark.Models.BenchmarkModels
      VB: Refinity.Benchmark.Models.BenchmarkModels
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Benchmark.Models
    source:
      remote:
        path: Refinity/Benchmark/Models/BenchmarkModels.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: BenchmarkModels
      path: Benchmark/Models/BenchmarkModels.cs
      startLine: 4
    syntax:
      content:
        CSharp: 'public class BenchmarkModels : object'
        VB: >-
          Public Class BenchmarkModels

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.Benchmark.Models.BenchmarkModels.#ctor
      commentId: M:Refinity.Benchmark.Models.BenchmarkModels.#ctor
      language: CSharp
      name:
        CSharp: BenchmarkModels()
        VB: BenchmarkModels()
      nameWithType:
        CSharp: BenchmarkModels.BenchmarkModels()
        VB: BenchmarkModels.BenchmarkModels()
      qualifiedName:
        CSharp: Refinity.Benchmark.Models.BenchmarkModels.BenchmarkModels()
        VB: Refinity.Benchmark.Models.BenchmarkModels.BenchmarkModels()
      type: Constructor
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Models
      source:
        remote:
          path: Refinity/Benchmark/Models/BenchmarkModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: .ctor
        path: Benchmark/Models/BenchmarkModels.cs
        startLine: 6
      syntax:
        content:
          CSharp: public BenchmarkModels()
          VB: Public Sub New
      overload: Refinity.Benchmark.Models.BenchmarkModels.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Benchmark.Models.BenchmarkModels.Result
      commentId: P:Refinity.Benchmark.Models.BenchmarkModels.Result
      language: CSharp
      name:
        CSharp: Result
        VB: Result
      nameWithType:
        CSharp: BenchmarkModels.Result
        VB: BenchmarkModels.Result
      qualifiedName:
        CSharp: Refinity.Benchmark.Models.BenchmarkModels.Result
        VB: Refinity.Benchmark.Models.BenchmarkModels.Result
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Models
      source:
        remote:
          path: Refinity/Benchmark/Models/BenchmarkModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Result
        path: Benchmark/Models/BenchmarkModels.cs
        startLine: 12
      syntax:
        content:
          CSharp: public BenchmarkResult Result { get; set; }
          VB: Public Property Result As BenchmarkResult
        parameters: []
        return:
          type: Refinity.Benchmark.Enums.BenchmarkResult
      overload: Refinity.Benchmark.Models.BenchmarkModels.Result*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Benchmark.Models.BenchmarkModels.Method
      commentId: P:Refinity.Benchmark.Models.BenchmarkModels.Method
      language: CSharp
      name:
        CSharp: Method
        VB: Method
      nameWithType:
        CSharp: BenchmarkModels.Method
        VB: BenchmarkModels.Method
      qualifiedName:
        CSharp: Refinity.Benchmark.Models.BenchmarkModels.Method
        VB: Refinity.Benchmark.Models.BenchmarkModels.Method
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Models
      source:
        remote:
          path: Refinity/Benchmark/Models/BenchmarkModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Method
        path: Benchmark/Models/BenchmarkModels.cs
        startLine: 13
      syntax:
        content:
          CSharp: public string Method { get; set; }
          VB: Public Property Method As String
        parameters: []
        return:
          type: System.String
      overload: Refinity.Benchmark.Models.BenchmarkModels.Method*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
      commentId: P:Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
      language: CSharp
      name:
        CSharp: ElapsedTimeMs
        VB: ElapsedTimeMs
      nameWithType:
        CSharp: BenchmarkModels.ElapsedTimeMs
        VB: BenchmarkModels.ElapsedTimeMs
      qualifiedName:
        CSharp: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
        VB: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Models
      source:
        remote:
          path: Refinity/Benchmark/Models/BenchmarkModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ElapsedTimeMs
        path: Benchmark/Models/BenchmarkModels.cs
        startLine: 14
      syntax:
        content:
          CSharp: public double ElapsedTimeMs { get; set; }
          VB: Public Property ElapsedTimeMs As Double
        parameters: []
        return:
          type: System.Double
      overload: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Benchmark.Models.BenchmarkModels.Exception
      commentId: P:Refinity.Benchmark.Models.BenchmarkModels.Exception
      language: CSharp
      name:
        CSharp: Exception
        VB: Exception
      nameWithType:
        CSharp: BenchmarkModels.Exception
        VB: BenchmarkModels.Exception
      qualifiedName:
        CSharp: Refinity.Benchmark.Models.BenchmarkModels.Exception
        VB: Refinity.Benchmark.Models.BenchmarkModels.Exception
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Models
      source:
        remote:
          path: Refinity/Benchmark/Models/BenchmarkModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Exception
        path: Benchmark/Models/BenchmarkModels.cs
        startLine: 15
      syntax:
        content:
          CSharp: public Exception? Exception { get; set; }
          VB: Public Property Exception As Exception?
        parameters: []
        return:
          type: System.Nullable{Exception}
      overload: Refinity.Benchmark.Models.BenchmarkModels.Exception*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Benchmark.Models.BenchmarkModels.Iterations
      commentId: P:Refinity.Benchmark.Models.BenchmarkModels.Iterations
      language: CSharp
      name:
        CSharp: Iterations
        VB: Iterations
      nameWithType:
        CSharp: BenchmarkModels.Iterations
        VB: BenchmarkModels.Iterations
      qualifiedName:
        CSharp: Refinity.Benchmark.Models.BenchmarkModels.Iterations
        VB: Refinity.Benchmark.Models.BenchmarkModels.Iterations
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Benchmark.Models
      source:
        remote:
          path: Refinity/Benchmark/Models/BenchmarkModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Iterations
        path: Benchmark/Models/BenchmarkModels.cs
        startLine: 16
      syntax:
        content:
          CSharp: public int Iterations { get; set; }
          VB: Public Property Iterations As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.Benchmark.Models.BenchmarkModels.Iterations*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Refinity.Conversion
  commentId: N:Refinity.Conversion
  language: CSharp
  name:
    CSharp: Refinity.Conversion
    VB: Refinity.Conversion
  nameWithType:
    CSharp: Refinity.Conversion
    VB: Refinity.Conversion
  qualifiedName:
    CSharp: Refinity.Conversion
    VB: Refinity.Conversion
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Conversion.LogEntry
    commentId: T:Refinity.Conversion.LogEntry
    language: CSharp
    name:
      CSharp: LogEntry
      VB: LogEntry
    nameWithType:
      CSharp: LogEntry
      VB: LogEntry
    qualifiedName:
      CSharp: Refinity.Conversion.LogEntry
      VB: Refinity.Conversion.LogEntry
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Conversion
    source:
      remote:
        path: Refinity/Conversion/ConvertUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: LogEntry
      path: Conversion/ConvertUtility.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class LogEntry : object'
        VB: >-
          Public Class LogEntry

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.Conversion.LogEntry.Time
      commentId: P:Refinity.Conversion.LogEntry.Time
      language: CSharp
      name:
        CSharp: Time
        VB: Time
      nameWithType:
        CSharp: LogEntry.Time
        VB: LogEntry.Time
      qualifiedName:
        CSharp: Refinity.Conversion.LogEntry.Time
        VB: Refinity.Conversion.LogEntry.Time
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Time
        path: Conversion/ConvertUtility.cs
        startLine: 10
      syntax:
        content:
          CSharp: public DateTime Time { get; set; }
          VB: Public Property Time As DateTime
        parameters: []
        return:
          type: DateTime
      overload: Refinity.Conversion.LogEntry.Time*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Conversion.LogEntry.LogLevel
      commentId: P:Refinity.Conversion.LogEntry.LogLevel
      language: CSharp
      name:
        CSharp: LogLevel
        VB: LogLevel
      nameWithType:
        CSharp: LogEntry.LogLevel
        VB: LogEntry.LogLevel
      qualifiedName:
        CSharp: Refinity.Conversion.LogEntry.LogLevel
        VB: Refinity.Conversion.LogEntry.LogLevel
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: LogLevel
        path: Conversion/ConvertUtility.cs
        startLine: 11
      syntax:
        content:
          CSharp: public string? LogLevel { get; set; }
          VB: Public Property LogLevel As String?
        parameters: []
        return:
          type: System.Nullable{System.String}
      overload: Refinity.Conversion.LogEntry.LogLevel*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Conversion.LogEntry.Message
      commentId: P:Refinity.Conversion.LogEntry.Message
      language: CSharp
      name:
        CSharp: Message
        VB: Message
      nameWithType:
        CSharp: LogEntry.Message
        VB: LogEntry.Message
      qualifiedName:
        CSharp: Refinity.Conversion.LogEntry.Message
        VB: Refinity.Conversion.LogEntry.Message
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Message
        path: Conversion/ConvertUtility.cs
        startLine: 12
      syntax:
        content:
          CSharp: public string? Message { get; set; }
          VB: Public Property Message As String?
        parameters: []
        return:
          type: System.Nullable{System.String}
      overload: Refinity.Conversion.LogEntry.Message*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Conversion.LogEntry.Severity
      commentId: P:Refinity.Conversion.LogEntry.Severity
      language: CSharp
      name:
        CSharp: Severity
        VB: Severity
      nameWithType:
        CSharp: LogEntry.Severity
        VB: LogEntry.Severity
      qualifiedName:
        CSharp: Refinity.Conversion.LogEntry.Severity
        VB: Refinity.Conversion.LogEntry.Severity
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Severity
        path: Conversion/ConvertUtility.cs
        startLine: 13
      syntax:
        content:
          CSharp: public int Severity { get; set; }
          VB: Public Property Severity As Integer
        parameters: []
        return:
          type: System.Int32
      overload: Refinity.Conversion.LogEntry.Severity*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
  - id: Refinity.Conversion.ConvertUtility
    commentId: T:Refinity.Conversion.ConvertUtility
    language: CSharp
    name:
      CSharp: ConvertUtility
      VB: ConvertUtility
    nameWithType:
      CSharp: ConvertUtility
      VB: ConvertUtility
    qualifiedName:
      CSharp: Refinity.Conversion.ConvertUtility
      VB: Refinity.Conversion.ConvertUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Conversion
    source:
      remote:
        path: Refinity/Conversion/ConvertUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: ConvertUtility
      path: Conversion/ConvertUtility.cs
      startLine: 15
    syntax:
      content:
        CSharp: 'public static class ConvertUtility : object'
        VB: >-
          Public Module ConvertUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Refinity.Conversion.ConvertUtility.ConvertToBase64(System.String)
      commentId: M:Refinity.Conversion.ConvertUtility.ConvertToBase64(System.String)
      language: CSharp
      name:
        CSharp: ConvertToBase64(String)
        VB: ConvertToBase64(String)
      nameWithType:
        CSharp: ConvertUtility.ConvertToBase64(String)
        VB: ConvertUtility.ConvertToBase64(String)
      qualifiedName:
        CSharp: Refinity.Conversion.ConvertUtility.ConvertToBase64(System.String)
        VB: Refinity.Conversion.ConvertUtility.ConvertToBase64(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertToBase64
        path: Conversion/ConvertUtility.cs
        startLine: 22
      summary: "\nConverts a file to a Base64 string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ConvertToBase64(string path)
          VB: Public Shared Function ConvertToBase64(path As String) As String
        parameters:
        - id: path
          type: System.String
          description: The path of the file to convert.
        return:
          type: System.String
          description: The Base64 string representation of the file.
      overload: Refinity.Conversion.ConvertUtility.ConvertToBase64*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Conversion.ConvertUtility.ConvertCsvToObject``1(Stream,System.Char,System.Boolean)
      commentId: M:Refinity.Conversion.ConvertUtility.ConvertCsvToObject``1(Stream,System.Char,System.Boolean)
      language: CSharp
      name:
        CSharp: ConvertCsvToObject<T>(Stream, Char, Boolean)
        VB: ConvertCsvToObject(Of T)(Stream, Char, Boolean)
      nameWithType:
        CSharp: ConvertUtility.ConvertCsvToObject<T>(Stream, Char, Boolean)
        VB: ConvertUtility.ConvertCsvToObject(Of T)(Stream, Char, Boolean)
      qualifiedName:
        CSharp: Refinity.Conversion.ConvertUtility.ConvertCsvToObject<T>(Stream, System.Char, System.Boolean)
        VB: Refinity.Conversion.ConvertUtility.ConvertCsvToObject(Of T)(Stream, System.Char, System.Boolean)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertCsvToObject
        path: Conversion/ConvertUtility.cs
        startLine: 36
      summary: "\nConverts a CSV file to a list of objects of type T.\n"
      example: []
      syntax:
        content:
          CSharp: public static List<T> ConvertCsvToObject<T>(Stream stream, char delimiter = ',', bool ignoreCaseHeader = false)
          VB: Public Shared Function ConvertCsvToObject(Of T)(stream As Stream, delimiter As Char = ","c, ignoreCaseHeader As Boolean = False) As List(Of T)
        parameters:
        - id: stream
          type: Stream
          description: The stream containing the CSV data.
        - id: delimiter
          type: System.Char
          description: The delimiter used to separate values in the CSV file. Default is &apos;,&apos;.
        - id: ignoreCaseHeader
          type: System.Boolean
          description: If true, the header is case insensitive. Default is false.
        typeParameters:
        - id: T
          description: The type of objects to convert to.
        return:
          type: List{{T}}
          description: A list of objects of type T.
      overload: Refinity.Conversion.ConvertUtility.ConvertCsvToObject*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable(System.String,System.Char)
      commentId: M:Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable(System.String,System.Char)
      language: CSharp
      name:
        CSharp: ConvertCsvToDataTable(String, Char)
        VB: ConvertCsvToDataTable(String, Char)
      nameWithType:
        CSharp: ConvertUtility.ConvertCsvToDataTable(String, Char)
        VB: ConvertUtility.ConvertCsvToDataTable(String, Char)
      qualifiedName:
        CSharp: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable(System.String, System.Char)
        VB: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable(System.String, System.Char)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertCsvToDataTable
        path: Conversion/ConvertUtility.cs
        startLine: 102
      summary: "\nConverts a CSV file to a DataTable.\n"
      example: []
      syntax:
        content:
          CSharp: public static DataTable ConvertCsvToDataTable(string path, char delimiter = ',')
          VB: Public Shared Function ConvertCsvToDataTable(path As String, delimiter As Char = ","c) As DataTable
        parameters:
        - id: path
          type: System.String
          description: The path of the CSV file.
        - id: delimiter
          type: System.Char
          description: The delimiter used in the CSV file. Default is &apos;,&apos;.
        return:
          type: DataTable
          description: A DataTable containing the data from the CSV file.
      overload: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Conversion.ConvertUtility.ConvertTextToCSV(System.String,System.Char,System.Char,System.String[])
      commentId: M:Refinity.Conversion.ConvertUtility.ConvertTextToCSV(System.String,System.Char,System.Char,System.String[])
      language: CSharp
      name:
        CSharp: ConvertTextToCSV(String, Char, Char, String[])
        VB: ConvertTextToCSV(String, Char, Char, String())
      nameWithType:
        CSharp: ConvertUtility.ConvertTextToCSV(String, Char, Char, String[])
        VB: ConvertUtility.ConvertTextToCSV(String, Char, Char, String())
      qualifiedName:
        CSharp: Refinity.Conversion.ConvertUtility.ConvertTextToCSV(System.String, System.Char, System.Char, System.String[])
        VB: Refinity.Conversion.ConvertUtility.ConvertTextToCSV(System.String, System.Char, System.Char, System.String())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Conversion
      source:
        remote:
          path: Refinity/Conversion/ConvertUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertTextToCSV
        path: Conversion/ConvertUtility.cs
        startLine: 153
      summary: "\nConverts a text file to a CSV file.\n"
      example: []
      syntax:
        content:
          CSharp: public static byte[] ConvertTextToCSV(string pathToTxt, char delimiter = ',', char saveDelimiter = ',', string[] headers = null)
          VB: Public Shared Function ConvertTextToCSV(pathToTxt As String, delimiter As Char = ","c, saveDelimiter As Char = ","c, headers As String() = Nothing) As Byte()
        parameters:
        - id: pathToTxt
          type: System.String
          description: The path to the input text file.
        - id: delimiter
          type: System.Char
          description: The character used to separate values in the text file. Default is &apos;,&apos;.
        - id: saveDelimiter
          type: System.Char
          description: The character used to separate values in the CSV file. Default is &apos;,&apos;.
        - id: headers
          type: System.String[]
        return:
          type: System.Byte[]
          description: True if the conversion is successful, false otherwise.
      overload: Refinity.Conversion.ConvertUtility.ConvertTextToCSV*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Refinity.Date
  commentId: N:Refinity.Date
  language: CSharp
  name:
    CSharp: Refinity.Date
    VB: Refinity.Date
  nameWithType:
    CSharp: Refinity.Date
    VB: Refinity.Date
  qualifiedName:
    CSharp: Refinity.Date
    VB: Refinity.Date
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Date.DateUtility
    commentId: T:Refinity.Date.DateUtility
    language: CSharp
    name:
      CSharp: DateUtility
      VB: DateUtility
    nameWithType:
      CSharp: DateUtility
      VB: DateUtility
    qualifiedName:
      CSharp: Refinity.Date.DateUtility
      VB: Refinity.Date.DateUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Date
    source:
      remote:
        path: Refinity/Date/DateUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: DateUtility
      path: Date/DateUtility.cs
      startLine: 4
    syntax:
      content:
        CSharp: 'public static class DateUtility : object'
        VB: >-
          Public Module DateUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.Add(DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Refinity.Date.DateUtility.Add(DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Add(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
        VB: Add(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: DateUtility.Add(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
        VB: DateUtility.Add(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.Add(DateTime, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
        VB: Refinity.Date.DateUtility.Add(DateTime, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Add
        path: Date/DateUtility.cs
        startLine: 18
      summary: "\nAdds a specified number of years, months, days, hours, minutes, and seconds to the given DateTime value.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime Add(this DateTime value, int years = 0, int months = 0, int days = 0, int hours = 0, int minutes = 0, int seconds = 0)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Add(value As DateTime, years As Integer = 0, months As Integer = 0, days As Integer = 0, hours As Integer = 0, minutes As Integer = 0, seconds As Integer = 0) As DateTime
        parameters:
        - id: value
          type: DateTime
          description: The DateTime value to which the specified time interval should be added.
        - id: years
          type: System.Int32
          description: The number of years to add. The default value is 0.
        - id: months
          type: System.Int32
          description: The number of months to add. The default value is 0.
        - id: days
          type: System.Int32
          description: The number of days to add. The default value is 0.
        - id: hours
          type: System.Int32
          description: The number of hours to add. The default value is 0.
        - id: minutes
          type: System.Int32
          description: The number of minutes to add. The default value is 0.
        - id: seconds
          type: System.Int32
          description: The number of seconds to add. The default value is 0.
        return:
          type: DateTime
          description: A new DateTime value that is the result of adding the specified time interval to the original DateTime value.
      overload: Refinity.Date.DateUtility.Add*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.CalculateAge(DateTime)
      commentId: M:Refinity.Date.DateUtility.CalculateAge(DateTime)
      language: CSharp
      name:
        CSharp: CalculateAge(DateTime)
        VB: CalculateAge(DateTime)
      nameWithType:
        CSharp: DateUtility.CalculateAge(DateTime)
        VB: DateUtility.CalculateAge(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.CalculateAge(DateTime)
        VB: Refinity.Date.DateUtility.CalculateAge(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateAge
        path: Date/DateUtility.cs
        startLine: 28
      summary: "\nCalculates the age based on the provided birth date.\n"
      example: []
      syntax:
        content:
          CSharp: public static int CalculateAge(this DateTime birthDate)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function CalculateAge(birthDate As DateTime) As Integer
        parameters:
        - id: birthDate
          type: DateTime
          description: The birth date.
        return:
          type: System.Int32
          description: The calculated age.
      overload: Refinity.Date.DateUtility.CalculateAge*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.DeserializeDateTime(System.String)
      commentId: M:Refinity.Date.DateUtility.DeserializeDateTime(System.String)
      language: CSharp
      name:
        CSharp: DeserializeDateTime(String)
        VB: DeserializeDateTime(String)
      nameWithType:
        CSharp: DateUtility.DeserializeDateTime(String)
        VB: DateUtility.DeserializeDateTime(String)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.DeserializeDateTime(System.String)
        VB: Refinity.Date.DateUtility.DeserializeDateTime(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DeserializeDateTime
        path: Date/DateUtility.cs
        startLine: 45
      summary: "\nDeserializes a string representation of a DateTime object.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime DeserializeDateTime(this string dateTimeString)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DeserializeDateTime(dateTimeString As String) As DateTime
        parameters:
        - id: dateTimeString
          type: System.String
          description: The string representation of the DateTime object.
        return:
          type: DateTime
          description: The deserialized DateTime object.
      overload: Refinity.Date.DateUtility.DeserializeDateTime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.FirstDayOfMonth(DateTime)
      commentId: M:Refinity.Date.DateUtility.FirstDayOfMonth(DateTime)
      language: CSharp
      name:
        CSharp: FirstDayOfMonth(DateTime)
        VB: FirstDayOfMonth(DateTime)
      nameWithType:
        CSharp: DateUtility.FirstDayOfMonth(DateTime)
        VB: DateUtility.FirstDayOfMonth(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.FirstDayOfMonth(DateTime)
        VB: Refinity.Date.DateUtility.FirstDayOfMonth(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: FirstDayOfMonth
        path: Date/DateUtility.cs
        startLine: 69
      summary: "\nReturns the first day of the month for the specified DateTime value.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime FirstDayOfMonth(this DateTime value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function FirstDayOfMonth(value As DateTime) As DateTime
        parameters:
        - id: value
          type: DateTime
          description: The DateTime value.
        return:
          type: DateTime
          description: The first day of the month.
      overload: Refinity.Date.DateUtility.FirstDayOfMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.GetDateRange(DateTime,System.Int32,System.Boolean)
      commentId: M:Refinity.Date.DateUtility.GetDateRange(DateTime,System.Int32,System.Boolean)
      language: CSharp
      name:
        CSharp: GetDateRange(DateTime, Int32, Boolean)
        VB: GetDateRange(DateTime, Int32, Boolean)
      nameWithType:
        CSharp: DateUtility.GetDateRange(DateTime, Int32, Boolean)
        VB: DateUtility.GetDateRange(DateTime, Int32, Boolean)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.GetDateRange(DateTime, System.Int32, System.Boolean)
        VB: Refinity.Date.DateUtility.GetDateRange(DateTime, System.Int32, System.Boolean)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetDateRange
        path: Date/DateUtility.cs
        startLine: 74
      syntax:
        content:
          CSharp: public static DateRangeModel GetDateRange(this DateTime startDate, int numberOfMonths, bool startToFirst = false)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetDateRange(startDate As DateTime, numberOfMonths As Integer, startToFirst As Boolean = False) As DateRangeModel
        parameters:
        - id: startDate
          type: DateTime
        - id: numberOfMonths
          type: System.Int32
        - id: startToFirst
          type: System.Boolean
        return:
          type: DateRangeModel
      overload: Refinity.Date.DateUtility.GetDateRange*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.GetWeekNumber(DateTime)
      commentId: M:Refinity.Date.DateUtility.GetWeekNumber(DateTime)
      language: CSharp
      name:
        CSharp: GetWeekNumber(DateTime)
        VB: GetWeekNumber(DateTime)
      nameWithType:
        CSharp: DateUtility.GetWeekNumber(DateTime)
        VB: DateUtility.GetWeekNumber(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.GetWeekNumber(DateTime)
        VB: Refinity.Date.DateUtility.GetWeekNumber(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetWeekNumber
        path: Date/DateUtility.cs
        startLine: 107
      summary: "\nGets the week number of the specified date.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GetWeekNumber(this DateTime value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetWeekNumber(value As DateTime) As Integer
        parameters:
        - id: value
          type: DateTime
          description: The date value.
        return:
          type: System.Int32
          description: The week number of the specified date.
      overload: Refinity.Date.DateUtility.GetWeekNumber*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber(System.Int32)
      commentId: M:Refinity.Date.DateUtility.GetDateRangeFromWeekNumber(System.Int32)
      language: CSharp
      name:
        CSharp: GetDateRangeFromWeekNumber(Int32)
        VB: GetDateRangeFromWeekNumber(Int32)
      nameWithType:
        CSharp: DateUtility.GetDateRangeFromWeekNumber(Int32)
        VB: DateUtility.GetDateRangeFromWeekNumber(Int32)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber(System.Int32)
        VB: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetDateRangeFromWeekNumber
        path: Date/DateUtility.cs
        startLine: 117
      summary: "\nGets the date range (start and end dates) for a given week number.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime[] GetDateRangeFromWeekNumber(int weekNumber)
          VB: Public Shared Function GetDateRangeFromWeekNumber(weekNumber As Integer) As DateTime()
        parameters:
        - id: weekNumber
          type: System.Int32
          description: The week number.
        return:
          type: DateTime[]
          description: An array of DateTime objects representing the start and end dates of the week.
      overload: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.GetDifference(DateTime,DateTime)
      commentId: M:Refinity.Date.DateUtility.GetDifference(DateTime,DateTime)
      language: CSharp
      name:
        CSharp: GetDifference(DateTime, DateTime)
        VB: GetDifference(DateTime, DateTime)
      nameWithType:
        CSharp: DateUtility.GetDifference(DateTime, DateTime)
        VB: DateUtility.GetDifference(DateTime, DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.GetDifference(DateTime, DateTime)
        VB: Refinity.Date.DateUtility.GetDifference(DateTime, DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetDifference
        path: Date/DateUtility.cs
        startLine: 130
      syntax:
        content:
          CSharp: public static DateDifference GetDifference(this DateTime from, DateTime to)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetDifference(from As DateTime, to As DateTime) As DateDifference
        parameters:
        - id: from
          type: DateTime
        - id: to
          type: DateTime
        return:
          type: Refinity.DateDifference
      overload: Refinity.Date.DateUtility.GetDifference*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.LastDayOfMonth(DateTime)
      commentId: M:Refinity.Date.DateUtility.LastDayOfMonth(DateTime)
      language: CSharp
      name:
        CSharp: LastDayOfMonth(DateTime)
        VB: LastDayOfMonth(DateTime)
      nameWithType:
        CSharp: DateUtility.LastDayOfMonth(DateTime)
        VB: DateUtility.LastDayOfMonth(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.LastDayOfMonth(DateTime)
        VB: Refinity.Date.DateUtility.LastDayOfMonth(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: LastDayOfMonth
        path: Date/DateUtility.cs
        startLine: 151
      summary: "\nReturns the last day of the month for the specified DateTime value.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime LastDayOfMonth(this DateTime value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function LastDayOfMonth(value As DateTime) As DateTime
        parameters:
        - id: value
          type: DateTime
          description: The DateTime value.
        return:
          type: DateTime
          description: The last day of the month.
      overload: Refinity.Date.DateUtility.LastDayOfMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.QuarterlyFromMonth(DateTime)
      commentId: M:Refinity.Date.DateUtility.QuarterlyFromMonth(DateTime)
      language: CSharp
      name:
        CSharp: QuarterlyFromMonth(DateTime)
        VB: QuarterlyFromMonth(DateTime)
      nameWithType:
        CSharp: DateUtility.QuarterlyFromMonth(DateTime)
        VB: DateUtility.QuarterlyFromMonth(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.QuarterlyFromMonth(DateTime)
        VB: Refinity.Date.DateUtility.QuarterlyFromMonth(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: QuarterlyFromMonth
        path: Date/DateUtility.cs
        startLine: 161
      summary: "\nCalculates the quarterly value from the given month.\n"
      example: []
      syntax:
        content:
          CSharp: public static int QuarterlyFromMonth(this DateTime value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function QuarterlyFromMonth(value As DateTime) As Integer
        parameters:
        - id: value
          type: DateTime
          description: The month value.
        return:
          type: System.Int32
          description: The quarterly value.
      overload: Refinity.Date.DateUtility.QuarterlyFromMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Date.DateUtility.QuarterlyFromMonth(Months)
      commentId: M:Refinity.Date.DateUtility.QuarterlyFromMonth(Months)
      language: CSharp
      name:
        CSharp: QuarterlyFromMonth(Months)
        VB: QuarterlyFromMonth(Months)
      nameWithType:
        CSharp: DateUtility.QuarterlyFromMonth(Months)
        VB: DateUtility.QuarterlyFromMonth(Months)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.QuarterlyFromMonth(Months)
        VB: Refinity.Date.DateUtility.QuarterlyFromMonth(Months)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: QuarterlyFromMonth
        path: Date/DateUtility.cs
        startLine: 171
      summary: "\nCalculates the quarterly value from a given month.\n"
      example: []
      syntax:
        content:
          CSharp: public static int QuarterlyFromMonth(Months value)
          VB: Public Shared Function QuarterlyFromMonth(value As Months) As Integer
        parameters:
        - id: value
          type: Months
          description: The month value.
        return:
          type: System.Int32
          description: The quarterly value.
      overload: Refinity.Date.DateUtility.QuarterlyFromMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.QuarterlyFromMonth(System.Int32)
      commentId: M:Refinity.Date.DateUtility.QuarterlyFromMonth(System.Int32)
      language: CSharp
      name:
        CSharp: QuarterlyFromMonth(Int32)
        VB: QuarterlyFromMonth(Int32)
      nameWithType:
        CSharp: DateUtility.QuarterlyFromMonth(Int32)
        VB: DateUtility.QuarterlyFromMonth(Int32)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.QuarterlyFromMonth(System.Int32)
        VB: Refinity.Date.DateUtility.QuarterlyFromMonth(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: QuarterlyFromMonth
        path: Date/DateUtility.cs
        startLine: 181
      summary: "\nCalculates the quarterly value from a given month.\n"
      example: []
      syntax:
        content:
          CSharp: public static int QuarterlyFromMonth(this int value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function QuarterlyFromMonth(value As Integer) As Integer
        parameters:
        - id: value
          type: System.Int32
          description: The month value.
        return:
          type: System.Int32
          description: The quarterly value.
      overload: Refinity.Date.DateUtility.QuarterlyFromMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.QuarterFromMonth(DateTime)
      commentId: M:Refinity.Date.DateUtility.QuarterFromMonth(DateTime)
      language: CSharp
      name:
        CSharp: QuarterFromMonth(DateTime)
        VB: QuarterFromMonth(DateTime)
      nameWithType:
        CSharp: DateUtility.QuarterFromMonth(DateTime)
        VB: DateUtility.QuarterFromMonth(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.QuarterFromMonth(DateTime)
        VB: Refinity.Date.DateUtility.QuarterFromMonth(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: QuarterFromMonth
        path: Date/DateUtility.cs
        startLine: 195
      summary: "\nCalculates the quarter from the given month.\n"
      example: []
      syntax:
        content:
          CSharp: public static int QuarterFromMonth(this DateTime value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function QuarterFromMonth(value As DateTime) As Integer
        parameters:
        - id: value
          type: DateTime
          description: The month value.
        return:
          type: System.Int32
          description: The quarter corresponding to the given month.
      overload: Refinity.Date.DateUtility.QuarterFromMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Date.DateUtility.QuarterFromMonth(Months)
      commentId: M:Refinity.Date.DateUtility.QuarterFromMonth(Months)
      language: CSharp
      name:
        CSharp: QuarterFromMonth(Months)
        VB: QuarterFromMonth(Months)
      nameWithType:
        CSharp: DateUtility.QuarterFromMonth(Months)
        VB: DateUtility.QuarterFromMonth(Months)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.QuarterFromMonth(Months)
        VB: Refinity.Date.DateUtility.QuarterFromMonth(Months)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: QuarterFromMonth
        path: Date/DateUtility.cs
        startLine: 205
      summary: "\nCalculates the quarter from a given month.\n"
      example: []
      syntax:
        content:
          CSharp: public static int QuarterFromMonth(Months value)
          VB: Public Shared Function QuarterFromMonth(value As Months) As Integer
        parameters:
        - id: value
          type: Months
          description: The month value.
        return:
          type: System.Int32
          description: The quarter corresponding to the given month.
      overload: Refinity.Date.DateUtility.QuarterFromMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.QuarterFromMonth(System.Int32)
      commentId: M:Refinity.Date.DateUtility.QuarterFromMonth(System.Int32)
      language: CSharp
      name:
        CSharp: QuarterFromMonth(Int32)
        VB: QuarterFromMonth(Int32)
      nameWithType:
        CSharp: DateUtility.QuarterFromMonth(Int32)
        VB: DateUtility.QuarterFromMonth(Int32)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.QuarterFromMonth(System.Int32)
        VB: Refinity.Date.DateUtility.QuarterFromMonth(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: QuarterFromMonth
        path: Date/DateUtility.cs
        startLine: 215
      summary: "\nCalculates the quarter from a given month value.\n"
      example: []
      syntax:
        content:
          CSharp: public static int QuarterFromMonth(this int value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function QuarterFromMonth(value As Integer) As Integer
        parameters:
        - id: value
          type: System.Int32
          description: The month value.
        return:
          type: System.Int32
          description: The quarter corresponding to the month value.
      overload: Refinity.Date.DateUtility.QuarterFromMonth*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.Subtract(DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      commentId: M:Refinity.Date.DateUtility.Subtract(DateTime,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: Subtract(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
        VB: Subtract(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
      nameWithType:
        CSharp: DateUtility.Subtract(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
        VB: DateUtility.Subtract(DateTime, Int32, Int32, Int32, Int32, Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.Subtract(DateTime, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
        VB: Refinity.Date.DateUtility.Subtract(DateTime, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Subtract
        path: Date/DateUtility.cs
        startLine: 235
      summary: "\nSubtracts a specified number of years, months, days, hours, minutes, and seconds from the given DateTime value.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime Subtract(this DateTime value, int years = 0, int months = 0, int days = 0, int hours = 0, int minutes = 0, int seconds = 0)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Subtract(value As DateTime, years As Integer = 0, months As Integer = 0, days As Integer = 0, hours As Integer = 0, minutes As Integer = 0, seconds As Integer = 0) As DateTime
        parameters:
        - id: value
          type: DateTime
          description: The DateTime value to subtract from.
        - id: years
          type: System.Int32
          description: The number of years to subtract. Default is 0.
        - id: months
          type: System.Int32
          description: The number of months to subtract. Default is 0.
        - id: days
          type: System.Int32
          description: The number of days to subtract. Default is 0.
        - id: hours
          type: System.Int32
          description: The number of hours to subtract. Default is 0.
        - id: minutes
          type: System.Int32
          description: The number of minutes to subtract. Default is 0.
        - id: seconds
          type: System.Int32
          description: The number of seconds to subtract. Default is 0.
        return:
          type: DateTime
          description: A new DateTime value that is the result of subtracting the specified years, months, days, hours, minutes, and seconds from the given DateTime value.
      overload: Refinity.Date.DateUtility.Subtract*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.SerializeDateTime(DateTime)
      commentId: M:Refinity.Date.DateUtility.SerializeDateTime(DateTime)
      language: CSharp
      name:
        CSharp: SerializeDateTime(DateTime)
        VB: SerializeDateTime(DateTime)
      nameWithType:
        CSharp: DateUtility.SerializeDateTime(DateTime)
        VB: DateUtility.SerializeDateTime(DateTime)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.SerializeDateTime(DateTime)
        VB: Refinity.Date.DateUtility.SerializeDateTime(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: SerializeDateTime
        path: Date/DateUtility.cs
        startLine: 245
      summary: "\nSerializes a DateTime object into a JSON string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string SerializeDateTime(this DateTime dateTime)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function SerializeDateTime(dateTime As DateTime) As String
        parameters:
        - id: dateTime
          type: DateTime
          description: The DateTime object to be serialized.
        return:
          type: System.String
          description: A JSON string representation of the DateTime object.
      overload: Refinity.Date.DateUtility.SerializeDateTime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Date.DateUtility.ToDateTime(System.String)
      commentId: M:Refinity.Date.DateUtility.ToDateTime(System.String)
      language: CSharp
      name:
        CSharp: ToDateTime(String)
        VB: ToDateTime(String)
      nameWithType:
        CSharp: DateUtility.ToDateTime(String)
        VB: DateUtility.ToDateTime(String)
      qualifiedName:
        CSharp: Refinity.Date.DateUtility.ToDateTime(System.String)
        VB: Refinity.Date.DateUtility.ToDateTime(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Date
      source:
        remote:
          path: Refinity/Date/DateUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToDateTime
        path: Date/DateUtility.cs
        startLine: 270
      summary: "\nConverts a string value to a nullable DateTime object.\n"
      example: []
      syntax:
        content:
          CSharp: public static DateTime? ToDateTime(this string value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToDateTime(value As String) As DateTime?
        parameters:
        - id: value
          type: System.String
          description: The string value to convert.
        return:
          type: System.Nullable{DateTime}
          description: A nullable DateTime object representing the converted value, or null if the conversion fails.
      overload: Refinity.Date.DateUtility.ToDateTime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Refinity.Finance
  commentId: N:Refinity.Finance
  language: CSharp
  name:
    CSharp: Refinity.Finance
    VB: Refinity.Finance
  nameWithType:
    CSharp: Refinity.Finance
    VB: Refinity.Finance
  qualifiedName:
    CSharp: Refinity.Finance
    VB: Refinity.Finance
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Finance.FinanceUtility
    commentId: T:Refinity.Finance.FinanceUtility
    language: CSharp
    name:
      CSharp: FinanceUtility
      VB: FinanceUtility
    nameWithType:
      CSharp: FinanceUtility
      VB: FinanceUtility
    qualifiedName:
      CSharp: Refinity.Finance.FinanceUtility
      VB: Refinity.Finance.FinanceUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Finance
    source:
      remote:
        path: Refinity/Finance/FinanceUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: FinanceUtility
      path: Finance/FinanceUtility.cs
      startLine: 5
    syntax:
      content:
        CSharp: 'public static class FinanceUtility : object'
        VB: >-
          Public Module FinanceUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: DifferencePercentage(Double, Double)
        VB: DifferencePercentage(Double, Double)
      nameWithType:
        CSharp: FinanceUtility.DifferencePercentage(Double, Double)
        VB: FinanceUtility.DifferencePercentage(Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DifferencePercentage
        path: Finance/FinanceUtility.cs
        startLine: 13
      summary: "\nCalculates the difference between two values as a percentage.\n"
      example: []
      syntax:
        content:
          CSharp: public static double DifferencePercentage(this double value, double otherValue)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DifferencePercentage(value As Double, otherValue As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The first value.
        - id: otherValue
          type: System.Double
          description: The second value.
        return:
          type: System.Double
          description: The difference between the two values as a percentage.
      overload: Refinity.Finance.FinanceUtility.DifferencePercentage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32,System.Int32)
      commentId: M:Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: DifferencePercentage(Int32, Int32)
        VB: DifferencePercentage(Int32, Int32)
      nameWithType:
        CSharp: FinanceUtility.DifferencePercentage(Int32, Int32)
        VB: FinanceUtility.DifferencePercentage(Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32, System.Int32)
        VB: Refinity.Finance.FinanceUtility.DifferencePercentage(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DifferencePercentage
        path: Finance/FinanceUtility.cs
        startLine: 24
      summary: "\nCalculates the difference between two integers as a percentage.\n"
      example: []
      syntax:
        content:
          CSharp: public static double DifferencePercentage(this int value, int otherValue)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DifferencePercentage(value As Integer, otherValue As Integer) As Double
        parameters:
        - id: value
          type: System.Int32
          description: The first integer value.
        - id: otherValue
          type: System.Int32
          description: The second integer value.
        return:
          type: System.Double
          description: The difference between the two integers as a percentage.
      overload: Refinity.Finance.FinanceUtility.DifferencePercentage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.CalculateInterest(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.CalculateInterest(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateInterest(Double, Double, Double)
        VB: CalculateInterest(Double, Double, Double)
      nameWithType:
        CSharp: FinanceUtility.CalculateInterest(Double, Double, Double)
        VB: FinanceUtility.CalculateInterest(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.CalculateInterest(System.Double, System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.CalculateInterest(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateInterest
        path: Finance/FinanceUtility.cs
        startLine: 36
      summary: "\nCalculates the interest based on the principal amount, interest rate, and time period.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateInterest(double principal, double interestRate, double timePeriod)
          VB: Public Shared Function CalculateInterest(principal As Double, interestRate As Double, timePeriod As Double) As Double
        parameters:
        - id: principal
          type: System.Double
          description: The principal amount.
        - id: interestRate
          type: System.Double
          description: The interest rate.
        - id: timePeriod
          type: System.Double
          description: The time period in years.
        return:
          type: System.Double
          description: The calculated interest.
      overload: Refinity.Finance.FinanceUtility.CalculateInterest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.ApplyTax(System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.ApplyTax(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: ApplyTax(Double, Double)
        VB: ApplyTax(Double, Double)
      nameWithType:
        CSharp: FinanceUtility.ApplyTax(Double, Double)
        VB: FinanceUtility.ApplyTax(Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.ApplyTax(System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.ApplyTax(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ApplyTax
        path: Finance/FinanceUtility.cs
        startLine: 47
      summary: "\nApplies tax to the given amount.\n"
      example: []
      syntax:
        content:
          CSharp: public static double ApplyTax(double amount, double taxRate)
          VB: Public Shared Function ApplyTax(amount As Double, taxRate As Double) As Double
        parameters:
        - id: amount
          type: System.Double
          description: The amount to apply tax to.
        - id: taxRate
          type: System.Double
          description: The tax rate in percentage.
        return:
          type: System.Double
          description: The amount with tax applied.
      overload: Refinity.Finance.FinanceUtility.ApplyTax*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.DaysUntilDue(DateTime)
      commentId: M:Refinity.Finance.FinanceUtility.DaysUntilDue(DateTime)
      language: CSharp
      name:
        CSharp: DaysUntilDue(DateTime)
        VB: DaysUntilDue(DateTime)
      nameWithType:
        CSharp: FinanceUtility.DaysUntilDue(DateTime)
        VB: FinanceUtility.DaysUntilDue(DateTime)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.DaysUntilDue(DateTime)
        VB: Refinity.Finance.FinanceUtility.DaysUntilDue(DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DaysUntilDue
        path: Finance/FinanceUtility.cs
        startLine: 57
      summary: "\nCalculates the number of days until the specified due date.\n"
      example: []
      syntax:
        content:
          CSharp: public static int DaysUntilDue(DateTime dueDate)
          VB: Public Shared Function DaysUntilDue(dueDate As DateTime) As Integer
        parameters:
        - id: dueDate
          type: DateTime
          description: The due date to calculate the days until.
        return:
          type: System.Int32
          description: The number of days until the due date.
      overload: Refinity.Finance.FinanceUtility.DaysUntilDue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: BreakEvenPoint(Double, Double, Double)
        VB: BreakEvenPoint(Double, Double, Double)
      nameWithType:
        CSharp: FinanceUtility.BreakEvenPoint(Double, Double, Double)
        VB: FinanceUtility.BreakEvenPoint(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double, System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.BreakEvenPoint(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: BreakEvenPoint
        path: Finance/FinanceUtility.cs
        startLine: 69
      summary: "\nCalculates the break-even point based on fixed costs, variable costs, and selling price per unit.\n"
      example: []
      syntax:
        content:
          CSharp: public static double BreakEvenPoint(double fixedCosts, double variableCosts, double sellingPrice)
          VB: Public Shared Function BreakEvenPoint(fixedCosts As Double, variableCosts As Double, sellingPrice As Double) As Double
        parameters:
        - id: fixedCosts
          type: System.Double
          description: The total fixed costs.
        - id: variableCosts
          type: System.Double
          description: The variable costs per unit.
        - id: sellingPrice
          type: System.Double
          description: The selling price per unit.
        return:
          type: System.Double
          description: The break-even point in units.
      overload: Refinity.Finance.FinanceUtility.BreakEvenPoint*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateCompoundInterest(Double, Double, Double)
        VB: CalculateCompoundInterest(Double, Double, Double)
      nameWithType:
        CSharp: FinanceUtility.CalculateCompoundInterest(Double, Double, Double)
        VB: FinanceUtility.CalculateCompoundInterest(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double, System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.CalculateCompoundInterest(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateCompoundInterest
        path: Finance/FinanceUtility.cs
        startLine: 87
      summary: "\nCalculates the compound interest based on the principal amount, interest rate, and time period.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateCompoundInterest(double principal, double interestRate, double timePeriod)
          VB: Public Shared Function CalculateCompoundInterest(principal As Double, interestRate As Double, timePeriod As Double) As Double
        parameters:
        - id: principal
          type: System.Double
          description: The principal amount.
        - id: interestRate
          type: System.Double
          description: The interest rate.
        - id: timePeriod
          type: System.Double
          description: The time period in years.
        return:
          type: System.Double
          description: The calculated compound interest.
      overload: Refinity.Finance.FinanceUtility.CalculateCompoundInterest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
      language: CSharp
      name:
        CSharp: ToCurrency(Double)
        VB: ToCurrency(Double)
      nameWithType:
        CSharp: FinanceUtility.ToCurrency(Double)
        VB: FinanceUtility.ToCurrency(Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
        VB: Refinity.Finance.FinanceUtility.ToCurrency(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToCurrency
        path: Finance/FinanceUtility.cs
        startLine: 98
      summary: "\nConverts a double value to a currency string representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToCurrency(this double value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToCurrency(value As Double) As String
        parameters:
        - id: value
          type: System.Double
          description: The double value to convert.
        return:
          type: System.String
          description: A string representation of the double value formatted as currency.
      overload: Refinity.Finance.FinanceUtility.ToCurrency*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Finance.FinanceUtility.ToCurrency(System.Double,CultureInfo)
      commentId: M:Refinity.Finance.FinanceUtility.ToCurrency(System.Double,CultureInfo)
      language: CSharp
      name:
        CSharp: ToCurrency(Double, CultureInfo)
        VB: ToCurrency(Double, CultureInfo)
      nameWithType:
        CSharp: FinanceUtility.ToCurrency(Double, CultureInfo)
        VB: FinanceUtility.ToCurrency(Double, CultureInfo)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.ToCurrency(System.Double, CultureInfo)
        VB: Refinity.Finance.FinanceUtility.ToCurrency(System.Double, CultureInfo)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToCurrency
        path: Finance/FinanceUtility.cs
        startLine: 109
      summary: "\nConverts the specified integer value to a currency string representation using the specified culture information.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToCurrency(this double value, CultureInfo cultureInfo)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToCurrency(value As Double, cultureInfo As CultureInfo) As String
        parameters:
        - id: value
          type: System.Double
          description: The integer value to convert.
        - id: cultureInfo
          type: CultureInfo
          description: The culture information used for formatting the currency string.
        return:
          type: System.String
          description: A string representation of the specified integer value formatted as a currency.
      overload: Refinity.Finance.FinanceUtility.ToCurrency*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: PredictFutureValue(Double, Double, Double)
        VB: PredictFutureValue(Double, Double, Double)
      nameWithType:
        CSharp: FinanceUtility.PredictFutureValue(Double, Double, Double)
        VB: FinanceUtility.PredictFutureValue(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double, System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PredictFutureValue
        path: Finance/FinanceUtility.cs
        startLine: 121
      summary: "\nCalculates the future value of a present value based on the interest rate and time period.\n"
      example: []
      syntax:
        content:
          CSharp: public static double PredictFutureValue(double presentValue, double interestRate, double timePeriod)
          VB: Public Shared Function PredictFutureValue(presentValue As Double, interestRate As Double, timePeriod As Double) As Double
        parameters:
        - id: presentValue
          type: System.Double
          description: The present value.
        - id: interestRate
          type: System.Double
          description: The interest rate.
        - id: timePeriod
          type: System.Double
          description: The time period in years.
        return:
          type: System.Double
          description: The future value of the present value.
      overload: Refinity.Finance.FinanceUtility.PredictFutureValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,DateTime,DateTime)
      commentId: M:Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double,System.Double,DateTime,DateTime)
      language: CSharp
      name:
        CSharp: PredictFutureValue(Double, Double, DateTime, DateTime)
        VB: PredictFutureValue(Double, Double, DateTime, DateTime)
      nameWithType:
        CSharp: FinanceUtility.PredictFutureValue(Double, Double, DateTime, DateTime)
        VB: FinanceUtility.PredictFutureValue(Double, Double, DateTime, DateTime)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double, System.Double, DateTime, DateTime)
        VB: Refinity.Finance.FinanceUtility.PredictFutureValue(System.Double, System.Double, DateTime, DateTime)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PredictFutureValue
        path: Finance/FinanceUtility.cs
        startLine: 134
      summary: "\nPredicts the future value based on the present value, interest rate, start date, and end date.\n"
      example: []
      syntax:
        content:
          CSharp: public static double PredictFutureValue(double presentValue, double interestRate, DateTime startDate, DateTime endDate)
          VB: Public Shared Function PredictFutureValue(presentValue As Double, interestRate As Double, startDate As DateTime, endDate As DateTime) As Double
        parameters:
        - id: presentValue
          type: System.Double
          description: The present value.
        - id: interestRate
          type: System.Double
          description: The interest rate.
        - id: startDate
          type: DateTime
          description: The start date.
        - id: endDate
          type: DateTime
          description: The end date.
        return:
          type: System.Double
          description: The predicted future value.
      overload: Refinity.Finance.FinanceUtility.PredictFutureValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double,List{System.Double})
      commentId: M:Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double,List{System.Double})
      language: CSharp
      name:
        CSharp: PaybackPeriod(Double, List<Double>)
        VB: PaybackPeriod(Double, List(Of Double))
      nameWithType:
        CSharp: FinanceUtility.PaybackPeriod(Double, List<Double>)
        VB: FinanceUtility.PaybackPeriod(Double, List(Of Double))
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double, List<System.Double>)
        VB: Refinity.Finance.FinanceUtility.PaybackPeriod(System.Double, List(Of System.Double))
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PaybackPeriod
        path: Finance/FinanceUtility.cs
        startLine: 146
      summary: "\nCalculates the time required to recover the cost of an investment.\n"
      example: []
      syntax:
        content:
          CSharp: public static double PaybackPeriod(double initialInvestment, List<double> cashFlows)
          VB: Public Shared Function PaybackPeriod(initialInvestment As Double, cashFlows As List(Of Double)) As Double
        parameters:
        - id: initialInvestment
          type: System.Double
          description: The initial investment cost.
        - id: cashFlows
          type: List{System.Double}
          description: The cash flows generated by the investment.
        return:
          type: System.Double
          description: The payback period in years.
      overload: Refinity.Finance.FinanceUtility.PaybackPeriod*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateSimpleInterest(Double, Double, Double)
        VB: CalculateSimpleInterest(Double, Double, Double)
      nameWithType:
        CSharp: FinanceUtility.CalculateSimpleInterest(Double, Double, Double)
        VB: FinanceUtility.CalculateSimpleInterest(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double, System.Double, System.Double)
        VB: Refinity.Finance.FinanceUtility.CalculateSimpleInterest(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateSimpleInterest
        path: Finance/FinanceUtility.cs
        startLine: 175
      summary: "\nCalculates the simple interest based on the principal amount, interest rate, and time period.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateSimpleInterest(double principal, double interestRate, double timePeriod)
          VB: Public Shared Function CalculateSimpleInterest(principal As Double, interestRate As Double, timePeriod As Double) As Double
        parameters:
        - id: principal
          type: System.Double
          description: The principal amount.
        - id: interestRate
          type: System.Double
          description: The interest rate.
        - id: timePeriod
          type: System.Double
          description: The time period in years.
        return:
          type: System.Double
          description: The calculated simple interest.
      overload: Refinity.Finance.FinanceUtility.CalculateSimpleInterest*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double,List{System.Double})
      commentId: M:Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double,List{System.Double})
      language: CSharp
      name:
        CSharp: CalculateNetPresentValue(Double, List<Double>)
        VB: CalculateNetPresentValue(Double, List(Of Double))
      nameWithType:
        CSharp: FinanceUtility.CalculateNetPresentValue(Double, List<Double>)
        VB: FinanceUtility.CalculateNetPresentValue(Double, List(Of Double))
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double, List<System.Double>)
        VB: Refinity.Finance.FinanceUtility.CalculateNetPresentValue(System.Double, List(Of System.Double))
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateNetPresentValue
        path: Finance/FinanceUtility.cs
        startLine: 186
      summary: "\nCalculates the net present value (NPV) of a series of cash flows based on a discount rate.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateNetPresentValue(double discountRate, List<double> cashFlows)
          VB: Public Shared Function CalculateNetPresentValue(discountRate As Double, cashFlows As List(Of Double)) As Double
        parameters:
        - id: discountRate
          type: System.Double
          description: The discount rate.
        - id: cashFlows
          type: List{System.Double}
          description: The cash flows.
        return:
          type: System.Double
          description: The calculated net present value.
      overload: Refinity.Finance.FinanceUtility.CalculateNetPresentValue*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(List{System.Double})
      commentId: M:Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(List{System.Double})
      language: CSharp
      name:
        CSharp: CalculateInternalRateOfReturn(List<Double>)
        VB: CalculateInternalRateOfReturn(List(Of Double))
      nameWithType:
        CSharp: FinanceUtility.CalculateInternalRateOfReturn(List<Double>)
        VB: FinanceUtility.CalculateInternalRateOfReturn(List(Of Double))
      qualifiedName:
        CSharp: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(List<System.Double>)
        VB: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn(List(Of System.Double))
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Finance
      source:
        remote:
          path: Refinity/Finance/FinanceUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateInternalRateOfReturn
        path: Finance/FinanceUtility.cs
        startLine: 213
      summary: "\nCalculates the internal rate of return (IRR) of a series of cash flows.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateInternalRateOfReturn(List<double> cashFlows)
          VB: Public Shared Function CalculateInternalRateOfReturn(cashFlows As List(Of Double)) As Double
        parameters:
        - id: cashFlows
          type: List{System.Double}
          description: The cash flows.
        return:
          type: System.Double
          description: The calculated internal rate of return.
      overload: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Refinity.Geometry
  commentId: N:Refinity.Geometry
  language: CSharp
  name:
    CSharp: Refinity.Geometry
    VB: Refinity.Geometry
  nameWithType:
    CSharp: Refinity.Geometry
    VB: Refinity.Geometry
  qualifiedName:
    CSharp: Refinity.Geometry
    VB: Refinity.Geometry
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Geometry.GeometryUtility
    commentId: T:Refinity.Geometry.GeometryUtility
    language: CSharp
    name:
      CSharp: GeometryUtility
      VB: GeometryUtility
    nameWithType:
      CSharp: GeometryUtility
      VB: GeometryUtility
    qualifiedName:
      CSharp: Refinity.Geometry.GeometryUtility
      VB: Refinity.Geometry.GeometryUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Geometry
    source:
      remote:
        path: Refinity/Geometry/GeometryUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: GeometryUtility
      path: Geometry/GeometryUtility.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public static class GeometryUtility : object'
        VB: >-
          Public Module GeometryUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: Refinity.Geometry.GeometryUtility.AreaOfCircle(System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfCircle(System.Double)
      language: CSharp
      name:
        CSharp: AreaOfCircle(Double)
        VB: AreaOfCircle(Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfCircle(Double)
        VB: GeometryUtility.AreaOfCircle(Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfCircle(System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfCircle(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfCircle
        path: Geometry/GeometryUtility.cs
        startLine: 9
      summary: "\nCalculates the area of a circle.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfCircle(double radius)
          VB: Public Shared Function AreaOfCircle(radius As Double) As Double
        parameters:
        - id: radius
          type: System.Double
          description: The radius of the circle.
        return:
          type: System.Double
          description: The area of the circle.
      overload: Refinity.Geometry.GeometryUtility.AreaOfCircle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfTriangle(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfTriangle(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: AreaOfTriangle(Double, Double)
        VB: AreaOfTriangle(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfTriangle(Double, Double)
        VB: GeometryUtility.AreaOfTriangle(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfTriangle(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfTriangle(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfTriangle
        path: Geometry/GeometryUtility.cs
        startLine: 24
      summary: "\nCalculates the area of a triangle.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfTriangle(double base, double height)
          VB: Public Shared Function AreaOfTriangle(base As Double, height As Double) As Double
        parameters:
        - id: base
          type: System.Double
          description: The base of the triangle.
        - id: height
          type: System.Double
          description: The height of the triangle.
        return:
          type: System.Double
          description: The area of the triangle.
      overload: Refinity.Geometry.GeometryUtility.AreaOfTriangle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfRectangle(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfRectangle(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: AreaOfRectangle(Double, Double)
        VB: AreaOfRectangle(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfRectangle(Double, Double)
        VB: GeometryUtility.AreaOfRectangle(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfRectangle(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfRectangle(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfRectangle
        path: Geometry/GeometryUtility.cs
        startLine: 39
      summary: "\nCalculates the area of a rectangle.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfRectangle(double length, double width)
          VB: Public Shared Function AreaOfRectangle(length As Double, width As Double) As Double
        parameters:
        - id: length
          type: System.Double
          description: The length of the rectangle.
        - id: width
          type: System.Double
          description: The width of the rectangle.
        return:
          type: System.Double
          description: The area of the rectangle.
      overload: Refinity.Geometry.GeometryUtility.AreaOfRectangle*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfSquare(System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfSquare(System.Double)
      language: CSharp
      name:
        CSharp: AreaOfSquare(Double)
        VB: AreaOfSquare(Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfSquare(Double)
        VB: GeometryUtility.AreaOfSquare(Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfSquare(System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfSquare(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfSquare
        path: Geometry/GeometryUtility.cs
        startLine: 53
      summary: "\nCalculates the area of a square.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfSquare(double side)
          VB: Public Shared Function AreaOfSquare(side As Double) As Double
        parameters:
        - id: side
          type: System.Double
          description: The side of the square.
        return:
          type: System.Double
          description: The area of the square.
      overload: Refinity.Geometry.GeometryUtility.AreaOfSquare*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfTrapezoid(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: AreaOfTrapezoid(Double, Double, Double)
        VB: AreaOfTrapezoid(Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfTrapezoid(Double, Double, Double)
        VB: GeometryUtility.AreaOfTrapezoid(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid(System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfTrapezoid
        path: Geometry/GeometryUtility.cs
        startLine: 69
      summary: "\nCalculates the area of a trapezoid.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfTrapezoid(double base1, double base2, double height)
          VB: Public Shared Function AreaOfTrapezoid(base1 As Double, base2 As Double, height As Double) As Double
        parameters:
        - id: base1
          type: System.Double
          description: The first base of the trapezoid.
        - id: base2
          type: System.Double
          description: The second base of the trapezoid.
        - id: height
          type: System.Double
          description: The height of the trapezoid.
        return:
          type: System.Double
          description: The area of the trapezoid.
      overload: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfParallelogram(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfParallelogram(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: AreaOfParallelogram(Double, Double)
        VB: AreaOfParallelogram(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfParallelogram(Double, Double)
        VB: GeometryUtility.AreaOfParallelogram(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfParallelogram(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfParallelogram(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfParallelogram
        path: Geometry/GeometryUtility.cs
        startLine: 84
      summary: "\nCalculates the area of a parallelogram.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfParallelogram(double base, double height)
          VB: Public Shared Function AreaOfParallelogram(base As Double, height As Double) As Double
        parameters:
        - id: base
          type: System.Double
          description: The base of the parallelogram.
        - id: height
          type: System.Double
          description: The height of the parallelogram.
        return:
          type: System.Double
          description: The area of the parallelogram.
      overload: Refinity.Geometry.GeometryUtility.AreaOfParallelogram*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfRhombus(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfRhombus(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: AreaOfRhombus(Double, Double)
        VB: AreaOfRhombus(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfRhombus(Double, Double)
        VB: GeometryUtility.AreaOfRhombus(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfRhombus(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfRhombus(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfRhombus
        path: Geometry/GeometryUtility.cs
        startLine: 99
      summary: "\nCalculates the area of a rhombus.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfRhombus(double diagonal1, double diagonal2)
          VB: Public Shared Function AreaOfRhombus(diagonal1 As Double, diagonal2 As Double) As Double
        parameters:
        - id: diagonal1
          type: System.Double
          description: The first diagonal of the rhombus.
        - id: diagonal2
          type: System.Double
          description: The second diagonal of the rhombus.
        return:
          type: System.Double
          description: The area of the rhombus.
      overload: Refinity.Geometry.GeometryUtility.AreaOfRhombus*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.AreaOfSector(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.AreaOfSector(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: AreaOfSector(Double, Double)
        VB: AreaOfSector(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.AreaOfSector(Double, Double)
        VB: GeometryUtility.AreaOfSector(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.AreaOfSector(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.AreaOfSector(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: AreaOfSector
        path: Geometry/GeometryUtility.cs
        startLine: 114
      summary: "\nCalculates the area of a sector.\n"
      example: []
      syntax:
        content:
          CSharp: public static double AreaOfSector(double radius, double angle)
          VB: Public Shared Function AreaOfSector(radius As Double, angle As Double) As Double
        parameters:
        - id: radius
          type: System.Double
          description: The radius of the sector.
        - id: angle
          type: System.Double
          description: The angle of the sector.
        return:
          type: System.Double
          description: The area of the sector.
      overload: Refinity.Geometry.GeometryUtility.AreaOfSector*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.ToCartesianCoordinates(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: ToCartesianCoordinates(Double, Double)
        VB: ToCartesianCoordinates(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.ToCartesianCoordinates(Double, Double)
        VB: GeometryUtility.ToCartesianCoordinates(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToCartesianCoordinates
        path: Geometry/GeometryUtility.cs
        startLine: 129
      summary: "\nConverts Cartesian coordinates to cartesian coordinates.\n"
      example: []
      syntax:
        content:
          CSharp: public static CoordinateModel ToCartesianCoordinates(double radius, double angle)
          VB: Public Shared Function ToCartesianCoordinates(radius As Double, angle As Double) As CoordinateModel
        parameters:
        - id: radius
          type: System.Double
          description: The radius.
        - id: angle
          type: System.Double
          description: The angle.
        return:
          type: Refinity.CoordinateModel
          description: ''
      overload: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.ToPolarCoordinates(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.ToPolarCoordinates(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: ToPolarCoordinates(Double, Double)
        VB: ToPolarCoordinates(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.ToPolarCoordinates(Double, Double)
        VB: GeometryUtility.ToPolarCoordinates(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.ToPolarCoordinates(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.ToPolarCoordinates(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToPolarCoordinates
        path: Geometry/GeometryUtility.cs
        startLine: 148
      summary: "\nConverts Cartesian coordinates to polar coordinates.\n"
      example: []
      syntax:
        content:
          CSharp: public static CoordinateModel ToPolarCoordinates(double x, double y)
          VB: Public Shared Function ToPolarCoordinates(x As Double, y As Double) As CoordinateModel
        parameters:
        - id: x
          type: System.Double
          description: The x-coordinate.
        - id: y
          type: System.Double
          description: The y-coordinate.
        return:
          type: Refinity.CoordinateModel
          description: ''
      overload: Refinity.Geometry.GeometryUtility.ToPolarCoordinates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateSlope(System.Double,System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateSlope(System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateSlope(Double, Double, Double, Double)
        VB: CalculateSlope(Double, Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateSlope(Double, Double, Double, Double)
        VB: GeometryUtility.CalculateSlope(Double, Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateSlope(System.Double, System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateSlope(System.Double, System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateSlope
        path: Geometry/GeometryUtility.cs
        startLine: 165
      summary: "\nCalculates the slope between two points on a Cartesian plane.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateSlope(double x1, double y1, double x2, double y2)
          VB: Public Shared Function CalculateSlope(x1 As Double, y1 As Double, x2 As Double, y2 As Double) As Double
        parameters:
        - id: x1
          type: System.Double
          description: The x-coordinate of the first point.
        - id: y1
          type: System.Double
          description: The y-coordinate of the first point.
        - id: x2
          type: System.Double
          description: The x-coordinate of the second point.
        - id: y2
          type: System.Double
          description: The y-coordinate of the second point.
        return:
          type: System.Double
          description: The slope between the two points.
      overload: Refinity.Geometry.GeometryUtility.CalculateSlope*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateDistance(System.Double,System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateDistance(System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateDistance(Double, Double, Double, Double)
        VB: CalculateDistance(Double, Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateDistance(Double, Double, Double, Double)
        VB: GeometryUtility.CalculateDistance(Double, Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateDistance(System.Double, System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateDistance(System.Double, System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateDistance
        path: Geometry/GeometryUtility.cs
        startLine: 182
      summary: "\nCalculates the distance between two points in a two-dimensional space.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateDistance(double x1, double y1, double x2, double y2)
          VB: Public Shared Function CalculateDistance(x1 As Double, y1 As Double, x2 As Double, y2 As Double) As Double
        parameters:
        - id: x1
          type: System.Double
          description: The x-coordinate of the first point.
        - id: y1
          type: System.Double
          description: The y-coordinate of the first point.
        - id: x2
          type: System.Double
          description: The x-coordinate of the second point.
        - id: y2
          type: System.Double
          description: The y-coordinate of the second point.
        return:
          type: System.Double
          description: The distance between the two points.
      overload: Refinity.Geometry.GeometryUtility.CalculateDistance*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter(System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter(System.Double)
      language: CSharp
      name:
        CSharp: CalculateSquarePerimeter(Double)
        VB: CalculateSquarePerimeter(Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateSquarePerimeter(Double)
        VB: GeometryUtility.CalculateSquarePerimeter(Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter(System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateSquarePerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 196
      summary: "\nCalculates the perimeter of a square.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateSquarePerimeter(double side)
          VB: Public Shared Function CalculateSquarePerimeter(side As Double) As Double
        parameters:
        - id: side
          type: System.Double
          description: The length of a side of the square.
        return:
          type: System.Double
          description: The perimeter of the square.
      overload: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateRectanglePerimeter(Double, Double)
        VB: CalculateRectanglePerimeter(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateRectanglePerimeter(Double, Double)
        VB: GeometryUtility.CalculateRectanglePerimeter(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateRectanglePerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 211
      summary: "\nCalculates the perimeter of a rectangle.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateRectanglePerimeter(double length, double width)
          VB: Public Shared Function CalculateRectanglePerimeter(length As Double, width As Double) As Double
        parameters:
        - id: length
          type: System.Double
          description: The length of the rectangle.
        - id: width
          type: System.Double
          description: The width of the rectangle.
        return:
          type: System.Double
          description: The perimeter of the rectangle.
      overload: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateRectangleDiagonal(Double, Double)
        VB: CalculateRectangleDiagonal(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateRectangleDiagonal(Double, Double)
        VB: GeometryUtility.CalculateRectangleDiagonal(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateRectangleDiagonal
        path: Geometry/GeometryUtility.cs
        startLine: 226
      summary: "\nCalculates the diagonal length of a rectangle using its length and width.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateRectangleDiagonal(double length, double width)
          VB: Public Shared Function CalculateRectangleDiagonal(length As Double, width As Double) As Double
        parameters:
        - id: length
          type: System.Double
          description: The length of the rectangle.
        - id: width
          type: System.Double
          description: The width of the rectangle.
        return:
          type: System.Double
          description: The diagonal length of the rectangle.
      overload: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter(System.Double,System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter(System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateTrapezoidPerimeter(Double, Double, Double, Double)
        VB: CalculateTrapezoidPerimeter(Double, Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateTrapezoidPerimeter(Double, Double, Double, Double)
        VB: GeometryUtility.CalculateTrapezoidPerimeter(Double, Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter(System.Double, System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter(System.Double, System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateTrapezoidPerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 243
      summary: "\nCalculates the perimeter of a trapezoid.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateTrapezoidPerimeter(double base1, double base2, double side1, double side2)
          VB: Public Shared Function CalculateTrapezoidPerimeter(base1 As Double, base2 As Double, side1 As Double, side2 As Double) As Double
        parameters:
        - id: base1
          type: System.Double
          description: The length of the first base of the trapezoid.
        - id: base2
          type: System.Double
          description: The length of the second base of the trapezoid.
        - id: side1
          type: System.Double
          description: The length of the first side of the trapezoid.
        - id: side2
          type: System.Double
          description: The length of the second side of the trapezoid.
        return:
          type: System.Double
          description: The perimeter of the trapezoid.
      overload: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter(System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateParallelogramPerimeter(Double, Double)
        VB: CalculateParallelogramPerimeter(Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateParallelogramPerimeter(Double, Double)
        VB: GeometryUtility.CalculateParallelogramPerimeter(Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter(System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateParallelogramPerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 258
      summary: "\nCalculates the perimeter of a parallelogram.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateParallelogramPerimeter(double baseLength, double sideLength)
          VB: Public Shared Function CalculateParallelogramPerimeter(baseLength As Double, sideLength As Double) As Double
        parameters:
        - id: baseLength
          type: System.Double
          description: The length of the base of the parallelogram.
        - id: sideLength
          type: System.Double
          description: The length of the side of the parallelogram.
        return:
          type: System.Double
          description: The perimeter of the parallelogram.
      overload: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter(System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter(System.Double)
      language: CSharp
      name:
        CSharp: CalculateRhombusPerimeter(Double)
        VB: CalculateRhombusPerimeter(Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateRhombusPerimeter(Double)
        VB: GeometryUtility.CalculateRhombusPerimeter(Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter(System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateRhombusPerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 272
      summary: "\nCalculates the perimeter of a rhombus given the length of its side.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateRhombusPerimeter(double side)
          VB: Public Shared Function CalculateRhombusPerimeter(side As Double) As Double
        parameters:
        - id: side
          type: System.Double
          description: The length of the side of the rhombus.
        return:
          type: System.Double
          description: The perimeter of the rhombus.
      overload: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateIsoscelesTrapezoidPerimeter(Double, Double, Double)
        VB: CalculateIsoscelesTrapezoidPerimeter(Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateIsoscelesTrapezoidPerimeter(Double, Double, Double)
        VB: GeometryUtility.CalculateIsoscelesTrapezoidPerimeter(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter(System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateIsoscelesTrapezoidPerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 288
      summary: "\nCalculates the perimeter of an isosceles trapezoid.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateIsoscelesTrapezoidPerimeter(double base1, double base2, double side)
          VB: Public Shared Function CalculateIsoscelesTrapezoidPerimeter(base1 As Double, base2 As Double, side As Double) As Double
        parameters:
        - id: base1
          type: System.Double
          description: The length of the first base.
        - id: base2
          type: System.Double
          description: The length of the second base.
        - id: side
          type: System.Double
          description: The length of the side.
        return:
          type: System.Double
          description: The perimeter of the isosceles trapezoid.
      overload: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateIsoscelesTrapezoidSide(Double, Double, Double)
        VB: CalculateIsoscelesTrapezoidSide(Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateIsoscelesTrapezoidSide(Double, Double, Double)
        VB: GeometryUtility.CalculateIsoscelesTrapezoidSide(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide(System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateIsoscelesTrapezoidSide
        path: Geometry/GeometryUtility.cs
        startLine: 304
      summary: "\nCalculates the length of a side of an isosceles trapezoid given the lengths of its bases and height.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateIsoscelesTrapezoidSide(double base1, double base2, double height)
          VB: Public Shared Function CalculateIsoscelesTrapezoidSide(base1 As Double, base2 As Double, height As Double) As Double
        parameters:
        - id: base1
          type: System.Double
          description: The length of the first base of the trapezoid.
        - id: base2
          type: System.Double
          description: The length of the second base of the trapezoid.
        - id: height
          type: System.Double
          description: The height of the trapezoid.
        return:
          type: System.Double
          description: The length of the side of the trapezoid.
      overload: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter(System.Double,System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter(System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateRightTrapezoidPerimeter(Double, Double, Double, Double)
        VB: CalculateRightTrapezoidPerimeter(Double, Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateRightTrapezoidPerimeter(Double, Double, Double, Double)
        VB: GeometryUtility.CalculateRightTrapezoidPerimeter(Double, Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter(System.Double, System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter(System.Double, System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateRightTrapezoidPerimeter
        path: Geometry/GeometryUtility.cs
        startLine: 326
      summary: "\nCalculates the perimeter of a right trapezoid.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateRightTrapezoidPerimeter(double base1, double base2, double height, double side)
          VB: Public Shared Function CalculateRightTrapezoidPerimeter(base1 As Double, base2 As Double, height As Double, side As Double) As Double
        parameters:
        - id: base1
          type: System.Double
          description: The length of the first base.
        - id: base2
          type: System.Double
          description: The length of the second base.
        - id: height
          type: System.Double
          description: The height of the trapezoid.
        - id: side
          type: System.Double
          description: The length of the side.
        return:
          type: System.Double
          description: The perimeter of the right trapezoid.
      overload: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal(System.Double,System.Double,System.Double,System.Double)
      commentId: M:Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal(System.Double,System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: CalculateRightTrapezoidDiagonal(Double, Double, Double, Double)
        VB: CalculateRightTrapezoidDiagonal(Double, Double, Double, Double)
      nameWithType:
        CSharp: GeometryUtility.CalculateRightTrapezoidDiagonal(Double, Double, Double, Double)
        VB: GeometryUtility.CalculateRightTrapezoidDiagonal(Double, Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal(System.Double, System.Double, System.Double, System.Double)
        VB: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal(System.Double, System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Geometry
      source:
        remote:
          path: Refinity/Geometry/GeometryUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CalculateRightTrapezoidDiagonal
        path: Geometry/GeometryUtility.cs
        startLine: 343
      summary: "\nCalculates the diagonal of a right trapezoid.\n"
      example: []
      syntax:
        content:
          CSharp: public static double CalculateRightTrapezoidDiagonal(double base1, double base2, double height, double side)
          VB: Public Shared Function CalculateRightTrapezoidDiagonal(base1 As Double, base2 As Double, height As Double, side As Double) As Double
        parameters:
        - id: base1
          type: System.Double
          description: The length of the first base of the trapezoid.
        - id: base2
          type: System.Double
          description: The length of the second base of the trapezoid.
        - id: height
          type: System.Double
          description: The height of the trapezoid.
        - id: side
          type: System.Double
          description: The length of the side of the trapezoid.
        return:
          type: System.Double
          description: The diagonal of the right trapezoid.
      overload: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Refinity.Logging
  commentId: N:Refinity.Logging
  language: CSharp
  name:
    CSharp: Refinity.Logging
    VB: Refinity.Logging
  nameWithType:
    CSharp: Refinity.Logging
    VB: Refinity.Logging
  qualifiedName:
    CSharp: Refinity.Logging
    VB: Refinity.Logging
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Logging.LoggingUtility
    commentId: T:Refinity.Logging.LoggingUtility
    language: CSharp
    name:
      CSharp: LoggingUtility
      VB: LoggingUtility
    nameWithType:
      CSharp: LoggingUtility
      VB: LoggingUtility
    qualifiedName:
      CSharp: Refinity.Logging.LoggingUtility
      VB: Refinity.Logging.LoggingUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Logging
    source:
      remote:
        path: Refinity/Logging/LoggingUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: LoggingUtility
      path: Logging/LoggingUtility.cs
      startLine: 8
    syntax:
      content:
        CSharp: 'public class LoggingUtility : object'
        VB: >-
          Public Class LoggingUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.Logging.LoggingUtility.#ctor(System.String,Refinity.Logging.Enums.LogFileType)
      commentId: M:Refinity.Logging.LoggingUtility.#ctor(System.String,Refinity.Logging.Enums.LogFileType)
      language: CSharp
      name:
        CSharp: LoggingUtility(String, LogFileType)
        VB: LoggingUtility(String, LogFileType)
      nameWithType:
        CSharp: LoggingUtility.LoggingUtility(String, LogFileType)
        VB: LoggingUtility.LoggingUtility(String, LogFileType)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.LoggingUtility(System.String, Refinity.Logging.Enums.LogFileType)
        VB: Refinity.Logging.LoggingUtility.LoggingUtility(System.String, Refinity.Logging.Enums.LogFileType)
      type: Constructor
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: .ctor
        path: Logging/LoggingUtility.cs
        startLine: 24
      summary: "\nRepresents a utility class for logging. logFileName should not include the file extension.\n"
      example: []
      syntax:
        content:
          CSharp: public LoggingUtility(string logFileName, LogFileType logFileType = LogFileType.TXT)
          VB: Public Sub New(logFileName As String, logFileType As LogFileType = LogFileType.TXT)
        parameters:
        - id: logFileName
          type: System.String
        - id: logFileType
          type: Refinity.Logging.Enums.LogFileType
      overload: Refinity.Logging.LoggingUtility.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Logging.LoggingUtility.Info(System.String,System.Int32)
      commentId: M:Refinity.Logging.LoggingUtility.Info(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Info(String, Int32)
        VB: Info(String, Int32)
      nameWithType:
        CSharp: LoggingUtility.Info(String, Int32)
        VB: LoggingUtility.Info(String, Int32)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.Info(System.String, System.Int32)
        VB: Refinity.Logging.LoggingUtility.Info(System.String, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Info
        path: Logging/LoggingUtility.cs
        startLine: 107
      summary: "\nLogs an informational message.\n"
      example: []
      syntax:
        content:
          CSharp: public void Info(string message, int severity = 0)
          VB: Public Sub Info(message As String, severity As Integer = 0)
        parameters:
        - id: message
          type: System.String
          description: The message to be logged.
        - id: severity
          type: System.Int32
          description: The severity of the error.
      overload: Refinity.Logging.LoggingUtility.Info*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Logging.LoggingUtility.Debug(System.String,System.Int32)
      commentId: M:Refinity.Logging.LoggingUtility.Debug(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Debug(String, Int32)
        VB: Debug(String, Int32)
      nameWithType:
        CSharp: LoggingUtility.Debug(String, Int32)
        VB: LoggingUtility.Debug(String, Int32)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.Debug(System.String, System.Int32)
        VB: Refinity.Logging.LoggingUtility.Debug(System.String, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Debug
        path: Logging/LoggingUtility.cs
        startLine: 117
      summary: "\nWrites a debug message to the log.\n"
      example: []
      syntax:
        content:
          CSharp: public void Debug(string message, int severity = 0)
          VB: Public Sub Debug(message As String, severity As Integer = 0)
        parameters:
        - id: message
          type: System.String
          description: The message to be logged.
        - id: severity
          type: System.Int32
          description: The severity of the error.
      overload: Refinity.Logging.LoggingUtility.Debug*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Logging.LoggingUtility.Warn(System.String,System.Int32)
      commentId: M:Refinity.Logging.LoggingUtility.Warn(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Warn(String, Int32)
        VB: Warn(String, Int32)
      nameWithType:
        CSharp: LoggingUtility.Warn(String, Int32)
        VB: LoggingUtility.Warn(String, Int32)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.Warn(System.String, System.Int32)
        VB: Refinity.Logging.LoggingUtility.Warn(System.String, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Warn
        path: Logging/LoggingUtility.cs
        startLine: 127
      summary: "\nLogs a warning message.\n"
      example: []
      syntax:
        content:
          CSharp: public void Warn(string message, int severity = 0)
          VB: Public Sub Warn(message As String, severity As Integer = 0)
        parameters:
        - id: message
          type: System.String
          description: The message to be logged.
        - id: severity
          type: System.Int32
          description: The severity of the error.
      overload: Refinity.Logging.LoggingUtility.Warn*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Logging.LoggingUtility.Error(System.String,System.Int32)
      commentId: M:Refinity.Logging.LoggingUtility.Error(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Error(String, Int32)
        VB: Error(String, Int32)
      nameWithType:
        CSharp: LoggingUtility.Error(String, Int32)
        VB: LoggingUtility.Error(String, Int32)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.Error(System.String, System.Int32)
        VB: Refinity.Logging.LoggingUtility.Error(System.String, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Error
        path: Logging/LoggingUtility.cs
        startLine: 137
      summary: "\nLogs an error message.\n"
      example: []
      syntax:
        content:
          CSharp: public void Error(string message, int severity = 0)
          VB: Public Sub Error(message As String, severity As Integer = 0)
        parameters:
        - id: message
          type: System.String
          description: The message to be logged.
        - id: severity
          type: System.Int32
          description: The severity of the error.
      overload: Refinity.Logging.LoggingUtility.Error*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Logging.LoggingUtility.Fatal(System.String,System.Int32)
      commentId: M:Refinity.Logging.LoggingUtility.Fatal(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Fatal(String, Int32)
        VB: Fatal(String, Int32)
      nameWithType:
        CSharp: LoggingUtility.Fatal(String, Int32)
        VB: LoggingUtility.Fatal(String, Int32)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.Fatal(System.String, System.Int32)
        VB: Refinity.Logging.LoggingUtility.Fatal(System.String, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Fatal
        path: Logging/LoggingUtility.cs
        startLine: 147
      summary: "\nLogs a fatal error message.\n"
      example: []
      syntax:
        content:
          CSharp: public void Fatal(string message, int severity = 0)
          VB: Public Sub Fatal(message As String, severity As Integer = 0)
        parameters:
        - id: message
          type: System.String
          description: The message to be logged.
        - id: severity
          type: System.Int32
          description: The severity of the error.
      overload: Refinity.Logging.LoggingUtility.Fatal*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Logging.LoggingUtility.ConvertLogToCSV(System.Char)
      commentId: M:Refinity.Logging.LoggingUtility.ConvertLogToCSV(System.Char)
      language: CSharp
      name:
        CSharp: ConvertLogToCSV(Char)
        VB: ConvertLogToCSV(Char)
      nameWithType:
        CSharp: LoggingUtility.ConvertLogToCSV(Char)
        VB: LoggingUtility.ConvertLogToCSV(Char)
      qualifiedName:
        CSharp: Refinity.Logging.LoggingUtility.ConvertLogToCSV(System.Char)
        VB: Refinity.Logging.LoggingUtility.ConvertLogToCSV(System.Char)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging
      source:
        remote:
          path: Refinity/Logging/LoggingUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertLogToCSV
        path: Logging/LoggingUtility.cs
        startLine: 152
      syntax:
        content:
          CSharp: public byte[] ConvertLogToCSV(char csvDelimiter = ';')
          VB: Public Function ConvertLogToCSV(csvDelimiter As Char = ";"c) As Byte()
        parameters:
        - id: csvDelimiter
          type: System.Char
        return:
          type: System.Byte[]
      overload: Refinity.Logging.LoggingUtility.ConvertLogToCSV*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: Refinity.Logging.Enums
  commentId: N:Refinity.Logging.Enums
  language: CSharp
  name:
    CSharp: Refinity.Logging.Enums
    VB: Refinity.Logging.Enums
  nameWithType:
    CSharp: Refinity.Logging.Enums
    VB: Refinity.Logging.Enums
  qualifiedName:
    CSharp: Refinity.Logging.Enums
    VB: Refinity.Logging.Enums
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Logging.Enums.LogFileType
    commentId: T:Refinity.Logging.Enums.LogFileType
    language: CSharp
    name:
      CSharp: LogFileType
      VB: LogFileType
    nameWithType:
      CSharp: LogFileType
      VB: LogFileType
    qualifiedName:
      CSharp: Refinity.Logging.Enums.LogFileType
      VB: Refinity.Logging.Enums.LogFileType
    type: Enum
    assemblies:
    - Refinity
    namespace: Refinity.Logging.Enums
    source:
      remote:
        path: Refinity/Logging/Enums/LogFiles.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: LogFileType
      path: Logging/Enums/LogFiles.cs
      startLine: 1
    syntax:
      content:
        CSharp: 'public enum LogFileType : int'
        VB: Public Enum LogFileType As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Refinity.Logging.Enums.LogFileType.RTF
      commentId: F:Refinity.Logging.Enums.LogFileType.RTF
      language: CSharp
      name:
        CSharp: RTF
        VB: RTF
      nameWithType:
        CSharp: LogFileType.RTF
        VB: LogFileType.RTF
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogFileType.RTF
        VB: Refinity.Logging.Enums.LogFileType.RTF
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogFiles.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RTF
        path: Logging/Enums/LogFiles.cs
        startLine: 3
      syntax:
        content:
          CSharp: RTF = 0
          VB: RTF = 0
        return:
          type: Refinity.Logging.Enums.LogFileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogFileType.TXT
      commentId: F:Refinity.Logging.Enums.LogFileType.TXT
      language: CSharp
      name:
        CSharp: TXT
        VB: TXT
      nameWithType:
        CSharp: LogFileType.TXT
        VB: LogFileType.TXT
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogFileType.TXT
        VB: Refinity.Logging.Enums.LogFileType.TXT
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogFiles.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: TXT
        path: Logging/Enums/LogFiles.cs
        startLine: 4
      syntax:
        content:
          CSharp: TXT = 1
          VB: TXT = 1
        return:
          type: Refinity.Logging.Enums.LogFileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogFileType.CONSOLE
      commentId: F:Refinity.Logging.Enums.LogFileType.CONSOLE
      language: CSharp
      name:
        CSharp: CONSOLE
        VB: CONSOLE
      nameWithType:
        CSharp: LogFileType.CONSOLE
        VB: LogFileType.CONSOLE
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogFileType.CONSOLE
        VB: Refinity.Logging.Enums.LogFileType.CONSOLE
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogFiles.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: CONSOLE
        path: Logging/Enums/LogFiles.cs
        startLine: 5
      syntax:
        content:
          CSharp: CONSOLE = 2
          VB: CONSOLE = 2
        return:
          type: Refinity.Logging.Enums.LogFileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogFileType.LOG
      commentId: F:Refinity.Logging.Enums.LogFileType.LOG
      language: CSharp
      name:
        CSharp: LOG
        VB: LOG
      nameWithType:
        CSharp: LogFileType.LOG
        VB: LogFileType.LOG
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogFileType.LOG
        VB: Refinity.Logging.Enums.LogFileType.LOG
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogFiles.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: LOG
        path: Logging/Enums/LogFiles.cs
        startLine: 6
      syntax:
        content:
          CSharp: LOG = 3
          VB: LOG = 3
        return:
          type: Refinity.Logging.Enums.LogFileType
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: Refinity.Logging.Enums.LogLevel
    commentId: T:Refinity.Logging.Enums.LogLevel
    language: CSharp
    name:
      CSharp: LogLevel
      VB: LogLevel
    nameWithType:
      CSharp: LogLevel
      VB: LogLevel
    qualifiedName:
      CSharp: Refinity.Logging.Enums.LogLevel
      VB: Refinity.Logging.Enums.LogLevel
    type: Enum
    assemblies:
    - Refinity
    namespace: Refinity.Logging.Enums
    source:
      remote:
        path: Refinity/Logging/Enums/LogLevels.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: LogLevel
      path: Logging/Enums/LogLevels.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public enum LogLevel : int'
        VB: Public Enum LogLevel As Integer
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: Refinity.Logging.Enums.LogLevel.TRACE
      commentId: F:Refinity.Logging.Enums.LogLevel.TRACE
      language: CSharp
      name:
        CSharp: TRACE
        VB: TRACE
      nameWithType:
        CSharp: LogLevel.TRACE
        VB: LogLevel.TRACE
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogLevel.TRACE
        VB: Refinity.Logging.Enums.LogLevel.TRACE
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogLevels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: TRACE
        path: Logging/Enums/LogLevels.cs
        startLine: 4
      syntax:
        content:
          CSharp: TRACE = 0
          VB: TRACE = 0
        return:
          type: Refinity.Logging.Enums.LogLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogLevel.DEBUG
      commentId: F:Refinity.Logging.Enums.LogLevel.DEBUG
      language: CSharp
      name:
        CSharp: DEBUG
        VB: DEBUG
      nameWithType:
        CSharp: LogLevel.DEBUG
        VB: LogLevel.DEBUG
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogLevel.DEBUG
        VB: Refinity.Logging.Enums.LogLevel.DEBUG
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogLevels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DEBUG
        path: Logging/Enums/LogLevels.cs
        startLine: 5
      syntax:
        content:
          CSharp: DEBUG = 1
          VB: DEBUG = 1
        return:
          type: Refinity.Logging.Enums.LogLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogLevel.INFO
      commentId: F:Refinity.Logging.Enums.LogLevel.INFO
      language: CSharp
      name:
        CSharp: INFO
        VB: INFO
      nameWithType:
        CSharp: LogLevel.INFO
        VB: LogLevel.INFO
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogLevel.INFO
        VB: Refinity.Logging.Enums.LogLevel.INFO
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogLevels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: INFO
        path: Logging/Enums/LogLevels.cs
        startLine: 6
      syntax:
        content:
          CSharp: INFO = 2
          VB: INFO = 2
        return:
          type: Refinity.Logging.Enums.LogLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogLevel.WARNING
      commentId: F:Refinity.Logging.Enums.LogLevel.WARNING
      language: CSharp
      name:
        CSharp: WARNING
        VB: WARNING
      nameWithType:
        CSharp: LogLevel.WARNING
        VB: LogLevel.WARNING
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogLevel.WARNING
        VB: Refinity.Logging.Enums.LogLevel.WARNING
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogLevels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: WARNING
        path: Logging/Enums/LogLevels.cs
        startLine: 7
      syntax:
        content:
          CSharp: WARNING = 3
          VB: WARNING = 3
        return:
          type: Refinity.Logging.Enums.LogLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogLevel.ERROR
      commentId: F:Refinity.Logging.Enums.LogLevel.ERROR
      language: CSharp
      name:
        CSharp: ERROR
        VB: ERROR
      nameWithType:
        CSharp: LogLevel.ERROR
        VB: LogLevel.ERROR
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogLevel.ERROR
        VB: Refinity.Logging.Enums.LogLevel.ERROR
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogLevels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ERROR
        path: Logging/Enums/LogLevels.cs
        startLine: 8
      syntax:
        content:
          CSharp: ERROR = 4
          VB: ERROR = 4
        return:
          type: Refinity.Logging.Enums.LogLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: Refinity.Logging.Enums.LogLevel.FATAL
      commentId: F:Refinity.Logging.Enums.LogLevel.FATAL
      language: CSharp
      name:
        CSharp: FATAL
        VB: FATAL
      nameWithType:
        CSharp: LogLevel.FATAL
        VB: LogLevel.FATAL
      qualifiedName:
        CSharp: Refinity.Logging.Enums.LogLevel.FATAL
        VB: Refinity.Logging.Enums.LogLevel.FATAL
      type: Field
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Enums
      source:
        remote:
          path: Refinity/Logging/Enums/LogLevels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: FATAL
        path: Logging/Enums/LogLevels.cs
        startLine: 9
      syntax:
        content:
          CSharp: FATAL = 5
          VB: FATAL = 5
        return:
          type: Refinity.Logging.Enums.LogLevel
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
- id: Refinity.Logging.Models
  commentId: N:Refinity.Logging.Models
  language: CSharp
  name:
    CSharp: Refinity.Logging.Models
    VB: Refinity.Logging.Models
  nameWithType:
    CSharp: Refinity.Logging.Models
    VB: Refinity.Logging.Models
  qualifiedName:
    CSharp: Refinity.Logging.Models
    VB: Refinity.Logging.Models
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Logging.Models.LogColorHelper
    commentId: T:Refinity.Logging.Models.LogColorHelper
    language: CSharp
    name:
      CSharp: LogColorHelper
      VB: LogColorHelper
    nameWithType:
      CSharp: LogColorHelper
      VB: LogColorHelper
    qualifiedName:
      CSharp: Refinity.Logging.Models.LogColorHelper
      VB: Refinity.Logging.Models.LogColorHelper
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Logging.Models
    source:
      remote:
        path: Refinity/Logging/Models/LoggingModels.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: LogColorHelper
      path: Logging/Models/LoggingModels.cs
      startLine: 3
    syntax:
      content:
        CSharp: 'public class LogColorHelper : object'
        VB: >-
          Public Class LogColorHelper

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor(Refinity.Logging.Enums.LogLevel)
      commentId: M:Refinity.Logging.Models.LogColorHelper.GetLogLevelColor(Refinity.Logging.Enums.LogLevel)
      language: CSharp
      name:
        CSharp: GetLogLevelColor(LogLevel)
        VB: GetLogLevelColor(LogLevel)
      nameWithType:
        CSharp: LogColorHelper.GetLogLevelColor(LogLevel)
        VB: LogColorHelper.GetLogLevelColor(LogLevel)
      qualifiedName:
        CSharp: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor(Refinity.Logging.Enums.LogLevel)
        VB: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor(Refinity.Logging.Enums.LogLevel)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Logging.Models
      source:
        remote:
          path: Refinity/Logging/Models/LoggingModels.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetLogLevelColor
        path: Logging/Models/LoggingModels.cs
        startLine: 5
      syntax:
        content:
          CSharp: public static ConsoleColor GetLogLevelColor(LogLevel logLevel)
          VB: Public Shared Function GetLogLevelColor(logLevel As LogLevel) As ConsoleColor
        parameters:
        - id: logLevel
          type: Refinity.Logging.Enums.LogLevel
        return:
          type: ConsoleColor
      overload: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
- id: Refinity.Math
  commentId: N:Refinity.Math
  language: CSharp
  name:
    CSharp: Refinity.Math
    VB: Refinity.Math
  nameWithType:
    CSharp: Refinity.Math
    VB: Refinity.Math
  qualifiedName:
    CSharp: Refinity.Math
    VB: Refinity.Math
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Math.MathUtility
    commentId: T:Refinity.Math.MathUtility
    language: CSharp
    name:
      CSharp: MathUtility
      VB: MathUtility
    nameWithType:
      CSharp: MathUtility
      VB: MathUtility
    qualifiedName:
      CSharp: Refinity.Math.MathUtility
      VB: Refinity.Math.MathUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Math
    source:
      remote:
        path: Refinity/Math/MathUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: MathUtility
      path: Math/MathUtility.cs
      startLine: 4
    syntax:
      content:
        CSharp: 'public static class MathUtility : object'
        VB: >-
          Public Module MathUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Factorial(System.Int32)
      commentId: M:Refinity.Math.MathUtility.Factorial(System.Int32)
      language: CSharp
      name:
        CSharp: Factorial(Int32)
        VB: Factorial(Int32)
      nameWithType:
        CSharp: MathUtility.Factorial(Int32)
        VB: MathUtility.Factorial(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Factorial(System.Int32)
        VB: Refinity.Math.MathUtility.Factorial(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Factorial
        path: Math/MathUtility.cs
        startLine: 11
      summary: "\nCalculates the factorial of a non-negative integer.\n"
      example: []
      syntax:
        content:
          CSharp: public static int Factorial(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Factorial(n As Integer) As Integer
        parameters:
        - id: n
          type: System.Int32
          description: The non-negative integer.
        return:
          type: System.Int32
          description: The factorial of the input integer.
      overload: Refinity.Math.MathUtility.Factorial*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsPrime(System.Int32)
      commentId: M:Refinity.Math.MathUtility.IsPrime(System.Int32)
      language: CSharp
      name:
        CSharp: IsPrime(Int32)
        VB: IsPrime(Int32)
      nameWithType:
        CSharp: MathUtility.IsPrime(Int32)
        VB: MathUtility.IsPrime(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsPrime(System.Int32)
        VB: Refinity.Math.MathUtility.IsPrime(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsPrime
        path: Math/MathUtility.cs
        startLine: 30
      summary: "\nDetermines whether the specified number is a prime number.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsPrime(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsPrime(n As Integer) As Boolean
        parameters:
        - id: n
          type: System.Int32
          description: The number to check.
        return:
          type: System.Boolean
          description: <code>true</code> if the number is prime; otherwise, <code>false</code>.
      overload: Refinity.Math.MathUtility.IsPrime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsPrime(System.Double)
      commentId: M:Refinity.Math.MathUtility.IsPrime(System.Double)
      language: CSharp
      name:
        CSharp: IsPrime(Double)
        VB: IsPrime(Double)
      nameWithType:
        CSharp: MathUtility.IsPrime(Double)
        VB: MathUtility.IsPrime(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsPrime(System.Double)
        VB: Refinity.Math.MathUtility.IsPrime(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsPrime
        path: Math/MathUtility.cs
        startLine: 49
      summary: "\nDetermines whether the specified number is a prime number.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsPrime(this double n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsPrime(n As Double) As Boolean
        parameters:
        - id: n
          type: System.Double
          description: The number to check.
        return:
          type: System.Boolean
          description: <code>true</code> if the number is prime; otherwise, <code>false</code>.
      overload: Refinity.Math.MathUtility.IsPrime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsEven(System.Int32)
      commentId: M:Refinity.Math.MathUtility.IsEven(System.Int32)
      language: CSharp
      name:
        CSharp: IsEven(Int32)
        VB: IsEven(Int32)
      nameWithType:
        CSharp: MathUtility.IsEven(Int32)
        VB: MathUtility.IsEven(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsEven(System.Int32)
        VB: Refinity.Math.MathUtility.IsEven(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsEven
        path: Math/MathUtility.cs
        startLine: 68
      summary: "\nDetermines whether the specified integer is even.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsEven(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsEven(n As Integer) As Boolean
        parameters:
        - id: n
          type: System.Int32
          description: The integer to check.
        return:
          type: System.Boolean
          description: true if the integer is even; otherwise, false.
      overload: Refinity.Math.MathUtility.IsEven*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsOdd(System.Int32)
      commentId: M:Refinity.Math.MathUtility.IsOdd(System.Int32)
      language: CSharp
      name:
        CSharp: IsOdd(Int32)
        VB: IsOdd(Int32)
      nameWithType:
        CSharp: MathUtility.IsOdd(Int32)
        VB: MathUtility.IsOdd(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsOdd(System.Int32)
        VB: Refinity.Math.MathUtility.IsOdd(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsOdd
        path: Math/MathUtility.cs
        startLine: 78
      summary: "\nDetermines whether the specified integer is odd.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsOdd(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsOdd(n As Integer) As Boolean
        parameters:
        - id: n
          type: System.Int32
          description: The integer to check.
        return:
          type: System.Boolean
          description: true if the specified integer is odd; otherwise, false.
      overload: Refinity.Math.MathUtility.IsOdd*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32)
      commentId: M:Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: IsDivisibleBy(Int32, Int32)
        VB: IsDivisibleBy(Int32, Int32)
      nameWithType:
        CSharp: MathUtility.IsDivisibleBy(Int32, Int32)
        VB: MathUtility.IsDivisibleBy(Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32, System.Int32)
        VB: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsDivisibleBy
        path: Math/MathUtility.cs
        startLine: 89
      summary: "\nDetermines whether an integer is divisible by a given divisor.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsDivisibleBy(this int n, int divisor)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsDivisibleBy(n As Integer, divisor As Integer) As Boolean
        parameters:
        - id: n
          type: System.Int32
          description: The integer to check for divisibility.
        - id: divisor
          type: System.Int32
          description: The divisor to check against.
        return:
          type: System.Boolean
          description: True if the integer is divisible by the divisor, otherwise false.
      overload: Refinity.Math.MathUtility.IsDivisibleBy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32,System.Int32@)
      commentId: M:Refinity.Math.MathUtility.IsDivisibleBy(System.Int32,System.Int32,System.Int32@)
      language: CSharp
      name:
        CSharp: IsDivisibleBy(Int32, Int32, out Int32)
        VB: IsDivisibleBy(Int32, Int32, ByRef Int32)
      nameWithType:
        CSharp: MathUtility.IsDivisibleBy(Int32, Int32, out Int32)
        VB: MathUtility.IsDivisibleBy(Int32, Int32, ByRef Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32, System.Int32, out System.Int32)
        VB: Refinity.Math.MathUtility.IsDivisibleBy(System.Int32, System.Int32, ByRef System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsDivisibleBy
        path: Math/MathUtility.cs
        startLine: 101
      summary: "\nDetermines whether an integer is divisible by a given divisor and calculates the quotient.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsDivisibleBy(this int n, int divisor, out int quotient)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsDivisibleBy(n As Integer, divisor As Integer, ByRef quotient As Integer) As Boolean
        parameters:
        - id: n
          type: System.Int32
          description: The integer to check for divisibility.
        - id: divisor
          type: System.Int32
          description: The divisor to check against.
        - id: quotient
          type: System.Int32
          description: The calculated quotient if the integer is divisible by the divisor.
        return:
          type: System.Boolean
          description: True if the integer is divisible by the divisor, false otherwise.
      overload: Refinity.Math.MathUtility.IsDivisibleBy*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32,System.Int32)
      commentId: M:Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: GreatestCommonDivisor(Int32, Int32)
        VB: GreatestCommonDivisor(Int32, Int32)
      nameWithType:
        CSharp: MathUtility.GreatestCommonDivisor(Int32, Int32)
        VB: MathUtility.GreatestCommonDivisor(Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32, System.Int32)
        VB: Refinity.Math.MathUtility.GreatestCommonDivisor(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GreatestCommonDivisor
        path: Math/MathUtility.cs
        startLine: 113
      summary: "\nCalculates the greatest common divisor (GCD) of two integers.\n"
      example: []
      syntax:
        content:
          CSharp: public static int GreatestCommonDivisor(this int a, int b)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GreatestCommonDivisor(a As Integer, b As Integer) As Integer
        parameters:
        - id: a
          type: System.Int32
          description: The first integer.
        - id: b
          type: System.Int32
          description: The second integer.
        return:
          type: System.Int32
          description: The greatest common divisor of the two integers.
      overload: Refinity.Math.MathUtility.GreatestCommonDivisor*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32,System.Int32)
      commentId: M:Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: LeastCommonMultiple(Int32, Int32)
        VB: LeastCommonMultiple(Int32, Int32)
      nameWithType:
        CSharp: MathUtility.LeastCommonMultiple(Int32, Int32)
        VB: MathUtility.LeastCommonMultiple(Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32, System.Int32)
        VB: Refinity.Math.MathUtility.LeastCommonMultiple(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: LeastCommonMultiple
        path: Math/MathUtility.cs
        startLine: 132
      summary: "\nCalculates the least common multiple (LCM) of two integers.\n"
      example: []
      syntax:
        content:
          CSharp: public static int LeastCommonMultiple(this int a, int b)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function LeastCommonMultiple(a As Integer, b As Integer) As Integer
        parameters:
        - id: a
          type: System.Int32
          description: The first integer.
        - id: b
          type: System.Int32
          description: The second integer.
        return:
          type: System.Int32
          description: The least common multiple of the two integers.
      overload: Refinity.Math.MathUtility.LeastCommonMultiple*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
      commentId: M:Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
      language: CSharp
      name:
        CSharp: ConvertToBaseBinary(Int32)
        VB: ConvertToBaseBinary(Int32)
      nameWithType:
        CSharp: MathUtility.ConvertToBaseBinary(Int32)
        VB: MathUtility.ConvertToBaseBinary(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
        VB: Refinity.Math.MathUtility.ConvertToBaseBinary(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertToBaseBinary
        path: Math/MathUtility.cs
        startLine: 142
      summary: "\nConverts an integer to its binary representation in base 2.\n"
      example: []
      syntax:
        content:
          CSharp: public static int ConvertToBaseBinary(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ConvertToBaseBinary(n As Integer) As Integer
        parameters:
        - id: n
          type: System.Int32
          description: The integer to convert.
        return:
          type: System.Int32
          description: The binary representation of the input integer.
      overload: Refinity.Math.MathUtility.ConvertToBaseBinary*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
      commentId: M:Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
      language: CSharp
      name:
        CSharp: ConvertToBaseOctal(Int32)
        VB: ConvertToBaseOctal(Int32)
      nameWithType:
        CSharp: MathUtility.ConvertToBaseOctal(Int32)
        VB: MathUtility.ConvertToBaseOctal(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
        VB: Refinity.Math.MathUtility.ConvertToBaseOctal(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertToBaseOctal
        path: Math/MathUtility.cs
        startLine: 163
      summary: "\nConverts an integer to its octal representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static int ConvertToBaseOctal(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ConvertToBaseOctal(n As Integer) As Integer
        parameters:
        - id: n
          type: System.Int32
          description: The integer to be converted.
        return:
          type: System.Int32
          description: The octal representation of the input integer.
      overload: Refinity.Math.MathUtility.ConvertToBaseOctal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
      commentId: M:Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
      language: CSharp
      name:
        CSharp: ConvertToBaseHexadecimal(Int32)
        VB: ConvertToBaseHexadecimal(Int32)
      nameWithType:
        CSharp: MathUtility.ConvertToBaseHexadecimal(Int32)
        VB: MathUtility.ConvertToBaseHexadecimal(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
        VB: Refinity.Math.MathUtility.ConvertToBaseHexadecimal(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ConvertToBaseHexadecimal
        path: Math/MathUtility.cs
        startLine: 184
      summary: "\nConverts an integer to its hexadecimal representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static int ConvertToBaseHexadecimal(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ConvertToBaseHexadecimal(n As Integer) As Integer
        parameters:
        - id: n
          type: System.Int32
          description: The integer to convert.
        return:
          type: System.Int32
          description: The hexadecimal representation of the input integer.
      overload: Refinity.Math.MathUtility.ConvertToBaseHexadecimal*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Fibonacci(System.Int32)
      commentId: M:Refinity.Math.MathUtility.Fibonacci(System.Int32)
      language: CSharp
      name:
        CSharp: Fibonacci(Int32)
        VB: Fibonacci(Int32)
      nameWithType:
        CSharp: MathUtility.Fibonacci(Int32)
        VB: MathUtility.Fibonacci(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Fibonacci(System.Int32)
        VB: Refinity.Math.MathUtility.Fibonacci(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Fibonacci
        path: Math/MathUtility.cs
        startLine: 215
      summary: "\nCalculates the Fibonacci number for a given integer.\n"
      example: []
      syntax:
        content:
          CSharp: public static int Fibonacci(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Fibonacci(n As Integer) As Integer
        parameters:
        - id: n
          type: System.Int32
          description: The input integer.
        return:
          type: System.Int32
          description: The Fibonacci number.
      overload: Refinity.Math.MathUtility.Fibonacci*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.GetStandardDeviation(System.Int32[])
      commentId: M:Refinity.Math.MathUtility.GetStandardDeviation(System.Int32[])
      language: CSharp
      name:
        CSharp: GetStandardDeviation(Int32[])
        VB: GetStandardDeviation(Int32())
      nameWithType:
        CSharp: MathUtility.GetStandardDeviation(Int32[])
        VB: MathUtility.GetStandardDeviation(Int32())
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.GetStandardDeviation(System.Int32[])
        VB: Refinity.Math.MathUtility.GetStandardDeviation(System.Int32())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetStandardDeviation
        path: Math/MathUtility.cs
        startLine: 234
      summary: "\nCalculates the mean and standard deviation of an array of integers.\n"
      example: []
      syntax:
        content:
          CSharp: public static (double mean, double standardDeviation) GetStandardDeviation(this int[] values)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetStandardDeviation(values As Integer()) As(mean As Double, standardDeviation As Double)(Of Double , Double)
        parameters:
        - id: values
          type: System.Int32[]
          description: The array of integers.
        return:
          type: System.ValueTuple{System.Double,System.Double}
          description: A tuple containing the mean and standard deviation.
      overload: Refinity.Math.MathUtility.GetStandardDeviation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.GetStandardDeviation(System.Double[])
      commentId: M:Refinity.Math.MathUtility.GetStandardDeviation(System.Double[])
      language: CSharp
      name:
        CSharp: GetStandardDeviation(Double[])
        VB: GetStandardDeviation(Double())
      nameWithType:
        CSharp: MathUtility.GetStandardDeviation(Double[])
        VB: MathUtility.GetStandardDeviation(Double())
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.GetStandardDeviation(System.Double[])
        VB: Refinity.Math.MathUtility.GetStandardDeviation(System.Double())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: GetStandardDeviation
        path: Math/MathUtility.cs
        startLine: 245
      summary: "\nCalculates the mean and standard deviation of an array of doubles.\n"
      example: []
      syntax:
        content:
          CSharp: public static (double mean, double standardDeviation) GetStandardDeviation(this double[] values)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function GetStandardDeviation(values As Double()) As(mean As Double, standardDeviation As Double)(Of Double , Double)
        parameters:
        - id: values
          type: System.Double[]
          description: The array of doubles.
        return:
          type: System.ValueTuple{System.Double,System.Double}
          description: A tuple containing the mean and standard deviation.
      overload: Refinity.Math.MathUtility.GetStandardDeviation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.PerformLinearRegression(System.Double[],System.Double[])
      commentId: M:Refinity.Math.MathUtility.PerformLinearRegression(System.Double[],System.Double[])
      language: CSharp
      name:
        CSharp: PerformLinearRegression(Double[], Double[])
        VB: PerformLinearRegression(Double(), Double())
      nameWithType:
        CSharp: MathUtility.PerformLinearRegression(Double[], Double[])
        VB: MathUtility.PerformLinearRegression(Double(), Double())
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.PerformLinearRegression(System.Double[], System.Double[])
        VB: Refinity.Math.MathUtility.PerformLinearRegression(System.Double(), System.Double())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PerformLinearRegression
        path: Math/MathUtility.cs
        startLine: 259
      summary: "\nPerforms linear regression on the given arrays of x and y values.\n"
      example: []
      syntax:
        content:
          CSharp: public static LinearRegressionModel PerformLinearRegression(this double[] x, double[] y)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function PerformLinearRegression(x As Double(), y As Double()) As LinearRegressionModel
        parameters:
        - id: x
          type: System.Double[]
          description: The array of x values.
        - id: y
          type: System.Double[]
          description: The array of y values.
        return:
          type: Refinity.Math.LinearRegressionModel
          description: An object containing the slope (m), y-intercept (b), and correlation coefficient (r).
      overload: Refinity.Math.MathUtility.PerformLinearRegression*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.PerformLinearRegression(System.Int32[],System.Int32[])
      commentId: M:Refinity.Math.MathUtility.PerformLinearRegression(System.Int32[],System.Int32[])
      language: CSharp
      name:
        CSharp: PerformLinearRegression(Int32[], Int32[])
        VB: PerformLinearRegression(Int32(), Int32())
      nameWithType:
        CSharp: MathUtility.PerformLinearRegression(Int32[], Int32[])
        VB: MathUtility.PerformLinearRegression(Int32(), Int32())
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.PerformLinearRegression(System.Int32[], System.Int32[])
        VB: Refinity.Math.MathUtility.PerformLinearRegression(System.Int32(), System.Int32())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PerformLinearRegression
        path: Math/MathUtility.cs
        startLine: 284
      summary: "\nPerforms linear regression on the given arrays of x and y values.\n"
      example: []
      syntax:
        content:
          CSharp: public static LinearRegressionModel PerformLinearRegression(this int[] x, int[] y)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function PerformLinearRegression(x As Integer(), y As Integer()) As LinearRegressionModel
        parameters:
        - id: x
          type: System.Int32[]
          description: The array of x values.
        - id: y
          type: System.Int32[]
          description: The array of y values.
        return:
          type: Refinity.Math.LinearRegressionModel
          description: An object containing the slope (m), y-intercept (b), and correlation coefficient (r).
      overload: Refinity.Math.MathUtility.PerformLinearRegression*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.SimpsonRuleIntegration(Func{System.Double,System.Double},System.Double,System.Double,System.Int32)
      commentId: M:Refinity.Math.MathUtility.SimpsonRuleIntegration(Func{System.Double,System.Double},System.Double,System.Double,System.Int32)
      language: CSharp
      name:
        CSharp: SimpsonRuleIntegration(Func<Double, Double>, Double, Double, Int32)
        VB: SimpsonRuleIntegration(Func(Of Double, Double), Double, Double, Int32)
      nameWithType:
        CSharp: MathUtility.SimpsonRuleIntegration(Func<Double, Double>, Double, Double, Int32)
        VB: MathUtility.SimpsonRuleIntegration(Func(Of Double, Double), Double, Double, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.SimpsonRuleIntegration(Func<System.Double, System.Double>, System.Double, System.Double, System.Int32)
        VB: Refinity.Math.MathUtility.SimpsonRuleIntegration(Func(Of System.Double, System.Double), System.Double, System.Double, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: SimpsonRuleIntegration
        path: Math/MathUtility.cs
        startLine: 303
      summary: "\nPerforms numerical integration using Simpson&apos;s rule.\n"
      example: []
      syntax:
        content:
          CSharp: public static double SimpsonRuleIntegration(Func<double, double> function, double a, double b, int n)
          VB: Public Shared Function SimpsonRuleIntegration(function As Func(Of Double, Double), a As Double, b As Double, n As Integer) As Double
        parameters:
        - id: function
          type: Func{System.Double,System.Double}
          description: The function to integrate.
        - id: a
          type: System.Double
          description: The lower limit of integration.
        - id: b
          type: System.Double
          description: The upper limit of integration.
        - id: n
          type: System.Int32
          description: The number of intervals.
        return:
          type: System.Double
          description: The approximate value of the integral.
      overload: Refinity.Math.MathUtility.SimpsonRuleIntegration*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.NextPrime(System.Double)
      commentId: M:Refinity.Math.MathUtility.NextPrime(System.Double)
      language: CSharp
      name:
        CSharp: NextPrime(Double)
        VB: NextPrime(Double)
      nameWithType:
        CSharp: MathUtility.NextPrime(Double)
        VB: MathUtility.NextPrime(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.NextPrime(System.Double)
        VB: Refinity.Math.MathUtility.NextPrime(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: NextPrime
        path: Math/MathUtility.cs
        startLine: 325
      summary: "\nFinds the next prime number greater than the specified number.\n"
      example: []
      syntax:
        content:
          CSharp: public static double NextPrime(this double n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextPrime(n As Double) As Double
        parameters:
        - id: n
          type: System.Double
          description: The number to find the next prime number after.
        return:
          type: System.Double
          description: The next prime number greater than <code data-dev-comment-type="paramref" class="paramref">n</code>.
      overload: Refinity.Math.MathUtility.NextPrime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.NextPrime(System.Int32)
      commentId: M:Refinity.Math.MathUtility.NextPrime(System.Int32)
      language: CSharp
      name:
        CSharp: NextPrime(Int32)
        VB: NextPrime(Int32)
      nameWithType:
        CSharp: MathUtility.NextPrime(Int32)
        VB: MathUtility.NextPrime(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.NextPrime(System.Int32)
        VB: Refinity.Math.MathUtility.NextPrime(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: NextPrime
        path: Math/MathUtility.cs
        startLine: 350
      summary: "\nFinds the next prime number greater than the specified number.\n"
      example: []
      syntax:
        content:
          CSharp: public static int NextPrime(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function NextPrime(n As Integer) As Integer
        parameters:
        - id: n
          type: System.Int32
          description: The number to find the next prime number after.
        return:
          type: System.Int32
          description: The next prime number greater than <code data-dev-comment-type="paramref" class="paramref">n</code>.
      overload: Refinity.Math.MathUtility.NextPrime*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.PercentageOf(System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.PercentageOf(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: PercentageOf(Double, Double)
        VB: PercentageOf(Double, Double)
      nameWithType:
        CSharp: MathUtility.PercentageOf(Double, Double)
        VB: MathUtility.PercentageOf(Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.PercentageOf(System.Double, System.Double)
        VB: Refinity.Math.MathUtility.PercentageOf(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PercentageOf
        path: Math/MathUtility.cs
        startLine: 376
      summary: "\nCalculates the percentage of a value relative to another value.\n"
      example: []
      syntax:
        content:
          CSharp: public static double PercentageOf(this double value, double otherValue)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function PercentageOf(value As Double, otherValue As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The value to calculate the percentage of.
        - id: otherValue
          type: System.Double
          description: The value to calculate the percentage relative to.
        return:
          type: System.Double
          description: The percentage of the value relative to the other value.
      overload: Refinity.Math.MathUtility.PercentageOf*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.PercentageOf(System.Int32,System.Int32)
      commentId: M:Refinity.Math.MathUtility.PercentageOf(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: PercentageOf(Int32, Int32)
        VB: PercentageOf(Int32, Int32)
      nameWithType:
        CSharp: MathUtility.PercentageOf(Int32, Int32)
        VB: MathUtility.PercentageOf(Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.PercentageOf(System.Int32, System.Int32)
        VB: Refinity.Math.MathUtility.PercentageOf(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: PercentageOf
        path: Math/MathUtility.cs
        startLine: 387
      summary: "\nCalculates the percentage of a value relative to another value.\n"
      example: []
      syntax:
        content:
          CSharp: public static double PercentageOf(this int value, int otherValue)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function PercentageOf(value As Integer, otherValue As Integer) As Double
        parameters:
        - id: value
          type: System.Int32
          description: The value to calculate the percentage of.
        - id: otherValue
          type: System.Int32
          description: The value to calculate the percentage relative to.
        return:
          type: System.Double
          description: The percentage of the value relative to the other value.
      overload: Refinity.Math.MathUtility.PercentageOf*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: IsApproximatelyEqualTo(Double, Double, Double)
        VB: IsApproximatelyEqualTo(Double, Double, Double)
      nameWithType:
        CSharp: MathUtility.IsApproximatelyEqualTo(Double, Double, Double)
        VB: MathUtility.IsApproximatelyEqualTo(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double, System.Double, System.Double)
        VB: Refinity.Math.MathUtility.IsApproximatelyEqualTo(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsApproximatelyEqualTo
        path: Math/MathUtility.cs
        startLine: 399
      summary: "\nDetermines whether the specified value is approximately equal to the other value within the given tolerance.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsApproximatelyEqualTo(this double value, double otherValue, double tolerance)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsApproximatelyEqualTo(value As Double, otherValue As Double, tolerance As Double) As Boolean
        parameters:
        - id: value
          type: System.Double
          description: The value to compare.
        - id: otherValue
          type: System.Double
          description: The other value to compare.
        - id: tolerance
          type: System.Double
          description: The tolerance within which the values are considered equal.
        return:
          type: System.Boolean
          description: <code>true</code> if the values are approximately equal; otherwise, <code>false</code>.
      overload: Refinity.Math.MathUtility.IsApproximatelyEqualTo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Clamp(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.Clamp(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Clamp(Double, Double, Double)
        VB: Clamp(Double, Double, Double)
      nameWithType:
        CSharp: MathUtility.Clamp(Double, Double, Double)
        VB: MathUtility.Clamp(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Clamp(System.Double, System.Double, System.Double)
        VB: Refinity.Math.MathUtility.Clamp(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Clamp
        path: Math/MathUtility.cs
        startLine: 411
      summary: "\nClamps a value between a minimum and maximum value.\n"
      example: []
      syntax:
        content:
          CSharp: public static double Clamp(this double value, double min, double max)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Clamp(value As Double, min As Double, max As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The value to clamp.
        - id: min
          type: System.Double
          description: The minimum value.
        - id: max
          type: System.Double
          description: The maximum value.
        return:
          type: System.Double
          description: The clamped value.
      overload: Refinity.Math.MathUtility.Clamp*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Divisors(System.Int32)
      commentId: M:Refinity.Math.MathUtility.Divisors(System.Int32)
      language: CSharp
      name:
        CSharp: Divisors(Int32)
        VB: Divisors(Int32)
      nameWithType:
        CSharp: MathUtility.Divisors(Int32)
        VB: MathUtility.Divisors(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Divisors(System.Int32)
        VB: Refinity.Math.MathUtility.Divisors(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Divisors
        path: Math/MathUtility.cs
        startLine: 421
      summary: "\nReturns an array of divisors for the given integer.\n"
      example: []
      syntax:
        content:
          CSharp: public static int[] Divisors(this int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Divisors(n As Integer) As Integer()
        parameters:
        - id: n
          type: System.Int32
          description: The integer for which to find divisors.
        return:
          type: System.Int32[]
          description: An array of divisors.
      overload: Refinity.Math.MathUtility.Divisors*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Normalize(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.Normalize(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: Normalize(Double, Double, Double)
        VB: Normalize(Double, Double, Double)
      nameWithType:
        CSharp: MathUtility.Normalize(Double, Double, Double)
        VB: MathUtility.Normalize(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Normalize(System.Double, System.Double, System.Double)
        VB: Refinity.Math.MathUtility.Normalize(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Normalize
        path: Math/MathUtility.cs
        startLine: 440
      summary: "\nNormalizes a value within a specified range.\n"
      example: []
      syntax:
        content:
          CSharp: public static double Normalize(this double value, double min, double max)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Normalize(value As Double, min As Double, max As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The value to be normalized.
        - id: min
          type: System.Double
          description: The minimum value of the range.
        - id: max
          type: System.Double
          description: The maximum value of the range.
        return:
          type: System.Double
          description: The normalized value.
      overload: Refinity.Math.MathUtility.Normalize*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.LogBaseN(System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.LogBaseN(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: LogBaseN(Double, Double)
        VB: LogBaseN(Double, Double)
      nameWithType:
        CSharp: MathUtility.LogBaseN(Double, Double)
        VB: MathUtility.LogBaseN(Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.LogBaseN(System.Double, System.Double)
        VB: Refinity.Math.MathUtility.LogBaseN(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: LogBaseN
        path: Math/MathUtility.cs
        startLine: 459
      summary: "\nCalculates the logarithm of a specified value in a specified base.\n"
      example: []
      syntax:
        content:
          CSharp: public static double LogBaseN(this double value, double n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function LogBaseN(value As Double, n As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The value for which to calculate the logarithm.
        - id: n
          type: System.Double
          description: The base of the logarithm.
        return:
          type: System.Double
          description: The logarithm of the specified value in the specified base.
      overload: Refinity.Math.MathUtility.LogBaseN*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.IsInRange(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.IsInRange(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: IsInRange(Double, Double, Double)
        VB: IsInRange(Double, Double, Double)
      nameWithType:
        CSharp: MathUtility.IsInRange(Double, Double, Double)
        VB: MathUtility.IsInRange(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.IsInRange(System.Double, System.Double, System.Double)
        VB: Refinity.Math.MathUtility.IsInRange(System.Double, System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsInRange
        path: Math/MathUtility.cs
        startLine: 476
      summary: "\nDetermines whether the specified value is within the specified range.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsInRange(this double value, double min, double max)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsInRange(value As Double, min As Double, max As Double) As Boolean
        parameters:
        - id: value
          type: System.Double
          description: The value to check.
        - id: min
          type: System.Double
          description: The minimum value of the range.
        - id: max
          type: System.Double
          description: The maximum value of the range.
        return:
          type: System.Boolean
          description: true if the value is within the range; otherwise, false.
      overload: Refinity.Math.MathUtility.IsInRange*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.ToStringPercentage(System.Double,System.Int32)
      commentId: M:Refinity.Math.MathUtility.ToStringPercentage(System.Double,System.Int32)
      language: CSharp
      name:
        CSharp: ToStringPercentage(Double, Int32)
        VB: ToStringPercentage(Double, Int32)
      nameWithType:
        CSharp: MathUtility.ToStringPercentage(Double, Int32)
        VB: MathUtility.ToStringPercentage(Double, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.ToStringPercentage(System.Double, System.Int32)
        VB: Refinity.Math.MathUtility.ToStringPercentage(System.Double, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToStringPercentage
        path: Math/MathUtility.cs
        startLine: 487
      summary: "\nFormats a double value as a percentage string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToStringPercentage(this double value, int decimalPlaces = 2)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToStringPercentage(value As Double, decimalPlaces As Integer = 2) As String
        parameters:
        - id: value
          type: System.Double
          description: The double value to format.
        - id: decimalPlaces
          type: System.Int32
          description: The number of decimal places to include in the formatted string. Default is 2.
        return:
          type: System.String
          description: A string representation of the double value formatted as a percentage.
      overload: Refinity.Math.MathUtility.ToStringPercentage*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.ToScientificNotation(System.Double)
      commentId: M:Refinity.Math.MathUtility.ToScientificNotation(System.Double)
      language: CSharp
      name:
        CSharp: ToScientificNotation(Double)
        VB: ToScientificNotation(Double)
      nameWithType:
        CSharp: MathUtility.ToScientificNotation(Double)
        VB: MathUtility.ToScientificNotation(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.ToScientificNotation(System.Double)
        VB: Refinity.Math.MathUtility.ToScientificNotation(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToScientificNotation
        path: Math/MathUtility.cs
        startLine: 497
      summary: "\nConverts a number to scientific notation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToScientificNotation(this double number)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToScientificNotation(number As Double) As String
        parameters:
        - id: number
          type: System.Double
          description: The number to convert.
        return:
          type: System.String
          description: The number in scientific notation.
      overload: Refinity.Math.MathUtility.ToScientificNotation*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.SumTo(System.Double,System.Double)
      commentId: M:Refinity.Math.MathUtility.SumTo(System.Double,System.Double)
      language: CSharp
      name:
        CSharp: SumTo(Double, Double)
        VB: SumTo(Double, Double)
      nameWithType:
        CSharp: MathUtility.SumTo(Double, Double)
        VB: MathUtility.SumTo(Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.SumTo(System.Double, System.Double)
        VB: Refinity.Math.MathUtility.SumTo(System.Double, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: SumTo
        path: Math/MathUtility.cs
        startLine: 508
      summary: "\nCalculates the sum of an arithmetic series up to a given number of terms.\n"
      example: []
      syntax:
        content:
          CSharp: public static double SumTo(this double value, double n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function SumTo(value As Double, n As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The first term of the series.
        - id: n
          type: System.Double
          description: The number of terms in the series.
        return:
          type: System.Double
          description: The sum of the arithmetic series.
      overload: Refinity.Math.MathUtility.SumTo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.SumTo(System.Int32,System.Int32)
      commentId: M:Refinity.Math.MathUtility.SumTo(System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: SumTo(Int32, Int32)
        VB: SumTo(Int32, Int32)
      nameWithType:
        CSharp: MathUtility.SumTo(Int32, Int32)
        VB: MathUtility.SumTo(Int32, Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.SumTo(System.Int32, System.Int32)
        VB: Refinity.Math.MathUtility.SumTo(System.Int32, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: SumTo
        path: Math/MathUtility.cs
        startLine: 519
      summary: "\nCalculates the sum of an arithmetic series up to a given number of terms.\n"
      example: []
      syntax:
        content:
          CSharp: public static double SumTo(this int value, int n)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function SumTo(value As Integer, n As Integer) As Double
        parameters:
        - id: value
          type: System.Int32
          description: The first term of the series.
        - id: n
          type: System.Int32
          description: The number of terms in the series.
        return:
          type: System.Double
          description: The sum of the arithmetic series.
      overload: Refinity.Math.MathUtility.SumTo*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Invert(System.Double)
      commentId: M:Refinity.Math.MathUtility.Invert(System.Double)
      language: CSharp
      name:
        CSharp: Invert(Double)
        VB: Invert(Double)
      nameWithType:
        CSharp: MathUtility.Invert(Double)
        VB: MathUtility.Invert(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Invert(System.Double)
        VB: Refinity.Math.MathUtility.Invert(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Invert
        path: Math/MathUtility.cs
        startLine: 529
      summary: "\nInverts the specified value.\n"
      example: []
      syntax:
        content:
          CSharp: public static double Invert(this double value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Invert(value As Double) As Double
        parameters:
        - id: value
          type: System.Double
          description: The value to invert.
        return:
          type: System.Double
          description: The inverted value.
      overload: Refinity.Math.MathUtility.Invert*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.Invert(System.Int32)
      commentId: M:Refinity.Math.MathUtility.Invert(System.Int32)
      language: CSharp
      name:
        CSharp: Invert(Int32)
        VB: Invert(Int32)
      nameWithType:
        CSharp: MathUtility.Invert(Int32)
        VB: MathUtility.Invert(Int32)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Invert(System.Int32)
        VB: Refinity.Math.MathUtility.Invert(System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Invert
        path: Math/MathUtility.cs
        startLine: 539
      summary: "\nInverts the specified integer value.\n"
      example: []
      syntax:
        content:
          CSharp: public static double Invert(this int value)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Invert(value As Integer) As Double
        parameters:
        - id: value
          type: System.Int32
          description: The value to invert.
        return:
          type: System.Double
          description: The inverted value.
      overload: Refinity.Math.MathUtility.Invert*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
      commentId: M:Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
      language: CSharp
      name:
        CSharp: DegreesToHMSString(Double)
        VB: DegreesToHMSString(Double)
      nameWithType:
        CSharp: MathUtility.DegreesToHMSString(Double)
        VB: MathUtility.DegreesToHMSString(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
        VB: Refinity.Math.MathUtility.DegreesToHMSString(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DegreesToHMSString
        path: Math/MathUtility.cs
        startLine: 549
      summary: "\nConverts the given degrees to a string representation in hours, minutes, and seconds format.\n"
      example: []
      syntax:
        content:
          CSharp: public static string DegreesToHMSString(this double degrees)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DegreesToHMSString(degrees As Double) As String
        parameters:
        - id: degrees
          type: System.Double
          description: The degrees to convert.
        return:
          type: System.String
          description: A string representation of the degrees in hours, minutes, and seconds format.
      overload: Refinity.Math.MathUtility.DegreesToHMSString*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.DegreesToHMS(System.Double)
      commentId: M:Refinity.Math.MathUtility.DegreesToHMS(System.Double)
      language: CSharp
      name:
        CSharp: DegreesToHMS(Double)
        VB: DegreesToHMS(Double)
      nameWithType:
        CSharp: MathUtility.DegreesToHMS(Double)
        VB: MathUtility.DegreesToHMS(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.DegreesToHMS(System.Double)
        VB: Refinity.Math.MathUtility.DegreesToHMS(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DegreesToHMS
        path: Math/MathUtility.cs
        startLine: 560
      summary: "\nConverts degrees to hours, minutes, and seconds.\n"
      example: []
      syntax:
        content:
          CSharp: public static (int hours, int minutes, double seconds) DegreesToHMS(double degrees)
          VB: Public Shared Function DegreesToHMS(degrees As Double) As(hours As Integer, minutes As Integer, seconds As Double)(Of Integer , Integer, Double)
        parameters:
        - id: degrees
          type: System.Double
          description: The degrees to convert.
        return:
          type: System.ValueTuple{System.Int32,System.Int32,System.Double}
          description: A tuple containing the hours, minutes, and seconds.
      overload: Refinity.Math.MathUtility.DegreesToHMS*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.DegreesToRadians(System.Double)
      commentId: M:Refinity.Math.MathUtility.DegreesToRadians(System.Double)
      language: CSharp
      name:
        CSharp: DegreesToRadians(Double)
        VB: DegreesToRadians(Double)
      nameWithType:
        CSharp: MathUtility.DegreesToRadians(Double)
        VB: MathUtility.DegreesToRadians(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.DegreesToRadians(System.Double)
        VB: Refinity.Math.MathUtility.DegreesToRadians(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: DegreesToRadians
        path: Math/MathUtility.cs
        startLine: 586
      summary: "\nConverts degrees to radians.\n"
      example: []
      syntax:
        content:
          CSharp: public static double DegreesToRadians(this double degrees)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function DegreesToRadians(degrees As Double) As Double
        parameters:
        - id: degrees
          type: System.Double
          description: The angle in degrees.
        return:
          type: System.Double
          description: The angle in radians.
      overload: Refinity.Math.MathUtility.DegreesToRadians*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
      commentId: M:Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
      language: CSharp
      name:
        CSharp: RadiansToDegrees(Double)
        VB: RadiansToDegrees(Double)
      nameWithType:
        CSharp: MathUtility.RadiansToDegrees(Double)
        VB: MathUtility.RadiansToDegrees(Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
        VB: Refinity.Math.MathUtility.RadiansToDegrees(System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RadiansToDegrees
        path: Math/MathUtility.cs
        startLine: 596
      summary: "\nConverts an angle from radians to degrees.\n"
      example: []
      syntax:
        content:
          CSharp: public static double RadiansToDegrees(this double radians)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function RadiansToDegrees(radians As Double) As Double
        parameters:
        - id: radians
          type: System.Double
          description: The angle in radians.
        return:
          type: System.Double
          description: The angle in degrees.
      overload: Refinity.Math.MathUtility.RadiansToDegrees*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.Median(System.Double[])
      commentId: M:Refinity.Math.MathUtility.Median(System.Double[])
      language: CSharp
      name:
        CSharp: Median(Double[])
        VB: Median(Double())
      nameWithType:
        CSharp: MathUtility.Median(Double[])
        VB: MathUtility.Median(Double())
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Median(System.Double[])
        VB: Refinity.Math.MathUtility.Median(System.Double())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Median
        path: Math/MathUtility.cs
        startLine: 606
      summary: "\nCalculates the median value of an array of numbers.\n"
      example: []
      syntax:
        content:
          CSharp: public static double Median(params double[] numbers)
          VB: Public Shared Function Median(ParamArray numbers As Double()) As Double
        parameters:
        - id: numbers
          type: System.Double[]
          description: The array of numbers.
        return:
          type: System.Double
          description: The median value.
      overload: Refinity.Math.MathUtility.Median*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.Mode(System.Double[])
      commentId: M:Refinity.Math.MathUtility.Mode(System.Double[])
      language: CSharp
      name:
        CSharp: Mode(Double[])
        VB: Mode(Double())
      nameWithType:
        CSharp: MathUtility.Mode(Double[])
        VB: MathUtility.Mode(Double())
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.Mode(System.Double[])
        VB: Refinity.Math.MathUtility.Mode(System.Double())
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Mode
        path: Math/MathUtility.cs
        startLine: 627
      summary: "\nCalculates the mode value of an array of numbers.\n"
      example: []
      syntax:
        content:
          CSharp: public static double Mode(params double[] numbers)
          VB: Public Shared Function Mode(ParamArray numbers As Double()) As Double
        parameters:
        - id: numbers
          type: System.Double[]
          description: The array of numbers.
        return:
          type: System.Double
          description: The mode value.
      overload: Refinity.Math.MathUtility.Mode*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.MatrixAddition(System.Object,System.Object)
      commentId: M:Refinity.Math.MathUtility.MatrixAddition(System.Object,System.Object)
      language: CSharp
      name:
        CSharp: MatrixAddition(Object, Object)
        VB: MatrixAddition(Object, Object)
      nameWithType:
        CSharp: MathUtility.MatrixAddition(Object, Object)
        VB: MathUtility.MatrixAddition(Object, Object)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.MatrixAddition(System.Object, System.Object)
        VB: Refinity.Math.MathUtility.MatrixAddition(System.Object, System.Object)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: MatrixAddition
        path: Math/MathUtility.cs
        startLine: 664
      summary: "\nAdds two matrices together.\n"
      example: []
      syntax:
        content:
          CSharp: public static dynamic MatrixAddition(dynamic matrix1, dynamic matrix2)
          VB: Public Shared Function MatrixAddition(matrix1 As Object, matrix2 As Object) As Object
        parameters:
        - id: matrix1
          type: System.Object
          description: The first matrix.
        - id: matrix2
          type: System.Object
          description: The second matrix.
        return:
          type: System.Object
          description: The result of the matrix addition.
      overload: Refinity.Math.MathUtility.MatrixAddition*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.MatrixSubtraction(System.Object,System.Object)
      commentId: M:Refinity.Math.MathUtility.MatrixSubtraction(System.Object,System.Object)
      language: CSharp
      name:
        CSharp: MatrixSubtraction(Object, Object)
        VB: MatrixSubtraction(Object, Object)
      nameWithType:
        CSharp: MathUtility.MatrixSubtraction(Object, Object)
        VB: MathUtility.MatrixSubtraction(Object, Object)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.MatrixSubtraction(System.Object, System.Object)
        VB: Refinity.Math.MathUtility.MatrixSubtraction(System.Object, System.Object)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: MatrixSubtraction
        path: Math/MathUtility.cs
        startLine: 692
      summary: "\nPerforms subtraction of two matrices.\n"
      example: []
      syntax:
        content:
          CSharp: public static dynamic MatrixSubtraction(dynamic matrix1, dynamic matrix2)
          VB: Public Shared Function MatrixSubtraction(matrix1 As Object, matrix2 As Object) As Object
        parameters:
        - id: matrix1
          type: System.Object
          description: The first matrix.
        - id: matrix2
          type: System.Object
          description: The second matrix.
        return:
          type: System.Object
          description: The result of the matrix subtraction.
      overload: Refinity.Math.MathUtility.MatrixSubtraction*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.MatrixMultiplication(System.Object,System.Object)
      commentId: M:Refinity.Math.MathUtility.MatrixMultiplication(System.Object,System.Object)
      language: CSharp
      name:
        CSharp: MatrixMultiplication(Object, Object)
        VB: MatrixMultiplication(Object, Object)
      nameWithType:
        CSharp: MathUtility.MatrixMultiplication(Object, Object)
        VB: MathUtility.MatrixMultiplication(Object, Object)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.MatrixMultiplication(System.Object, System.Object)
        VB: Refinity.Math.MathUtility.MatrixMultiplication(System.Object, System.Object)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: MatrixMultiplication
        path: Math/MathUtility.cs
        startLine: 720
      summary: "\nPerforms matrix multiplication on two dynamic matrices.\n"
      example: []
      syntax:
        content:
          CSharp: public static dynamic MatrixMultiplication(dynamic matrix1, dynamic matrix2)
          VB: Public Shared Function MatrixMultiplication(matrix1 As Object, matrix2 As Object) As Object
        parameters:
        - id: matrix1
          type: System.Object
          description: The first matrix.
        - id: matrix2
          type: System.Object
          description: The second matrix.
        return:
          type: System.Object
          description: The result of the matrix multiplication.
      overload: Refinity.Math.MathUtility.MatrixMultiplication*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object,System.Double)
      commentId: M:Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object,System.Double)
      language: CSharp
      name:
        CSharp: MatrixScalarMultiplication(Object, Double)
        VB: MatrixScalarMultiplication(Object, Double)
      nameWithType:
        CSharp: MathUtility.MatrixScalarMultiplication(Object, Double)
        VB: MathUtility.MatrixScalarMultiplication(Object, Double)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object, System.Double)
        VB: Refinity.Math.MathUtility.MatrixScalarMultiplication(System.Object, System.Double)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: MatrixScalarMultiplication
        path: Math/MathUtility.cs
        startLine: 752
      summary: "\nPerforms scalar multiplication on a matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public static dynamic MatrixScalarMultiplication(dynamic matrix, double scalar)
          VB: Public Shared Function MatrixScalarMultiplication(matrix As Object, scalar As Double) As Object
        parameters:
        - id: matrix
          type: System.Object
          description: The matrix to be multiplied.
        - id: scalar
          type: System.Double
          description: The scalar value to multiply the matrix by.
        return:
          type: System.Object
          description: The result of the matrix scalar multiplication.
      overload: Refinity.Math.MathUtility.MatrixScalarMultiplication*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.MatrixTranspose(System.Object)
      commentId: M:Refinity.Math.MathUtility.MatrixTranspose(System.Object)
      language: CSharp
      name:
        CSharp: MatrixTranspose(Object)
        VB: MatrixTranspose(Object)
      nameWithType:
        CSharp: MathUtility.MatrixTranspose(Object)
        VB: MathUtility.MatrixTranspose(Object)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.MatrixTranspose(System.Object)
        VB: Refinity.Math.MathUtility.MatrixTranspose(System.Object)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: MatrixTranspose
        path: Math/MathUtility.cs
        startLine: 774
      summary: "\nTransposes a matrix.\n"
      example: []
      syntax:
        content:
          CSharp: public static dynamic MatrixTranspose(dynamic matrix)
          VB: Public Shared Function MatrixTranspose(matrix As Object) As Object
        parameters:
        - id: matrix
          type: System.Object
          description: The matrix to transpose.
        return:
          type: System.Object
          description: The transposed matrix.
      overload: Refinity.Math.MathUtility.MatrixTranspose*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: Refinity.Math.MathUtility.MatrixInverse(System.Object)
      commentId: M:Refinity.Math.MathUtility.MatrixInverse(System.Object)
      language: CSharp
      name:
        CSharp: MatrixInverse(Object)
        VB: MatrixInverse(Object)
      nameWithType:
        CSharp: MathUtility.MatrixInverse(Object)
        VB: MathUtility.MatrixInverse(Object)
      qualifiedName:
        CSharp: Refinity.Math.MathUtility.MatrixInverse(System.Object)
        VB: Refinity.Math.MathUtility.MatrixInverse(System.Object)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/MathUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: MatrixInverse
        path: Math/MathUtility.cs
        startLine: 841
      summary: "\nRepresents a type that can hold values of any type.\n"
      example: []
      syntax:
        content:
          CSharp: public static dynamic MatrixInverse(dynamic matrix)
          VB: Public Shared Function MatrixInverse(matrix As Object) As Object
        parameters:
        - id: matrix
          type: System.Object
        return:
          type: System.Object
      overload: Refinity.Math.MathUtility.MatrixInverse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: Refinity.Math.LinearRegressionModel
    commentId: T:Refinity.Math.LinearRegressionModel
    language: CSharp
    name:
      CSharp: LinearRegressionModel
      VB: LinearRegressionModel
    nameWithType:
      CSharp: LinearRegressionModel
      VB: LinearRegressionModel
    qualifiedName:
      CSharp: Refinity.Math.LinearRegressionModel
      VB: Refinity.Math.LinearRegressionModel
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Math
    source:
      remote:
        path: Refinity/Math/Models/LinearRegressionModel.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: LinearRegressionModel
      path: Math/Models/LinearRegressionModel.cs
      startLine: 2
    syntax:
      content:
        CSharp: 'public class LinearRegressionModel : object'
        VB: >-
          Public Class LinearRegressionModel

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: Refinity.Math.LinearRegressionModel.#ctor(System.Double,System.Double,System.Double)
      commentId: M:Refinity.Math.LinearRegressionModel.#ctor(System.Double,System.Double,System.Double)
      language: CSharp
      name:
        CSharp: LinearRegressionModel(Double, Double, Double)
        VB: LinearRegressionModel(Double, Double, Double)
      nameWithType:
        CSharp: LinearRegressionModel.LinearRegressionModel(Double, Double, Double)
        VB: LinearRegressionModel.LinearRegressionModel(Double, Double, Double)
      qualifiedName:
        CSharp: Refinity.Math.LinearRegressionModel.LinearRegressionModel(System.Double, System.Double, System.Double)
        VB: Refinity.Math.LinearRegressionModel.LinearRegressionModel(System.Double, System.Double, System.Double)
      type: Constructor
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/Models/LinearRegressionModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: .ctor
        path: Math/Models/LinearRegressionModel.cs
        startLine: 8
      syntax:
        content:
          CSharp: public LinearRegressionModel(double m, double b, double r)
          VB: Public Sub New(m As Double, b As Double, r As Double)
        parameters:
        - id: m
          type: System.Double
        - id: b
          type: System.Double
        - id: r
          type: System.Double
      overload: Refinity.Math.LinearRegressionModel.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: Refinity.Math.LinearRegressionModel.Slope
      commentId: P:Refinity.Math.LinearRegressionModel.Slope
      language: CSharp
      name:
        CSharp: Slope
        VB: Slope
      nameWithType:
        CSharp: LinearRegressionModel.Slope
        VB: LinearRegressionModel.Slope
      qualifiedName:
        CSharp: Refinity.Math.LinearRegressionModel.Slope
        VB: Refinity.Math.LinearRegressionModel.Slope
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/Models/LinearRegressionModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Slope
        path: Math/Models/LinearRegressionModel.cs
        startLine: 15
      syntax:
        content:
          CSharp: public double Slope { get; set; }
          VB: Public Property Slope As Double
        parameters: []
        return:
          type: System.Double
      overload: Refinity.Math.LinearRegressionModel.Slope*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Math.LinearRegressionModel.Intercept
      commentId: P:Refinity.Math.LinearRegressionModel.Intercept
      language: CSharp
      name:
        CSharp: Intercept
        VB: Intercept
      nameWithType:
        CSharp: LinearRegressionModel.Intercept
        VB: LinearRegressionModel.Intercept
      qualifiedName:
        CSharp: Refinity.Math.LinearRegressionModel.Intercept
        VB: Refinity.Math.LinearRegressionModel.Intercept
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/Models/LinearRegressionModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Intercept
        path: Math/Models/LinearRegressionModel.cs
        startLine: 16
      syntax:
        content:
          CSharp: public double Intercept { get; set; }
          VB: Public Property Intercept As Double
        parameters: []
        return:
          type: System.Double
      overload: Refinity.Math.LinearRegressionModel.Intercept*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
    - id: Refinity.Math.LinearRegressionModel.Correlation
      commentId: P:Refinity.Math.LinearRegressionModel.Correlation
      language: CSharp
      name:
        CSharp: Correlation
        VB: Correlation
      nameWithType:
        CSharp: LinearRegressionModel.Correlation
        VB: LinearRegressionModel.Correlation
      qualifiedName:
        CSharp: Refinity.Math.LinearRegressionModel.Correlation
        VB: Refinity.Math.LinearRegressionModel.Correlation
      type: Property
      assemblies:
      - Refinity
      namespace: Refinity.Math
      source:
        remote:
          path: Refinity/Math/Models/LinearRegressionModel.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Correlation
        path: Math/Models/LinearRegressionModel.cs
        startLine: 17
      syntax:
        content:
          CSharp: public double Correlation { get; set; }
          VB: Public Property Correlation As Double
        parameters: []
        return:
          type: System.Double
      overload: Refinity.Math.LinearRegressionModel.Correlation*
      modifiers:
        CSharp:
        - public
        - get
        - set
        VB:
        - Public
- id: Refinity.Strings
  commentId: N:Refinity.Strings
  language: CSharp
  name:
    CSharp: Refinity.Strings
    VB: Refinity.Strings
  nameWithType:
    CSharp: Refinity.Strings
    VB: Refinity.Strings
  qualifiedName:
    CSharp: Refinity.Strings
    VB: Refinity.Strings
  type: Namespace
  assemblies:
  - Refinity
  modifiers: {}
  items:
  - id: Refinity.Strings.StringsUtility
    commentId: T:Refinity.Strings.StringsUtility
    language: CSharp
    name:
      CSharp: StringsUtility
      VB: StringsUtility
    nameWithType:
      CSharp: StringsUtility
      VB: StringsUtility
    qualifiedName:
      CSharp: Refinity.Strings.StringsUtility
      VB: Refinity.Strings.StringsUtility
    type: Class
    assemblies:
    - Refinity
    namespace: Refinity.Strings
    source:
      remote:
        path: Refinity/Strings/StringsUtility.cs
        branch: dev
        repo: https://github.com/InfinitySoftware-House/Refinity.git
      id: StringsUtility
      path: Strings/StringsUtility.cs
      startLine: 6
    syntax:
      content:
        CSharp: 'public static class StringsUtility : object'
        VB: >-
          Public Module StringsUtility

              Inherits Object
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.RemoveWhitespace(System.String)
      commentId: M:Refinity.Strings.StringsUtility.RemoveWhitespace(System.String)
      language: CSharp
      name:
        CSharp: RemoveWhitespace(String)
        VB: RemoveWhitespace(String)
      nameWithType:
        CSharp: StringsUtility.RemoveWhitespace(String)
        VB: StringsUtility.RemoveWhitespace(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.RemoveWhitespace(System.String)
        VB: Refinity.Strings.StringsUtility.RemoveWhitespace(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RemoveWhitespace
        path: Strings/StringsUtility.cs
        startLine: 13
      summary: "\nRemoves all whitespace characters from the input string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string RemoveWhitespace(this string input)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function RemoveWhitespace(input As String) As String
        parameters:
        - id: input
          type: System.String
          description: The string to remove whitespace from.
        return:
          type: System.String
          description: A new string with all whitespace characters removed.
      overload: Refinity.Strings.StringsUtility.RemoveWhitespace*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.RemoveTabs(System.String,System.Boolean)
      commentId: M:Refinity.Strings.StringsUtility.RemoveTabs(System.String,System.Boolean)
      language: CSharp
      name:
        CSharp: RemoveTabs(String, Boolean)
        VB: RemoveTabs(String, Boolean)
      nameWithType:
        CSharp: StringsUtility.RemoveTabs(String, Boolean)
        VB: StringsUtility.RemoveTabs(String, Boolean)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.RemoveTabs(System.String, System.Boolean)
        VB: Refinity.Strings.StringsUtility.RemoveTabs(System.String, System.Boolean)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RemoveTabs
        path: Strings/StringsUtility.cs
        startLine: 33
      summary: "\nRemoves tabs and optionally new lines from a string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string RemoveTabs(this string input, bool removeNewLines)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function RemoveTabs(input As String, removeNewLines As Boolean) As String
        parameters:
        - id: input
          type: System.String
          description: The input string.
        - id: removeNewLines
          type: System.Boolean
          description: A boolean value indicating whether to remove new lines.
        return:
          type: System.String
          description: The modified string with tabs and new lines removed.
      overload: Refinity.Strings.StringsUtility.RemoveTabs*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.RemoveHTMLTags(System.String)
      commentId: M:Refinity.Strings.StringsUtility.RemoveHTMLTags(System.String)
      language: CSharp
      name:
        CSharp: RemoveHTMLTags(String)
        VB: RemoveHTMLTags(String)
      nameWithType:
        CSharp: StringsUtility.RemoveHTMLTags(String)
        VB: StringsUtility.RemoveHTMLTags(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.RemoveHTMLTags(System.String)
        VB: Refinity.Strings.StringsUtility.RemoveHTMLTags(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: RemoveHTMLTags
        path: Strings/StringsUtility.cs
        startLine: 54
      summary: "\nRemoves HTML tags from a string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string RemoveHTMLTags(this string input)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function RemoveHTMLTags(input As String) As String
        parameters:
        - id: input
          type: System.String
          description: The input string.
        return:
          type: System.String
          description: The string with HTML tags removed.
      overload: Refinity.Strings.StringsUtility.RemoveHTMLTags*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.Reverse(System.String)
      commentId: M:Refinity.Strings.StringsUtility.Reverse(System.String)
      language: CSharp
      name:
        CSharp: Reverse(String)
        VB: Reverse(String)
      nameWithType:
        CSharp: StringsUtility.Reverse(String)
        VB: StringsUtility.Reverse(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.Reverse(System.String)
        VB: Refinity.Strings.StringsUtility.Reverse(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Reverse
        path: Strings/StringsUtility.cs
        startLine: 71
      summary: "\nReverses the characters in a string.\n"
      example: []
      syntax:
        content:
          CSharp: public static string Reverse(this string input)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Reverse(input As String) As String
        parameters:
        - id: input
          type: System.String
          description: The string to be reversed.
        return:
          type: System.String
          description: The reversed string.
      overload: Refinity.Strings.StringsUtility.Reverse*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.Truncate(System.String,System.Int32)
      commentId: M:Refinity.Strings.StringsUtility.Truncate(System.String,System.Int32)
      language: CSharp
      name:
        CSharp: Truncate(String, Int32)
        VB: Truncate(String, Int32)
      nameWithType:
        CSharp: StringsUtility.Truncate(String, Int32)
        VB: StringsUtility.Truncate(String, Int32)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.Truncate(System.String, System.Int32)
        VB: Refinity.Strings.StringsUtility.Truncate(System.String, System.Int32)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: Truncate
        path: Strings/StringsUtility.cs
        startLine: 88
      summary: "\nTruncates a string to the specified maximum length.\n"
      example: []
      syntax:
        content:
          CSharp: public static string Truncate(this string input, int maxLength)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function Truncate(input As String, maxLength As Integer) As String
        parameters:
        - id: input
          type: System.String
          description: The input string.
        - id: maxLength
          type: System.Int32
          description: The maximum length to truncate the string.
        return:
          type: System.String
          description: The truncated string.
      overload: Refinity.Strings.StringsUtility.Truncate*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.IsPalindrome(System.String)
      commentId: M:Refinity.Strings.StringsUtility.IsPalindrome(System.String)
      language: CSharp
      name:
        CSharp: IsPalindrome(String)
        VB: IsPalindrome(String)
      nameWithType:
        CSharp: StringsUtility.IsPalindrome(String)
        VB: StringsUtility.IsPalindrome(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.IsPalindrome(System.String)
        VB: Refinity.Strings.StringsUtility.IsPalindrome(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: IsPalindrome
        path: Strings/StringsUtility.cs
        startLine: 114
      summary: "\nDetermines whether a string is a palindrome.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool IsPalindrome(this string input)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function IsPalindrome(input As String) As Boolean
        parameters:
        - id: input
          type: System.String
          description: The string to check.
        return:
          type: System.Boolean
          description: True if the string is a palindrome; otherwise, false.
      overload: Refinity.Strings.StringsUtility.IsPalindrome*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.SplitCamelCase(System.String)
      commentId: M:Refinity.Strings.StringsUtility.SplitCamelCase(System.String)
      language: CSharp
      name:
        CSharp: SplitCamelCase(String)
        VB: SplitCamelCase(String)
      nameWithType:
        CSharp: StringsUtility.SplitCamelCase(String)
        VB: StringsUtility.SplitCamelCase(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.SplitCamelCase(System.String)
        VB: Refinity.Strings.StringsUtility.SplitCamelCase(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: SplitCamelCase
        path: Strings/StringsUtility.cs
        startLine: 129
      summary: "\nSplits a camel case string into an array of strings.\n"
      example: []
      syntax:
        content:
          CSharp: public static string[] SplitCamelCase(this string input)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function SplitCamelCase(input As String) As String()
        parameters:
        - id: input
          type: System.String
          description: The camel case string to split.
        return:
          type: System.String[]
          description: An array of strings representing the split camel case string.
      overload: Refinity.Strings.StringsUtility.SplitCamelCase*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.ToPascalCase(System.String)
      commentId: M:Refinity.Strings.StringsUtility.ToPascalCase(System.String)
      language: CSharp
      name:
        CSharp: ToPascalCase(String)
        VB: ToPascalCase(String)
      nameWithType:
        CSharp: StringsUtility.ToPascalCase(String)
        VB: StringsUtility.ToPascalCase(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.ToPascalCase(System.String)
        VB: Refinity.Strings.StringsUtility.ToPascalCase(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToPascalCase
        path: Strings/StringsUtility.cs
        startLine: 143
      summary: "\nConverts the specified string to title case.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToPascalCase(this string input)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToPascalCase(input As String) As String
        parameters:
        - id: input
          type: System.String
          description: The string to convert.
        return:
          type: System.String
          description: The specified string converted to title case.
      overload: Refinity.Strings.StringsUtility.ToPascalCase*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.ToBase64(System.String)
      commentId: M:Refinity.Strings.StringsUtility.ToBase64(System.String)
      language: CSharp
      name:
        CSharp: ToBase64(String)
        VB: ToBase64(String)
      nameWithType:
        CSharp: StringsUtility.ToBase64(String)
        VB: StringsUtility.ToBase64(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.ToBase64(System.String)
        VB: Refinity.Strings.StringsUtility.ToBase64(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToBase64
        path: Strings/StringsUtility.cs
        startLine: 157
      summary: "\nConverts a string to its Base64 representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToBase64(this string text)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToBase64(text As String) As String
        parameters:
        - id: text
          type: System.String
          description: The string to convert.
        return:
          type: System.String
          description: The Base64 representation of the input string.
      overload: Refinity.Strings.StringsUtility.ToBase64*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.FromBase64(System.String)
      commentId: M:Refinity.Strings.StringsUtility.FromBase64(System.String)
      language: CSharp
      name:
        CSharp: FromBase64(String)
        VB: FromBase64(String)
      nameWithType:
        CSharp: StringsUtility.FromBase64(String)
        VB: StringsUtility.FromBase64(String)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.FromBase64(System.String)
        VB: Refinity.Strings.StringsUtility.FromBase64(System.String)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: FromBase64
        path: Strings/StringsUtility.cs
        startLine: 172
      summary: "\nConverts a base64 encoded string to its original UTF-8 representation.\n"
      example: []
      syntax:
        content:
          CSharp: public static string FromBase64(this string base64)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function FromBase64(base64 As String) As String
        parameters:
        - id: base64
          type: System.String
          description: The base64 encoded string to convert.
        return:
          type: System.String
          description: The original UTF-8 representation of the base64 encoded string.
      overload: Refinity.Strings.StringsUtility.FromBase64*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.ToBase64(System.String,Encoding)
      commentId: M:Refinity.Strings.StringsUtility.ToBase64(System.String,Encoding)
      language: CSharp
      name:
        CSharp: ToBase64(String, Encoding)
        VB: ToBase64(String, Encoding)
      nameWithType:
        CSharp: StringsUtility.ToBase64(String, Encoding)
        VB: StringsUtility.ToBase64(String, Encoding)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.ToBase64(System.String, Encoding)
        VB: Refinity.Strings.StringsUtility.ToBase64(System.String, Encoding)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: ToBase64
        path: Strings/StringsUtility.cs
        startLine: 188
      summary: "\nConverts a string to its Base64 representation using the specified encoding.\n"
      example: []
      syntax:
        content:
          CSharp: public static string ToBase64(this string text, Encoding encoding)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function ToBase64(text As String, encoding As Encoding) As String
        parameters:
        - id: text
          type: System.String
          description: The string to convert.
        - id: encoding
          type: Encoding
          description: The encoding to use.
        return:
          type: System.String
          description: The Base64 representation of the input string.
      overload: Refinity.Strings.StringsUtility.ToBase64*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - isExtensionMethod: true
      id: Refinity.Strings.StringsUtility.FromBase64(System.String,Encoding)
      commentId: M:Refinity.Strings.StringsUtility.FromBase64(System.String,Encoding)
      language: CSharp
      name:
        CSharp: FromBase64(String, Encoding)
        VB: FromBase64(String, Encoding)
      nameWithType:
        CSharp: StringsUtility.FromBase64(String, Encoding)
        VB: StringsUtility.FromBase64(String, Encoding)
      qualifiedName:
        CSharp: Refinity.Strings.StringsUtility.FromBase64(System.String, Encoding)
        VB: Refinity.Strings.StringsUtility.FromBase64(System.String, Encoding)
      type: Method
      assemblies:
      - Refinity
      namespace: Refinity.Strings
      source:
        remote:
          path: Refinity/Strings/StringsUtility.cs
          branch: dev
          repo: https://github.com/InfinitySoftware-House/Refinity.git
        id: FromBase64
        path: Strings/StringsUtility.cs
        startLine: 204
      summary: "\nConverts a Base64 encoded string to its original form using the specified encoding.\n"
      example: []
      syntax:
        content:
          CSharp: public static string FromBase64(this string base64, Encoding encoding)
          VB: >-
            <ExtensionAttribute>

            Public Shared Function FromBase64(base64 As String, encoding As Encoding) As String
        parameters:
        - id: base64
          type: System.String
          description: The Base64 encoded string to convert.
        - id: encoding
          type: Encoding
          description: The encoding to use for decoding the Base64 string.
        return:
          type: System.String
          description: The original string represented by the Base64 encoded string.
      overload: Refinity.Strings.StringsUtility.FromBase64*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
  Refinity.DateDifference.Years*:
    name:
      CSharp:
      - id: Refinity.DateDifference.Years*
        name: Years
        nameWithType: DateDifference.Years
        qualifiedName: Refinity.DateDifference.Years
      VB:
      - id: Refinity.DateDifference.Years*
        name: Years
        nameWithType: DateDifference.Years
        qualifiedName: Refinity.DateDifference.Years
    isDefinition: true
    commentId: Overload:Refinity.DateDifference.Years
  Refinity.DateDifference.Months*:
    name:
      CSharp:
      - id: Refinity.DateDifference.Months*
        name: Months
        nameWithType: DateDifference.Months
        qualifiedName: Refinity.DateDifference.Months
      VB:
      - id: Refinity.DateDifference.Months*
        name: Months
        nameWithType: DateDifference.Months
        qualifiedName: Refinity.DateDifference.Months
    isDefinition: true
    commentId: Overload:Refinity.DateDifference.Months
  Refinity.DateDifference.Days*:
    name:
      CSharp:
      - id: Refinity.DateDifference.Days*
        name: Days
        nameWithType: DateDifference.Days
        qualifiedName: Refinity.DateDifference.Days
      VB:
      - id: Refinity.DateDifference.Days*
        name: Days
        nameWithType: DateDifference.Days
        qualifiedName: Refinity.DateDifference.Days
    isDefinition: true
    commentId: Overload:Refinity.DateDifference.Days
  Refinity.DateDifference.Hours*:
    name:
      CSharp:
      - id: Refinity.DateDifference.Hours*
        name: Hours
        nameWithType: DateDifference.Hours
        qualifiedName: Refinity.DateDifference.Hours
      VB:
      - id: Refinity.DateDifference.Hours*
        name: Hours
        nameWithType: DateDifference.Hours
        qualifiedName: Refinity.DateDifference.Hours
    isDefinition: true
    commentId: Overload:Refinity.DateDifference.Hours
  Refinity.DateDifference.Minutes*:
    name:
      CSharp:
      - id: Refinity.DateDifference.Minutes*
        name: Minutes
        nameWithType: DateDifference.Minutes
        qualifiedName: Refinity.DateDifference.Minutes
      VB:
      - id: Refinity.DateDifference.Minutes*
        name: Minutes
        nameWithType: DateDifference.Minutes
        qualifiedName: Refinity.DateDifference.Minutes
    isDefinition: true
    commentId: Overload:Refinity.DateDifference.Minutes
  Refinity.DateDifference.Seconds*:
    name:
      CSharp:
      - id: Refinity.DateDifference.Seconds*
        name: Seconds
        nameWithType: DateDifference.Seconds
        qualifiedName: Refinity.DateDifference.Seconds
      VB:
      - id: Refinity.DateDifference.Seconds*
        name: Seconds
        nameWithType: DateDifference.Seconds
        qualifiedName: Refinity.DateDifference.Seconds
    isDefinition: true
    commentId: Overload:Refinity.DateDifference.Seconds
  Refinity.DateDifference:
    name:
      CSharp:
      - id: Refinity.DateDifference
        name: DateDifference
        nameWithType: DateDifference
        qualifiedName: Refinity.DateDifference
      VB:
      - id: Refinity.DateDifference
        name: DateDifference
        nameWithType: DateDifference
        qualifiedName: Refinity.DateDifference
    isDefinition: true
    parent: Refinity
    commentId: T:Refinity.DateDifference
  System.Double:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
    isDefinition: true
  Refinity.CoordinateModel.X*:
    name:
      CSharp:
      - id: Refinity.CoordinateModel.X*
        name: X
        nameWithType: CoordinateModel.X
        qualifiedName: Refinity.CoordinateModel.X
      VB:
      - id: Refinity.CoordinateModel.X*
        name: X
        nameWithType: CoordinateModel.X
        qualifiedName: Refinity.CoordinateModel.X
    isDefinition: true
    commentId: Overload:Refinity.CoordinateModel.X
  Refinity.CoordinateModel.Y*:
    name:
      CSharp:
      - id: Refinity.CoordinateModel.Y*
        name: Y
        nameWithType: CoordinateModel.Y
        qualifiedName: Refinity.CoordinateModel.Y
      VB:
      - id: Refinity.CoordinateModel.Y*
        name: Y
        nameWithType: CoordinateModel.Y
        qualifiedName: Refinity.CoordinateModel.Y
    isDefinition: true
    commentId: Overload:Refinity.CoordinateModel.Y
  System.Nullable`1:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  System.Nullable{System.Double}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    commentId: '!:System.Nullable{System.Double}'
  Refinity.CoordinateModel.Z*:
    name:
      CSharp:
      - id: Refinity.CoordinateModel.Z*
        name: Z
        nameWithType: CoordinateModel.Z
        qualifiedName: Refinity.CoordinateModel.Z
      VB:
      - id: Refinity.CoordinateModel.Z*
        name: Z
        nameWithType: CoordinateModel.Z
        qualifiedName: Refinity.CoordinateModel.Z
    isDefinition: true
    commentId: Overload:Refinity.CoordinateModel.Z
  Refinity.CoordinateModel:
    name:
      CSharp:
      - id: Refinity.CoordinateModel
        name: CoordinateModel
        nameWithType: CoordinateModel
        qualifiedName: Refinity.CoordinateModel
      VB:
      - id: Refinity.CoordinateModel
        name: CoordinateModel
        nameWithType: CoordinateModel
        qualifiedName: Refinity.CoordinateModel
    isDefinition: true
    parent: Refinity
    commentId: T:Refinity.CoordinateModel
  Refinity:
    name:
      CSharp:
      - name: Refinity
        nameWithType: Refinity
        qualifiedName: Refinity
      VB:
      - name: Refinity
        nameWithType: Refinity
        qualifiedName: Refinity
    isDefinition: true
    commentId: N:Refinity
  Refinity.Benchmark.Models:
    name:
      CSharp:
      - name: Refinity.Benchmark.Models
        nameWithType: Refinity.Benchmark.Models
        qualifiedName: Refinity.Benchmark.Models
      VB:
      - name: Refinity.Benchmark.Models
        nameWithType: Refinity.Benchmark.Models
        qualifiedName: Refinity.Benchmark.Models
    isDefinition: true
    commentId: N:Refinity.Benchmark.Models
  Refinity.Benchmark.Models.BenchmarkModels:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels
        name: BenchmarkModels
        nameWithType: BenchmarkModels
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels
        name: BenchmarkModels
        nameWithType: BenchmarkModels
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels
    isDefinition: true
    parent: Refinity.Benchmark.Models
    commentId: T:Refinity.Benchmark.Models.BenchmarkModels
  Func`1:
    name:
      CSharp:
      - id: Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Func`1'
  Func{{T}}:
    name:
      CSharp:
      - id: Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Func`1
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Func`1
    commentId: '!:Func{``0}'
  Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark*:
    name:
      CSharp:
      - id: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark*
        name: RunCodeBenchmark
        nameWithType: BenchmarkUtility.RunCodeBenchmark
        qualifiedName: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark
      VB:
      - id: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark*
        name: RunCodeBenchmark
        nameWithType: BenchmarkUtility.RunCodeBenchmark
        qualifiedName: Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.BenchmarkUtility.RunCodeBenchmark
  Action:
    name:
      CSharp:
      - id: Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
      VB:
      - id: Action
        name: Action
        nameWithType: Action
        qualifiedName: Action
        isExternal: true
    isDefinition: true
    commentId: '!:Action'
  Refinity.Benchmark.BenchmarkUtility:
    name:
      CSharp:
      - id: Refinity.Benchmark.BenchmarkUtility
        name: BenchmarkUtility
        nameWithType: BenchmarkUtility
        qualifiedName: Refinity.Benchmark.BenchmarkUtility
      VB:
      - id: Refinity.Benchmark.BenchmarkUtility
        name: BenchmarkUtility
        nameWithType: BenchmarkUtility
        qualifiedName: Refinity.Benchmark.BenchmarkUtility
    isDefinition: true
    commentId: T:Refinity.Benchmark.BenchmarkUtility
  Refinity.Benchmark:
    name:
      CSharp:
      - name: Refinity.Benchmark
        nameWithType: Refinity.Benchmark
        qualifiedName: Refinity.Benchmark
      VB:
      - name: Refinity.Benchmark
        nameWithType: Refinity.Benchmark
        qualifiedName: Refinity.Benchmark
    isDefinition: true
    commentId: N:Refinity.Benchmark
  Refinity.Benchmark.Enums:
    name:
      CSharp:
      - name: Refinity.Benchmark.Enums
        nameWithType: Refinity.Benchmark.Enums
        qualifiedName: Refinity.Benchmark.Enums
      VB:
      - name: Refinity.Benchmark.Enums
        nameWithType: Refinity.Benchmark.Enums
        qualifiedName: Refinity.Benchmark.Enums
    isDefinition: true
    commentId: N:Refinity.Benchmark.Enums
  Refinity.Benchmark.Enums.BenchmarkResult:
    name:
      CSharp:
      - id: Refinity.Benchmark.Enums.BenchmarkResult
        name: BenchmarkResult
        nameWithType: BenchmarkResult
        qualifiedName: Refinity.Benchmark.Enums.BenchmarkResult
      VB:
      - id: Refinity.Benchmark.Enums.BenchmarkResult
        name: BenchmarkResult
        nameWithType: BenchmarkResult
        qualifiedName: Refinity.Benchmark.Enums.BenchmarkResult
    isDefinition: true
    parent: Refinity.Benchmark.Enums
    commentId: T:Refinity.Benchmark.Enums.BenchmarkResult
  Refinity.Benchmark.Models.BenchmarkModels.#ctor*:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels.#ctor*
        name: BenchmarkModels
        nameWithType: BenchmarkModels.BenchmarkModels
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.BenchmarkModels
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels.#ctor*
        name: BenchmarkModels
        nameWithType: BenchmarkModels.BenchmarkModels
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.BenchmarkModels
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.Models.BenchmarkModels.#ctor
  Refinity.Benchmark.Models.BenchmarkModels.Result*:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Result*
        name: Result
        nameWithType: BenchmarkModels.Result
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Result
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Result*
        name: Result
        nameWithType: BenchmarkModels.Result
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Result
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.Models.BenchmarkModels.Result
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
  Refinity.Benchmark.Models.BenchmarkModels.Method*:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Method*
        name: Method
        nameWithType: BenchmarkModels.Method
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Method
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Method*
        name: Method
        nameWithType: BenchmarkModels.Method
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Method
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.Models.BenchmarkModels.Method
  Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs*:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs*
        name: ElapsedTimeMs
        nameWithType: BenchmarkModels.ElapsedTimeMs
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs*
        name: ElapsedTimeMs
        nameWithType: BenchmarkModels.ElapsedTimeMs
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.Models.BenchmarkModels.ElapsedTimeMs
  System.Nullable{Exception}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: Exception
        name: Exception
        nameWithType: Exception
        qualifiedName: Exception
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    commentId: '!:System.Nullable{Exception}'
  Refinity.Benchmark.Models.BenchmarkModels.Exception*:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Exception*
        name: Exception
        nameWithType: BenchmarkModels.Exception
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Exception
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Exception*
        name: Exception
        nameWithType: BenchmarkModels.Exception
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Exception
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.Models.BenchmarkModels.Exception
  Refinity.Benchmark.Models.BenchmarkModels.Iterations*:
    name:
      CSharp:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Iterations*
        name: Iterations
        nameWithType: BenchmarkModels.Iterations
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Iterations
      VB:
      - id: Refinity.Benchmark.Models.BenchmarkModels.Iterations*
        name: Iterations
        nameWithType: BenchmarkModels.Iterations
        qualifiedName: Refinity.Benchmark.Models.BenchmarkModels.Iterations
    isDefinition: true
    commentId: Overload:Refinity.Benchmark.Models.BenchmarkModels.Iterations
  DateTime:
    name:
      CSharp:
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      VB:
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
    isDefinition: true
  Refinity.Conversion.LogEntry.Time*:
    name:
      CSharp:
      - id: Refinity.Conversion.LogEntry.Time*
        name: Time
        nameWithType: LogEntry.Time
        qualifiedName: Refinity.Conversion.LogEntry.Time
      VB:
      - id: Refinity.Conversion.LogEntry.Time*
        name: Time
        nameWithType: LogEntry.Time
        qualifiedName: Refinity.Conversion.LogEntry.Time
    isDefinition: true
    commentId: Overload:Refinity.Conversion.LogEntry.Time
  System.Nullable{System.String}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    commentId: '!:System.Nullable{System.String}'
  Refinity.Conversion.LogEntry.LogLevel*:
    name:
      CSharp:
      - id: Refinity.Conversion.LogEntry.LogLevel*
        name: LogLevel
        nameWithType: LogEntry.LogLevel
        qualifiedName: Refinity.Conversion.LogEntry.LogLevel
      VB:
      - id: Refinity.Conversion.LogEntry.LogLevel*
        name: LogLevel
        nameWithType: LogEntry.LogLevel
        qualifiedName: Refinity.Conversion.LogEntry.LogLevel
    isDefinition: true
    commentId: Overload:Refinity.Conversion.LogEntry.LogLevel
  Refinity.Conversion.LogEntry.Message*:
    name:
      CSharp:
      - id: Refinity.Conversion.LogEntry.Message*
        name: Message
        nameWithType: LogEntry.Message
        qualifiedName: Refinity.Conversion.LogEntry.Message
      VB:
      - id: Refinity.Conversion.LogEntry.Message*
        name: Message
        nameWithType: LogEntry.Message
        qualifiedName: Refinity.Conversion.LogEntry.Message
    isDefinition: true
    commentId: Overload:Refinity.Conversion.LogEntry.Message
  Refinity.Conversion.LogEntry.Severity*:
    name:
      CSharp:
      - id: Refinity.Conversion.LogEntry.Severity*
        name: Severity
        nameWithType: LogEntry.Severity
        qualifiedName: Refinity.Conversion.LogEntry.Severity
      VB:
      - id: Refinity.Conversion.LogEntry.Severity*
        name: Severity
        nameWithType: LogEntry.Severity
        qualifiedName: Refinity.Conversion.LogEntry.Severity
    isDefinition: true
    commentId: Overload:Refinity.Conversion.LogEntry.Severity
  Refinity.Conversion.LogEntry:
    name:
      CSharp:
      - id: Refinity.Conversion.LogEntry
        name: LogEntry
        nameWithType: LogEntry
        qualifiedName: Refinity.Conversion.LogEntry
      VB:
      - id: Refinity.Conversion.LogEntry
        name: LogEntry
        nameWithType: LogEntry
        qualifiedName: Refinity.Conversion.LogEntry
    isDefinition: true
    commentId: T:Refinity.Conversion.LogEntry
  Refinity.Conversion.ConvertUtility.ConvertToBase64*:
    name:
      CSharp:
      - id: Refinity.Conversion.ConvertUtility.ConvertToBase64*
        name: ConvertToBase64
        nameWithType: ConvertUtility.ConvertToBase64
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertToBase64
      VB:
      - id: Refinity.Conversion.ConvertUtility.ConvertToBase64*
        name: ConvertToBase64
        nameWithType: ConvertUtility.ConvertToBase64
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertToBase64
    isDefinition: true
    commentId: Overload:Refinity.Conversion.ConvertUtility.ConvertToBase64
  List`1:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  List{{T}}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{``0}'
  Stream:
    name:
      CSharp:
      - id: Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: Stream
        isExternal: true
      VB:
      - id: Stream
        name: Stream
        nameWithType: Stream
        qualifiedName: Stream
        isExternal: true
    isDefinition: true
    commentId: '!:Stream'
  System.Char:
    name:
      CSharp:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
      VB:
      - id: System.Char
        name: Char
        nameWithType: Char
        qualifiedName: System.Char
        isExternal: true
    isDefinition: true
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
  Refinity.Conversion.ConvertUtility.ConvertCsvToObject*:
    name:
      CSharp:
      - id: Refinity.Conversion.ConvertUtility.ConvertCsvToObject*
        name: ConvertCsvToObject
        nameWithType: ConvertUtility.ConvertCsvToObject
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertCsvToObject
      VB:
      - id: Refinity.Conversion.ConvertUtility.ConvertCsvToObject*
        name: ConvertCsvToObject
        nameWithType: ConvertUtility.ConvertCsvToObject
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertCsvToObject
    isDefinition: true
    commentId: Overload:Refinity.Conversion.ConvertUtility.ConvertCsvToObject
  DataTable:
    name:
      CSharp:
      - id: DataTable
        name: DataTable
        nameWithType: DataTable
        qualifiedName: DataTable
        isExternal: true
      VB:
      - id: DataTable
        name: DataTable
        nameWithType: DataTable
        qualifiedName: DataTable
        isExternal: true
    isDefinition: true
    commentId: '!:DataTable'
  Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable*:
    name:
      CSharp:
      - id: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable*
        name: ConvertCsvToDataTable
        nameWithType: ConvertUtility.ConvertCsvToDataTable
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable
      VB:
      - id: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable*
        name: ConvertCsvToDataTable
        nameWithType: ConvertUtility.ConvertCsvToDataTable
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable
    isDefinition: true
    commentId: Overload:Refinity.Conversion.ConvertUtility.ConvertCsvToDataTable
  System.Byte[]:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Refinity.Conversion.ConvertUtility.ConvertTextToCSV*:
    name:
      CSharp:
      - id: Refinity.Conversion.ConvertUtility.ConvertTextToCSV*
        name: ConvertTextToCSV
        nameWithType: ConvertUtility.ConvertTextToCSV
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertTextToCSV
      VB:
      - id: Refinity.Conversion.ConvertUtility.ConvertTextToCSV*
        name: ConvertTextToCSV
        nameWithType: ConvertUtility.ConvertTextToCSV
        qualifiedName: Refinity.Conversion.ConvertUtility.ConvertTextToCSV
    isDefinition: true
    commentId: Overload:Refinity.Conversion.ConvertUtility.ConvertTextToCSV
  Refinity.Conversion.ConvertUtility:
    name:
      CSharp:
      - id: Refinity.Conversion.ConvertUtility
        name: ConvertUtility
        nameWithType: ConvertUtility
        qualifiedName: Refinity.Conversion.ConvertUtility
      VB:
      - id: Refinity.Conversion.ConvertUtility
        name: ConvertUtility
        nameWithType: ConvertUtility
        qualifiedName: Refinity.Conversion.ConvertUtility
    isDefinition: true
    commentId: T:Refinity.Conversion.ConvertUtility
  Refinity.Conversion:
    name:
      CSharp:
      - name: Refinity.Conversion
        nameWithType: Refinity.Conversion
        qualifiedName: Refinity.Conversion
      VB:
      - name: Refinity.Conversion
        nameWithType: Refinity.Conversion
        qualifiedName: Refinity.Conversion
    isDefinition: true
    commentId: N:Refinity.Conversion
  Refinity.Date.DateUtility.Add*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.Add*
        name: Add
        nameWithType: DateUtility.Add
        qualifiedName: Refinity.Date.DateUtility.Add
      VB:
      - id: Refinity.Date.DateUtility.Add*
        name: Add
        nameWithType: DateUtility.Add
        qualifiedName: Refinity.Date.DateUtility.Add
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.Add
  Refinity.Date.DateUtility.CalculateAge*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.CalculateAge*
        name: CalculateAge
        nameWithType: DateUtility.CalculateAge
        qualifiedName: Refinity.Date.DateUtility.CalculateAge
      VB:
      - id: Refinity.Date.DateUtility.CalculateAge*
        name: CalculateAge
        nameWithType: DateUtility.CalculateAge
        qualifiedName: Refinity.Date.DateUtility.CalculateAge
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.CalculateAge
  Refinity.Date.DateUtility.DeserializeDateTime*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.DeserializeDateTime*
        name: DeserializeDateTime
        nameWithType: DateUtility.DeserializeDateTime
        qualifiedName: Refinity.Date.DateUtility.DeserializeDateTime
      VB:
      - id: Refinity.Date.DateUtility.DeserializeDateTime*
        name: DeserializeDateTime
        nameWithType: DateUtility.DeserializeDateTime
        qualifiedName: Refinity.Date.DateUtility.DeserializeDateTime
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.DeserializeDateTime
  Refinity.Date.DateUtility.FirstDayOfMonth*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.FirstDayOfMonth*
        name: FirstDayOfMonth
        nameWithType: DateUtility.FirstDayOfMonth
        qualifiedName: Refinity.Date.DateUtility.FirstDayOfMonth
      VB:
      - id: Refinity.Date.DateUtility.FirstDayOfMonth*
        name: FirstDayOfMonth
        nameWithType: DateUtility.FirstDayOfMonth
        qualifiedName: Refinity.Date.DateUtility.FirstDayOfMonth
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.FirstDayOfMonth
  DateRangeModel:
    name:
      CSharp:
      - id: DateRangeModel
        name: DateRangeModel
        nameWithType: DateRangeModel
        qualifiedName: DateRangeModel
      VB:
      - id: DateRangeModel
        name: DateRangeModel
        nameWithType: DateRangeModel
        qualifiedName: DateRangeModel
    isDefinition: true
    commentId: T:DateRangeModel
  Refinity.Date.DateUtility.GetDateRange*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.GetDateRange*
        name: GetDateRange
        nameWithType: DateUtility.GetDateRange
        qualifiedName: Refinity.Date.DateUtility.GetDateRange
      VB:
      - id: Refinity.Date.DateUtility.GetDateRange*
        name: GetDateRange
        nameWithType: DateUtility.GetDateRange
        qualifiedName: Refinity.Date.DateUtility.GetDateRange
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.GetDateRange
  Refinity.Date.DateUtility.GetWeekNumber*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.GetWeekNumber*
        name: GetWeekNumber
        nameWithType: DateUtility.GetWeekNumber
        qualifiedName: Refinity.Date.DateUtility.GetWeekNumber
      VB:
      - id: Refinity.Date.DateUtility.GetWeekNumber*
        name: GetWeekNumber
        nameWithType: DateUtility.GetWeekNumber
        qualifiedName: Refinity.Date.DateUtility.GetWeekNumber
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.GetWeekNumber
  DateTime[]:
    name:
      CSharp:
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Refinity.Date.DateUtility.GetDateRangeFromWeekNumber*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber*
        name: GetDateRangeFromWeekNumber
        nameWithType: DateUtility.GetDateRangeFromWeekNumber
        qualifiedName: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber
      VB:
      - id: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber*
        name: GetDateRangeFromWeekNumber
        nameWithType: DateUtility.GetDateRangeFromWeekNumber
        qualifiedName: Refinity.Date.DateUtility.GetDateRangeFromWeekNumber
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.GetDateRangeFromWeekNumber
  Refinity.Date.DateUtility.GetDifference*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.GetDifference*
        name: GetDifference
        nameWithType: DateUtility.GetDifference
        qualifiedName: Refinity.Date.DateUtility.GetDifference
      VB:
      - id: Refinity.Date.DateUtility.GetDifference*
        name: GetDifference
        nameWithType: DateUtility.GetDifference
        qualifiedName: Refinity.Date.DateUtility.GetDifference
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.GetDifference
  Refinity.Date.DateUtility.LastDayOfMonth*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.LastDayOfMonth*
        name: LastDayOfMonth
        nameWithType: DateUtility.LastDayOfMonth
        qualifiedName: Refinity.Date.DateUtility.LastDayOfMonth
      VB:
      - id: Refinity.Date.DateUtility.LastDayOfMonth*
        name: LastDayOfMonth
        nameWithType: DateUtility.LastDayOfMonth
        qualifiedName: Refinity.Date.DateUtility.LastDayOfMonth
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.LastDayOfMonth
  Refinity.Date.DateUtility.QuarterlyFromMonth*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.QuarterlyFromMonth*
        name: QuarterlyFromMonth
        nameWithType: DateUtility.QuarterlyFromMonth
        qualifiedName: Refinity.Date.DateUtility.QuarterlyFromMonth
      VB:
      - id: Refinity.Date.DateUtility.QuarterlyFromMonth*
        name: QuarterlyFromMonth
        nameWithType: DateUtility.QuarterlyFromMonth
        qualifiedName: Refinity.Date.DateUtility.QuarterlyFromMonth
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.QuarterlyFromMonth
  Months:
    name:
      CSharp:
      - id: Months
        name: Months
        nameWithType: Months
        qualifiedName: Months
      VB:
      - id: Months
        name: Months
        nameWithType: Months
        qualifiedName: Months
    isDefinition: true
    commentId: T:Months
  Refinity.Date.DateUtility.QuarterFromMonth*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.QuarterFromMonth*
        name: QuarterFromMonth
        nameWithType: DateUtility.QuarterFromMonth
        qualifiedName: Refinity.Date.DateUtility.QuarterFromMonth
      VB:
      - id: Refinity.Date.DateUtility.QuarterFromMonth*
        name: QuarterFromMonth
        nameWithType: DateUtility.QuarterFromMonth
        qualifiedName: Refinity.Date.DateUtility.QuarterFromMonth
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.QuarterFromMonth
  Refinity.Date.DateUtility.Subtract*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.Subtract*
        name: Subtract
        nameWithType: DateUtility.Subtract
        qualifiedName: Refinity.Date.DateUtility.Subtract
      VB:
      - id: Refinity.Date.DateUtility.Subtract*
        name: Subtract
        nameWithType: DateUtility.Subtract
        qualifiedName: Refinity.Date.DateUtility.Subtract
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.Subtract
  Refinity.Date.DateUtility.SerializeDateTime*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.SerializeDateTime*
        name: SerializeDateTime
        nameWithType: DateUtility.SerializeDateTime
        qualifiedName: Refinity.Date.DateUtility.SerializeDateTime
      VB:
      - id: Refinity.Date.DateUtility.SerializeDateTime*
        name: SerializeDateTime
        nameWithType: DateUtility.SerializeDateTime
        qualifiedName: Refinity.Date.DateUtility.SerializeDateTime
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.SerializeDateTime
  System.Nullable{DateTime}:
    name:
      CSharp:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Nullable`1
        name: Nullable
        nameWithType: Nullable
        qualifiedName: System.Nullable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: DateTime
        name: DateTime
        nameWithType: DateTime
        qualifiedName: DateTime
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Nullable`1
    commentId: '!:System.Nullable{DateTime}'
  Refinity.Date.DateUtility.ToDateTime*:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility.ToDateTime*
        name: ToDateTime
        nameWithType: DateUtility.ToDateTime
        qualifiedName: Refinity.Date.DateUtility.ToDateTime
      VB:
      - id: Refinity.Date.DateUtility.ToDateTime*
        name: ToDateTime
        nameWithType: DateUtility.ToDateTime
        qualifiedName: Refinity.Date.DateUtility.ToDateTime
    isDefinition: true
    commentId: Overload:Refinity.Date.DateUtility.ToDateTime
  Refinity.Date.DateUtility:
    name:
      CSharp:
      - id: Refinity.Date.DateUtility
        name: DateUtility
        nameWithType: DateUtility
        qualifiedName: Refinity.Date.DateUtility
      VB:
      - id: Refinity.Date.DateUtility
        name: DateUtility
        nameWithType: DateUtility
        qualifiedName: Refinity.Date.DateUtility
    isDefinition: true
    commentId: T:Refinity.Date.DateUtility
  Refinity.Date:
    name:
      CSharp:
      - name: Refinity.Date
        nameWithType: Refinity.Date
        qualifiedName: Refinity.Date
      VB:
      - name: Refinity.Date
        nameWithType: Refinity.Date
        qualifiedName: Refinity.Date
    isDefinition: true
    commentId: N:Refinity.Date
  Refinity.Finance.FinanceUtility.DifferencePercentage*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.DifferencePercentage*
        name: DifferencePercentage
        nameWithType: FinanceUtility.DifferencePercentage
        qualifiedName: Refinity.Finance.FinanceUtility.DifferencePercentage
      VB:
      - id: Refinity.Finance.FinanceUtility.DifferencePercentage*
        name: DifferencePercentage
        nameWithType: FinanceUtility.DifferencePercentage
        qualifiedName: Refinity.Finance.FinanceUtility.DifferencePercentage
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.DifferencePercentage
  Refinity.Finance.FinanceUtility.CalculateInterest*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.CalculateInterest*
        name: CalculateInterest
        nameWithType: FinanceUtility.CalculateInterest
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateInterest
      VB:
      - id: Refinity.Finance.FinanceUtility.CalculateInterest*
        name: CalculateInterest
        nameWithType: FinanceUtility.CalculateInterest
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateInterest
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.CalculateInterest
  Refinity.Finance.FinanceUtility.ApplyTax*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.ApplyTax*
        name: ApplyTax
        nameWithType: FinanceUtility.ApplyTax
        qualifiedName: Refinity.Finance.FinanceUtility.ApplyTax
      VB:
      - id: Refinity.Finance.FinanceUtility.ApplyTax*
        name: ApplyTax
        nameWithType: FinanceUtility.ApplyTax
        qualifiedName: Refinity.Finance.FinanceUtility.ApplyTax
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.ApplyTax
  Refinity.Finance.FinanceUtility.DaysUntilDue*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.DaysUntilDue*
        name: DaysUntilDue
        nameWithType: FinanceUtility.DaysUntilDue
        qualifiedName: Refinity.Finance.FinanceUtility.DaysUntilDue
      VB:
      - id: Refinity.Finance.FinanceUtility.DaysUntilDue*
        name: DaysUntilDue
        nameWithType: FinanceUtility.DaysUntilDue
        qualifiedName: Refinity.Finance.FinanceUtility.DaysUntilDue
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.DaysUntilDue
  Refinity.Finance.FinanceUtility.BreakEvenPoint*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.BreakEvenPoint*
        name: BreakEvenPoint
        nameWithType: FinanceUtility.BreakEvenPoint
        qualifiedName: Refinity.Finance.FinanceUtility.BreakEvenPoint
      VB:
      - id: Refinity.Finance.FinanceUtility.BreakEvenPoint*
        name: BreakEvenPoint
        nameWithType: FinanceUtility.BreakEvenPoint
        qualifiedName: Refinity.Finance.FinanceUtility.BreakEvenPoint
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.BreakEvenPoint
  Refinity.Finance.FinanceUtility.CalculateCompoundInterest*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.CalculateCompoundInterest*
        name: CalculateCompoundInterest
        nameWithType: FinanceUtility.CalculateCompoundInterest
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateCompoundInterest
      VB:
      - id: Refinity.Finance.FinanceUtility.CalculateCompoundInterest*
        name: CalculateCompoundInterest
        nameWithType: FinanceUtility.CalculateCompoundInterest
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateCompoundInterest
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.CalculateCompoundInterest
  Refinity.Finance.FinanceUtility.ToCurrency*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.ToCurrency*
        name: ToCurrency
        nameWithType: FinanceUtility.ToCurrency
        qualifiedName: Refinity.Finance.FinanceUtility.ToCurrency
      VB:
      - id: Refinity.Finance.FinanceUtility.ToCurrency*
        name: ToCurrency
        nameWithType: FinanceUtility.ToCurrency
        qualifiedName: Refinity.Finance.FinanceUtility.ToCurrency
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.ToCurrency
  CultureInfo:
    name:
      CSharp:
      - id: CultureInfo
        name: CultureInfo
        nameWithType: CultureInfo
        qualifiedName: CultureInfo
        isExternal: true
      VB:
      - id: CultureInfo
        name: CultureInfo
        nameWithType: CultureInfo
        qualifiedName: CultureInfo
        isExternal: true
    isDefinition: true
    commentId: '!:CultureInfo'
  Refinity.Finance.FinanceUtility.PredictFutureValue*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.PredictFutureValue*
        name: PredictFutureValue
        nameWithType: FinanceUtility.PredictFutureValue
        qualifiedName: Refinity.Finance.FinanceUtility.PredictFutureValue
      VB:
      - id: Refinity.Finance.FinanceUtility.PredictFutureValue*
        name: PredictFutureValue
        nameWithType: FinanceUtility.PredictFutureValue
        qualifiedName: Refinity.Finance.FinanceUtility.PredictFutureValue
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.PredictFutureValue
  List{System.Double}:
    name:
      CSharp:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: List`1
        name: List
        nameWithType: List
        qualifiedName: List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: List`1
    commentId: '!:List{System.Double}'
  Refinity.Finance.FinanceUtility.PaybackPeriod*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.PaybackPeriod*
        name: PaybackPeriod
        nameWithType: FinanceUtility.PaybackPeriod
        qualifiedName: Refinity.Finance.FinanceUtility.PaybackPeriod
      VB:
      - id: Refinity.Finance.FinanceUtility.PaybackPeriod*
        name: PaybackPeriod
        nameWithType: FinanceUtility.PaybackPeriod
        qualifiedName: Refinity.Finance.FinanceUtility.PaybackPeriod
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.PaybackPeriod
  Refinity.Finance.FinanceUtility.CalculateSimpleInterest*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.CalculateSimpleInterest*
        name: CalculateSimpleInterest
        nameWithType: FinanceUtility.CalculateSimpleInterest
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateSimpleInterest
      VB:
      - id: Refinity.Finance.FinanceUtility.CalculateSimpleInterest*
        name: CalculateSimpleInterest
        nameWithType: FinanceUtility.CalculateSimpleInterest
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateSimpleInterest
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.CalculateSimpleInterest
  Refinity.Finance.FinanceUtility.CalculateNetPresentValue*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.CalculateNetPresentValue*
        name: CalculateNetPresentValue
        nameWithType: FinanceUtility.CalculateNetPresentValue
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateNetPresentValue
      VB:
      - id: Refinity.Finance.FinanceUtility.CalculateNetPresentValue*
        name: CalculateNetPresentValue
        nameWithType: FinanceUtility.CalculateNetPresentValue
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateNetPresentValue
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.CalculateNetPresentValue
  Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn*:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn*
        name: CalculateInternalRateOfReturn
        nameWithType: FinanceUtility.CalculateInternalRateOfReturn
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn
      VB:
      - id: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn*
        name: CalculateInternalRateOfReturn
        nameWithType: FinanceUtility.CalculateInternalRateOfReturn
        qualifiedName: Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn
    isDefinition: true
    commentId: Overload:Refinity.Finance.FinanceUtility.CalculateInternalRateOfReturn
  Refinity.Finance.FinanceUtility:
    name:
      CSharp:
      - id: Refinity.Finance.FinanceUtility
        name: FinanceUtility
        nameWithType: FinanceUtility
        qualifiedName: Refinity.Finance.FinanceUtility
      VB:
      - id: Refinity.Finance.FinanceUtility
        name: FinanceUtility
        nameWithType: FinanceUtility
        qualifiedName: Refinity.Finance.FinanceUtility
    isDefinition: true
    commentId: T:Refinity.Finance.FinanceUtility
  Refinity.Finance:
    name:
      CSharp:
      - name: Refinity.Finance
        nameWithType: Refinity.Finance
        qualifiedName: Refinity.Finance
      VB:
      - name: Refinity.Finance
        nameWithType: Refinity.Finance
        qualifiedName: Refinity.Finance
    isDefinition: true
    commentId: N:Refinity.Finance
  Refinity.Geometry.GeometryUtility.AreaOfCircle*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfCircle*
        name: AreaOfCircle
        nameWithType: GeometryUtility.AreaOfCircle
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfCircle
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfCircle*
        name: AreaOfCircle
        nameWithType: GeometryUtility.AreaOfCircle
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfCircle
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfCircle
  Refinity.Geometry.GeometryUtility.AreaOfTriangle*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfTriangle*
        name: AreaOfTriangle
        nameWithType: GeometryUtility.AreaOfTriangle
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfTriangle
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfTriangle*
        name: AreaOfTriangle
        nameWithType: GeometryUtility.AreaOfTriangle
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfTriangle
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfTriangle
  Refinity.Geometry.GeometryUtility.AreaOfRectangle*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfRectangle*
        name: AreaOfRectangle
        nameWithType: GeometryUtility.AreaOfRectangle
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfRectangle
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfRectangle*
        name: AreaOfRectangle
        nameWithType: GeometryUtility.AreaOfRectangle
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfRectangle
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfRectangle
  Refinity.Geometry.GeometryUtility.AreaOfSquare*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfSquare*
        name: AreaOfSquare
        nameWithType: GeometryUtility.AreaOfSquare
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfSquare
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfSquare*
        name: AreaOfSquare
        nameWithType: GeometryUtility.AreaOfSquare
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfSquare
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfSquare
  Refinity.Geometry.GeometryUtility.AreaOfTrapezoid*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid*
        name: AreaOfTrapezoid
        nameWithType: GeometryUtility.AreaOfTrapezoid
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid*
        name: AreaOfTrapezoid
        nameWithType: GeometryUtility.AreaOfTrapezoid
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfTrapezoid
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfTrapezoid
  Refinity.Geometry.GeometryUtility.AreaOfParallelogram*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfParallelogram*
        name: AreaOfParallelogram
        nameWithType: GeometryUtility.AreaOfParallelogram
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfParallelogram
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfParallelogram*
        name: AreaOfParallelogram
        nameWithType: GeometryUtility.AreaOfParallelogram
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfParallelogram
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfParallelogram
  Refinity.Geometry.GeometryUtility.AreaOfRhombus*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfRhombus*
        name: AreaOfRhombus
        nameWithType: GeometryUtility.AreaOfRhombus
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfRhombus
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfRhombus*
        name: AreaOfRhombus
        nameWithType: GeometryUtility.AreaOfRhombus
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfRhombus
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfRhombus
  Refinity.Geometry.GeometryUtility.AreaOfSector*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.AreaOfSector*
        name: AreaOfSector
        nameWithType: GeometryUtility.AreaOfSector
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfSector
      VB:
      - id: Refinity.Geometry.GeometryUtility.AreaOfSector*
        name: AreaOfSector
        nameWithType: GeometryUtility.AreaOfSector
        qualifiedName: Refinity.Geometry.GeometryUtility.AreaOfSector
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.AreaOfSector
  Refinity.Geometry.GeometryUtility.ToCartesianCoordinates*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates*
        name: ToCartesianCoordinates
        nameWithType: GeometryUtility.ToCartesianCoordinates
        qualifiedName: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates
      VB:
      - id: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates*
        name: ToCartesianCoordinates
        nameWithType: GeometryUtility.ToCartesianCoordinates
        qualifiedName: Refinity.Geometry.GeometryUtility.ToCartesianCoordinates
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.ToCartesianCoordinates
  Refinity.Geometry.GeometryUtility.ToPolarCoordinates*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.ToPolarCoordinates*
        name: ToPolarCoordinates
        nameWithType: GeometryUtility.ToPolarCoordinates
        qualifiedName: Refinity.Geometry.GeometryUtility.ToPolarCoordinates
      VB:
      - id: Refinity.Geometry.GeometryUtility.ToPolarCoordinates*
        name: ToPolarCoordinates
        nameWithType: GeometryUtility.ToPolarCoordinates
        qualifiedName: Refinity.Geometry.GeometryUtility.ToPolarCoordinates
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.ToPolarCoordinates
  Refinity.Geometry.GeometryUtility.CalculateSlope*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateSlope*
        name: CalculateSlope
        nameWithType: GeometryUtility.CalculateSlope
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateSlope
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateSlope*
        name: CalculateSlope
        nameWithType: GeometryUtility.CalculateSlope
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateSlope
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateSlope
  Refinity.Geometry.GeometryUtility.CalculateDistance*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateDistance*
        name: CalculateDistance
        nameWithType: GeometryUtility.CalculateDistance
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateDistance
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateDistance*
        name: CalculateDistance
        nameWithType: GeometryUtility.CalculateDistance
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateDistance
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateDistance
  Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter*
        name: CalculateSquarePerimeter
        nameWithType: GeometryUtility.CalculateSquarePerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter*
        name: CalculateSquarePerimeter
        nameWithType: GeometryUtility.CalculateSquarePerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateSquarePerimeter
  Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter*
        name: CalculateRectanglePerimeter
        nameWithType: GeometryUtility.CalculateRectanglePerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter*
        name: CalculateRectanglePerimeter
        nameWithType: GeometryUtility.CalculateRectanglePerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateRectanglePerimeter
  Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal*
        name: CalculateRectangleDiagonal
        nameWithType: GeometryUtility.CalculateRectangleDiagonal
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal*
        name: CalculateRectangleDiagonal
        nameWithType: GeometryUtility.CalculateRectangleDiagonal
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateRectangleDiagonal
  Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter*
        name: CalculateTrapezoidPerimeter
        nameWithType: GeometryUtility.CalculateTrapezoidPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter*
        name: CalculateTrapezoidPerimeter
        nameWithType: GeometryUtility.CalculateTrapezoidPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateTrapezoidPerimeter
  Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter*
        name: CalculateParallelogramPerimeter
        nameWithType: GeometryUtility.CalculateParallelogramPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter*
        name: CalculateParallelogramPerimeter
        nameWithType: GeometryUtility.CalculateParallelogramPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateParallelogramPerimeter
  Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter*
        name: CalculateRhombusPerimeter
        nameWithType: GeometryUtility.CalculateRhombusPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter*
        name: CalculateRhombusPerimeter
        nameWithType: GeometryUtility.CalculateRhombusPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateRhombusPerimeter
  Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter*
        name: CalculateIsoscelesTrapezoidPerimeter
        nameWithType: GeometryUtility.CalculateIsoscelesTrapezoidPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter*
        name: CalculateIsoscelesTrapezoidPerimeter
        nameWithType: GeometryUtility.CalculateIsoscelesTrapezoidPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidPerimeter
  Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide*
        name: CalculateIsoscelesTrapezoidSide
        nameWithType: GeometryUtility.CalculateIsoscelesTrapezoidSide
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide*
        name: CalculateIsoscelesTrapezoidSide
        nameWithType: GeometryUtility.CalculateIsoscelesTrapezoidSide
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateIsoscelesTrapezoidSide
  Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter*
        name: CalculateRightTrapezoidPerimeter
        nameWithType: GeometryUtility.CalculateRightTrapezoidPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter*
        name: CalculateRightTrapezoidPerimeter
        nameWithType: GeometryUtility.CalculateRightTrapezoidPerimeter
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidPerimeter
  Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal*:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal*
        name: CalculateRightTrapezoidDiagonal
        nameWithType: GeometryUtility.CalculateRightTrapezoidDiagonal
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal
      VB:
      - id: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal*
        name: CalculateRightTrapezoidDiagonal
        nameWithType: GeometryUtility.CalculateRightTrapezoidDiagonal
        qualifiedName: Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal
    isDefinition: true
    commentId: Overload:Refinity.Geometry.GeometryUtility.CalculateRightTrapezoidDiagonal
  Refinity.Geometry.GeometryUtility:
    name:
      CSharp:
      - id: Refinity.Geometry.GeometryUtility
        name: GeometryUtility
        nameWithType: GeometryUtility
        qualifiedName: Refinity.Geometry.GeometryUtility
      VB:
      - id: Refinity.Geometry.GeometryUtility
        name: GeometryUtility
        nameWithType: GeometryUtility
        qualifiedName: Refinity.Geometry.GeometryUtility
    isDefinition: true
    commentId: T:Refinity.Geometry.GeometryUtility
  Refinity.Geometry:
    name:
      CSharp:
      - name: Refinity.Geometry
        nameWithType: Refinity.Geometry
        qualifiedName: Refinity.Geometry
      VB:
      - name: Refinity.Geometry
        nameWithType: Refinity.Geometry
        qualifiedName: Refinity.Geometry
    isDefinition: true
    commentId: N:Refinity.Geometry
  Refinity.Logging.Enums:
    name:
      CSharp:
      - name: Refinity.Logging.Enums
        nameWithType: Refinity.Logging.Enums
        qualifiedName: Refinity.Logging.Enums
      VB:
      - name: Refinity.Logging.Enums
        nameWithType: Refinity.Logging.Enums
        qualifiedName: Refinity.Logging.Enums
    isDefinition: true
    commentId: N:Refinity.Logging.Enums
  Refinity.Logging.Enums.LogFileType:
    name:
      CSharp:
      - id: Refinity.Logging.Enums.LogFileType
        name: LogFileType
        nameWithType: LogFileType
        qualifiedName: Refinity.Logging.Enums.LogFileType
      VB:
      - id: Refinity.Logging.Enums.LogFileType
        name: LogFileType
        nameWithType: LogFileType
        qualifiedName: Refinity.Logging.Enums.LogFileType
    isDefinition: true
    parent: Refinity.Logging.Enums
    commentId: T:Refinity.Logging.Enums.LogFileType
  Refinity.Logging.LoggingUtility.#ctor*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.#ctor*
        name: LoggingUtility
        nameWithType: LoggingUtility.LoggingUtility
        qualifiedName: Refinity.Logging.LoggingUtility.LoggingUtility
      VB:
      - id: Refinity.Logging.LoggingUtility.#ctor*
        name: LoggingUtility
        nameWithType: LoggingUtility.LoggingUtility
        qualifiedName: Refinity.Logging.LoggingUtility.LoggingUtility
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.#ctor
  Refinity.Logging.LoggingUtility.Info*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.Info*
        name: Info
        nameWithType: LoggingUtility.Info
        qualifiedName: Refinity.Logging.LoggingUtility.Info
      VB:
      - id: Refinity.Logging.LoggingUtility.Info*
        name: Info
        nameWithType: LoggingUtility.Info
        qualifiedName: Refinity.Logging.LoggingUtility.Info
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.Info
  Refinity.Logging.LoggingUtility.Debug*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.Debug*
        name: Debug
        nameWithType: LoggingUtility.Debug
        qualifiedName: Refinity.Logging.LoggingUtility.Debug
      VB:
      - id: Refinity.Logging.LoggingUtility.Debug*
        name: Debug
        nameWithType: LoggingUtility.Debug
        qualifiedName: Refinity.Logging.LoggingUtility.Debug
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.Debug
  Refinity.Logging.LoggingUtility.Warn*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.Warn*
        name: Warn
        nameWithType: LoggingUtility.Warn
        qualifiedName: Refinity.Logging.LoggingUtility.Warn
      VB:
      - id: Refinity.Logging.LoggingUtility.Warn*
        name: Warn
        nameWithType: LoggingUtility.Warn
        qualifiedName: Refinity.Logging.LoggingUtility.Warn
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.Warn
  Refinity.Logging.LoggingUtility.Error*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.Error*
        name: Error
        nameWithType: LoggingUtility.Error
        qualifiedName: Refinity.Logging.LoggingUtility.Error
      VB:
      - id: Refinity.Logging.LoggingUtility.Error*
        name: Error
        nameWithType: LoggingUtility.Error
        qualifiedName: Refinity.Logging.LoggingUtility.Error
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.Error
  Refinity.Logging.LoggingUtility.Fatal*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.Fatal*
        name: Fatal
        nameWithType: LoggingUtility.Fatal
        qualifiedName: Refinity.Logging.LoggingUtility.Fatal
      VB:
      - id: Refinity.Logging.LoggingUtility.Fatal*
        name: Fatal
        nameWithType: LoggingUtility.Fatal
        qualifiedName: Refinity.Logging.LoggingUtility.Fatal
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.Fatal
  Refinity.Logging.LoggingUtility.ConvertLogToCSV*:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility.ConvertLogToCSV*
        name: ConvertLogToCSV
        nameWithType: LoggingUtility.ConvertLogToCSV
        qualifiedName: Refinity.Logging.LoggingUtility.ConvertLogToCSV
      VB:
      - id: Refinity.Logging.LoggingUtility.ConvertLogToCSV*
        name: ConvertLogToCSV
        nameWithType: LoggingUtility.ConvertLogToCSV
        qualifiedName: Refinity.Logging.LoggingUtility.ConvertLogToCSV
    isDefinition: true
    commentId: Overload:Refinity.Logging.LoggingUtility.ConvertLogToCSV
  Refinity.Logging.LoggingUtility:
    name:
      CSharp:
      - id: Refinity.Logging.LoggingUtility
        name: LoggingUtility
        nameWithType: LoggingUtility
        qualifiedName: Refinity.Logging.LoggingUtility
      VB:
      - id: Refinity.Logging.LoggingUtility
        name: LoggingUtility
        nameWithType: LoggingUtility
        qualifiedName: Refinity.Logging.LoggingUtility
    isDefinition: true
    commentId: T:Refinity.Logging.LoggingUtility
  Refinity.Logging:
    name:
      CSharp:
      - name: Refinity.Logging
        nameWithType: Refinity.Logging
        qualifiedName: Refinity.Logging
      VB:
      - name: Refinity.Logging
        nameWithType: Refinity.Logging
        qualifiedName: Refinity.Logging
    isDefinition: true
    commentId: N:Refinity.Logging
  Refinity.Logging.Enums.LogLevel:
    name:
      CSharp:
      - id: Refinity.Logging.Enums.LogLevel
        name: LogLevel
        nameWithType: LogLevel
        qualifiedName: Refinity.Logging.Enums.LogLevel
      VB:
      - id: Refinity.Logging.Enums.LogLevel
        name: LogLevel
        nameWithType: LogLevel
        qualifiedName: Refinity.Logging.Enums.LogLevel
    isDefinition: true
    parent: Refinity.Logging.Enums
    commentId: T:Refinity.Logging.Enums.LogLevel
  ConsoleColor:
    name:
      CSharp:
      - id: ConsoleColor
        name: ConsoleColor
        nameWithType: ConsoleColor
        qualifiedName: ConsoleColor
        isExternal: true
      VB:
      - id: ConsoleColor
        name: ConsoleColor
        nameWithType: ConsoleColor
        qualifiedName: ConsoleColor
        isExternal: true
    isDefinition: true
    commentId: '!:ConsoleColor'
  Refinity.Logging.Models.LogColorHelper.GetLogLevelColor*:
    name:
      CSharp:
      - id: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor*
        name: GetLogLevelColor
        nameWithType: LogColorHelper.GetLogLevelColor
        qualifiedName: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor
      VB:
      - id: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor*
        name: GetLogLevelColor
        nameWithType: LogColorHelper.GetLogLevelColor
        qualifiedName: Refinity.Logging.Models.LogColorHelper.GetLogLevelColor
    isDefinition: true
    commentId: Overload:Refinity.Logging.Models.LogColorHelper.GetLogLevelColor
  Refinity.Logging.Models.LogColorHelper:
    name:
      CSharp:
      - id: Refinity.Logging.Models.LogColorHelper
        name: LogColorHelper
        nameWithType: LogColorHelper
        qualifiedName: Refinity.Logging.Models.LogColorHelper
      VB:
      - id: Refinity.Logging.Models.LogColorHelper
        name: LogColorHelper
        nameWithType: LogColorHelper
        qualifiedName: Refinity.Logging.Models.LogColorHelper
    isDefinition: true
    commentId: T:Refinity.Logging.Models.LogColorHelper
  Refinity.Logging.Models:
    name:
      CSharp:
      - name: Refinity.Logging.Models
        nameWithType: Refinity.Logging.Models
        qualifiedName: Refinity.Logging.Models
      VB:
      - name: Refinity.Logging.Models
        nameWithType: Refinity.Logging.Models
        qualifiedName: Refinity.Logging.Models
    isDefinition: true
    commentId: N:Refinity.Logging.Models
  Refinity.Math.MathUtility.Factorial*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Factorial*
        name: Factorial
        nameWithType: MathUtility.Factorial
        qualifiedName: Refinity.Math.MathUtility.Factorial
      VB:
      - id: Refinity.Math.MathUtility.Factorial*
        name: Factorial
        nameWithType: MathUtility.Factorial
        qualifiedName: Refinity.Math.MathUtility.Factorial
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Factorial
  Refinity.Math.MathUtility.IsPrime*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.IsPrime*
        name: IsPrime
        nameWithType: MathUtility.IsPrime
        qualifiedName: Refinity.Math.MathUtility.IsPrime
      VB:
      - id: Refinity.Math.MathUtility.IsPrime*
        name: IsPrime
        nameWithType: MathUtility.IsPrime
        qualifiedName: Refinity.Math.MathUtility.IsPrime
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.IsPrime
  Refinity.Math.MathUtility.IsEven*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.IsEven*
        name: IsEven
        nameWithType: MathUtility.IsEven
        qualifiedName: Refinity.Math.MathUtility.IsEven
      VB:
      - id: Refinity.Math.MathUtility.IsEven*
        name: IsEven
        nameWithType: MathUtility.IsEven
        qualifiedName: Refinity.Math.MathUtility.IsEven
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.IsEven
  Refinity.Math.MathUtility.IsOdd*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.IsOdd*
        name: IsOdd
        nameWithType: MathUtility.IsOdd
        qualifiedName: Refinity.Math.MathUtility.IsOdd
      VB:
      - id: Refinity.Math.MathUtility.IsOdd*
        name: IsOdd
        nameWithType: MathUtility.IsOdd
        qualifiedName: Refinity.Math.MathUtility.IsOdd
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.IsOdd
  Refinity.Math.MathUtility.IsDivisibleBy*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.IsDivisibleBy*
        name: IsDivisibleBy
        nameWithType: MathUtility.IsDivisibleBy
        qualifiedName: Refinity.Math.MathUtility.IsDivisibleBy
      VB:
      - id: Refinity.Math.MathUtility.IsDivisibleBy*
        name: IsDivisibleBy
        nameWithType: MathUtility.IsDivisibleBy
        qualifiedName: Refinity.Math.MathUtility.IsDivisibleBy
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.IsDivisibleBy
  Refinity.Math.MathUtility.GreatestCommonDivisor*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.GreatestCommonDivisor*
        name: GreatestCommonDivisor
        nameWithType: MathUtility.GreatestCommonDivisor
        qualifiedName: Refinity.Math.MathUtility.GreatestCommonDivisor
      VB:
      - id: Refinity.Math.MathUtility.GreatestCommonDivisor*
        name: GreatestCommonDivisor
        nameWithType: MathUtility.GreatestCommonDivisor
        qualifiedName: Refinity.Math.MathUtility.GreatestCommonDivisor
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.GreatestCommonDivisor
  Refinity.Math.MathUtility.LeastCommonMultiple*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.LeastCommonMultiple*
        name: LeastCommonMultiple
        nameWithType: MathUtility.LeastCommonMultiple
        qualifiedName: Refinity.Math.MathUtility.LeastCommonMultiple
      VB:
      - id: Refinity.Math.MathUtility.LeastCommonMultiple*
        name: LeastCommonMultiple
        nameWithType: MathUtility.LeastCommonMultiple
        qualifiedName: Refinity.Math.MathUtility.LeastCommonMultiple
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.LeastCommonMultiple
  Refinity.Math.MathUtility.ConvertToBaseBinary*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.ConvertToBaseBinary*
        name: ConvertToBaseBinary
        nameWithType: MathUtility.ConvertToBaseBinary
        qualifiedName: Refinity.Math.MathUtility.ConvertToBaseBinary
      VB:
      - id: Refinity.Math.MathUtility.ConvertToBaseBinary*
        name: ConvertToBaseBinary
        nameWithType: MathUtility.ConvertToBaseBinary
        qualifiedName: Refinity.Math.MathUtility.ConvertToBaseBinary
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.ConvertToBaseBinary
  Refinity.Math.MathUtility.ConvertToBaseOctal*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.ConvertToBaseOctal*
        name: ConvertToBaseOctal
        nameWithType: MathUtility.ConvertToBaseOctal
        qualifiedName: Refinity.Math.MathUtility.ConvertToBaseOctal
      VB:
      - id: Refinity.Math.MathUtility.ConvertToBaseOctal*
        name: ConvertToBaseOctal
        nameWithType: MathUtility.ConvertToBaseOctal
        qualifiedName: Refinity.Math.MathUtility.ConvertToBaseOctal
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.ConvertToBaseOctal
  Refinity.Math.MathUtility.ConvertToBaseHexadecimal*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.ConvertToBaseHexadecimal*
        name: ConvertToBaseHexadecimal
        nameWithType: MathUtility.ConvertToBaseHexadecimal
        qualifiedName: Refinity.Math.MathUtility.ConvertToBaseHexadecimal
      VB:
      - id: Refinity.Math.MathUtility.ConvertToBaseHexadecimal*
        name: ConvertToBaseHexadecimal
        nameWithType: MathUtility.ConvertToBaseHexadecimal
        qualifiedName: Refinity.Math.MathUtility.ConvertToBaseHexadecimal
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.ConvertToBaseHexadecimal
  Refinity.Math.MathUtility.Fibonacci*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Fibonacci*
        name: Fibonacci
        nameWithType: MathUtility.Fibonacci
        qualifiedName: Refinity.Math.MathUtility.Fibonacci
      VB:
      - id: Refinity.Math.MathUtility.Fibonacci*
        name: Fibonacci
        nameWithType: MathUtility.Fibonacci
        qualifiedName: Refinity.Math.MathUtility.Fibonacci
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Fibonacci
  System.ValueTuple`2:
    name:
      CSharp:
      - id: System.ValueTuple`2
        name: (, )
        nameWithType: (, )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`2
        name: (, )
        nameWithType: (, )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
  System.ValueTuple{System.Double,System.Double}:
    name:
      CSharp:
      - id: System.ValueTuple`2
        name: (, )
        nameWithType: (, )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`2
        name: (, )
        nameWithType: (, )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.ValueTuple`2
    commentId: '!:System.ValueTuple{System.Double,System.Double}'
  System.Int32[]:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Refinity.Math.MathUtility.GetStandardDeviation*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.GetStandardDeviation*
        name: GetStandardDeviation
        nameWithType: MathUtility.GetStandardDeviation
        qualifiedName: Refinity.Math.MathUtility.GetStandardDeviation
      VB:
      - id: Refinity.Math.MathUtility.GetStandardDeviation*
        name: GetStandardDeviation
        nameWithType: MathUtility.GetStandardDeviation
        qualifiedName: Refinity.Math.MathUtility.GetStandardDeviation
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.GetStandardDeviation
  System.Double[]:
    name:
      CSharp:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  Refinity.Math:
    name:
      CSharp:
      - name: Refinity.Math
        nameWithType: Refinity.Math
        qualifiedName: Refinity.Math
      VB:
      - name: Refinity.Math
        nameWithType: Refinity.Math
        qualifiedName: Refinity.Math
    isDefinition: true
    commentId: N:Refinity.Math
  Refinity.Math.LinearRegressionModel:
    name:
      CSharp:
      - id: Refinity.Math.LinearRegressionModel
        name: LinearRegressionModel
        nameWithType: LinearRegressionModel
        qualifiedName: Refinity.Math.LinearRegressionModel
      VB:
      - id: Refinity.Math.LinearRegressionModel
        name: LinearRegressionModel
        nameWithType: LinearRegressionModel
        qualifiedName: Refinity.Math.LinearRegressionModel
    isDefinition: true
    parent: Refinity.Math
    commentId: T:Refinity.Math.LinearRegressionModel
  Refinity.Math.MathUtility.PerformLinearRegression*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.PerformLinearRegression*
        name: PerformLinearRegression
        nameWithType: MathUtility.PerformLinearRegression
        qualifiedName: Refinity.Math.MathUtility.PerformLinearRegression
      VB:
      - id: Refinity.Math.MathUtility.PerformLinearRegression*
        name: PerformLinearRegression
        nameWithType: MathUtility.PerformLinearRegression
        qualifiedName: Refinity.Math.MathUtility.PerformLinearRegression
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.PerformLinearRegression
  Func`2:
    name:
      CSharp:
      - id: Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:Func`2'
  Func{System.Double,System.Double}:
    name:
      CSharp:
      - id: Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: Func`2
        name: Func
        nameWithType: Func
        qualifiedName: Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: Func`2
    commentId: '!:Func{System.Double,System.Double}'
  Refinity.Math.MathUtility.SimpsonRuleIntegration*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.SimpsonRuleIntegration*
        name: SimpsonRuleIntegration
        nameWithType: MathUtility.SimpsonRuleIntegration
        qualifiedName: Refinity.Math.MathUtility.SimpsonRuleIntegration
      VB:
      - id: Refinity.Math.MathUtility.SimpsonRuleIntegration*
        name: SimpsonRuleIntegration
        nameWithType: MathUtility.SimpsonRuleIntegration
        qualifiedName: Refinity.Math.MathUtility.SimpsonRuleIntegration
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.SimpsonRuleIntegration
  Refinity.Math.MathUtility.NextPrime*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.NextPrime*
        name: NextPrime
        nameWithType: MathUtility.NextPrime
        qualifiedName: Refinity.Math.MathUtility.NextPrime
      VB:
      - id: Refinity.Math.MathUtility.NextPrime*
        name: NextPrime
        nameWithType: MathUtility.NextPrime
        qualifiedName: Refinity.Math.MathUtility.NextPrime
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.NextPrime
  Refinity.Math.MathUtility.PercentageOf*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.PercentageOf*
        name: PercentageOf
        nameWithType: MathUtility.PercentageOf
        qualifiedName: Refinity.Math.MathUtility.PercentageOf
      VB:
      - id: Refinity.Math.MathUtility.PercentageOf*
        name: PercentageOf
        nameWithType: MathUtility.PercentageOf
        qualifiedName: Refinity.Math.MathUtility.PercentageOf
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.PercentageOf
  Refinity.Math.MathUtility.IsApproximatelyEqualTo*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.IsApproximatelyEqualTo*
        name: IsApproximatelyEqualTo
        nameWithType: MathUtility.IsApproximatelyEqualTo
        qualifiedName: Refinity.Math.MathUtility.IsApproximatelyEqualTo
      VB:
      - id: Refinity.Math.MathUtility.IsApproximatelyEqualTo*
        name: IsApproximatelyEqualTo
        nameWithType: MathUtility.IsApproximatelyEqualTo
        qualifiedName: Refinity.Math.MathUtility.IsApproximatelyEqualTo
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.IsApproximatelyEqualTo
  Refinity.Math.MathUtility.Clamp*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Clamp*
        name: Clamp
        nameWithType: MathUtility.Clamp
        qualifiedName: Refinity.Math.MathUtility.Clamp
      VB:
      - id: Refinity.Math.MathUtility.Clamp*
        name: Clamp
        nameWithType: MathUtility.Clamp
        qualifiedName: Refinity.Math.MathUtility.Clamp
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Clamp
  Refinity.Math.MathUtility.Divisors*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Divisors*
        name: Divisors
        nameWithType: MathUtility.Divisors
        qualifiedName: Refinity.Math.MathUtility.Divisors
      VB:
      - id: Refinity.Math.MathUtility.Divisors*
        name: Divisors
        nameWithType: MathUtility.Divisors
        qualifiedName: Refinity.Math.MathUtility.Divisors
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Divisors
  Refinity.Math.MathUtility.Normalize*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Normalize*
        name: Normalize
        nameWithType: MathUtility.Normalize
        qualifiedName: Refinity.Math.MathUtility.Normalize
      VB:
      - id: Refinity.Math.MathUtility.Normalize*
        name: Normalize
        nameWithType: MathUtility.Normalize
        qualifiedName: Refinity.Math.MathUtility.Normalize
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Normalize
  Refinity.Math.MathUtility.LogBaseN*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.LogBaseN*
        name: LogBaseN
        nameWithType: MathUtility.LogBaseN
        qualifiedName: Refinity.Math.MathUtility.LogBaseN
      VB:
      - id: Refinity.Math.MathUtility.LogBaseN*
        name: LogBaseN
        nameWithType: MathUtility.LogBaseN
        qualifiedName: Refinity.Math.MathUtility.LogBaseN
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.LogBaseN
  Refinity.Math.MathUtility.IsInRange*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.IsInRange*
        name: IsInRange
        nameWithType: MathUtility.IsInRange
        qualifiedName: Refinity.Math.MathUtility.IsInRange
      VB:
      - id: Refinity.Math.MathUtility.IsInRange*
        name: IsInRange
        nameWithType: MathUtility.IsInRange
        qualifiedName: Refinity.Math.MathUtility.IsInRange
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.IsInRange
  Refinity.Math.MathUtility.ToStringPercentage*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.ToStringPercentage*
        name: ToStringPercentage
        nameWithType: MathUtility.ToStringPercentage
        qualifiedName: Refinity.Math.MathUtility.ToStringPercentage
      VB:
      - id: Refinity.Math.MathUtility.ToStringPercentage*
        name: ToStringPercentage
        nameWithType: MathUtility.ToStringPercentage
        qualifiedName: Refinity.Math.MathUtility.ToStringPercentage
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.ToStringPercentage
  Refinity.Math.MathUtility.ToScientificNotation*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.ToScientificNotation*
        name: ToScientificNotation
        nameWithType: MathUtility.ToScientificNotation
        qualifiedName: Refinity.Math.MathUtility.ToScientificNotation
      VB:
      - id: Refinity.Math.MathUtility.ToScientificNotation*
        name: ToScientificNotation
        nameWithType: MathUtility.ToScientificNotation
        qualifiedName: Refinity.Math.MathUtility.ToScientificNotation
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.ToScientificNotation
  Refinity.Math.MathUtility.SumTo*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.SumTo*
        name: SumTo
        nameWithType: MathUtility.SumTo
        qualifiedName: Refinity.Math.MathUtility.SumTo
      VB:
      - id: Refinity.Math.MathUtility.SumTo*
        name: SumTo
        nameWithType: MathUtility.SumTo
        qualifiedName: Refinity.Math.MathUtility.SumTo
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.SumTo
  Refinity.Math.MathUtility.Invert*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Invert*
        name: Invert
        nameWithType: MathUtility.Invert
        qualifiedName: Refinity.Math.MathUtility.Invert
      VB:
      - id: Refinity.Math.MathUtility.Invert*
        name: Invert
        nameWithType: MathUtility.Invert
        qualifiedName: Refinity.Math.MathUtility.Invert
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Invert
  Refinity.Math.MathUtility.DegreesToHMSString*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.DegreesToHMSString*
        name: DegreesToHMSString
        nameWithType: MathUtility.DegreesToHMSString
        qualifiedName: Refinity.Math.MathUtility.DegreesToHMSString
      VB:
      - id: Refinity.Math.MathUtility.DegreesToHMSString*
        name: DegreesToHMSString
        nameWithType: MathUtility.DegreesToHMSString
        qualifiedName: Refinity.Math.MathUtility.DegreesToHMSString
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.DegreesToHMSString
  System.ValueTuple`3:
    name:
      CSharp:
      - id: System.ValueTuple`3
        name: (, , )
        nameWithType: (, , )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`3
        name: (, , )
        nameWithType: (, , )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: ''
        nameWithType: ''
        qualifiedName: ''
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: '!:System.ValueTuple`3'
  System.ValueTuple{System.Int32,System.Int32,System.Double}:
    name:
      CSharp:
      - id: System.ValueTuple`3
        name: (, , )
        nameWithType: (, , )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.ValueTuple`3
        name: (, , )
        nameWithType: (, , )
        qualifiedName: System.ValueTuple
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Double
        name: Double
        nameWithType: Double
        qualifiedName: System.Double
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.ValueTuple`3
    commentId: '!:System.ValueTuple{System.Int32,System.Int32,System.Double}'
  Refinity.Math.MathUtility.DegreesToHMS*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.DegreesToHMS*
        name: DegreesToHMS
        nameWithType: MathUtility.DegreesToHMS
        qualifiedName: Refinity.Math.MathUtility.DegreesToHMS
      VB:
      - id: Refinity.Math.MathUtility.DegreesToHMS*
        name: DegreesToHMS
        nameWithType: MathUtility.DegreesToHMS
        qualifiedName: Refinity.Math.MathUtility.DegreesToHMS
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.DegreesToHMS
  Refinity.Math.MathUtility.DegreesToRadians*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.DegreesToRadians*
        name: DegreesToRadians
        nameWithType: MathUtility.DegreesToRadians
        qualifiedName: Refinity.Math.MathUtility.DegreesToRadians
      VB:
      - id: Refinity.Math.MathUtility.DegreesToRadians*
        name: DegreesToRadians
        nameWithType: MathUtility.DegreesToRadians
        qualifiedName: Refinity.Math.MathUtility.DegreesToRadians
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.DegreesToRadians
  Refinity.Math.MathUtility.RadiansToDegrees*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.RadiansToDegrees*
        name: RadiansToDegrees
        nameWithType: MathUtility.RadiansToDegrees
        qualifiedName: Refinity.Math.MathUtility.RadiansToDegrees
      VB:
      - id: Refinity.Math.MathUtility.RadiansToDegrees*
        name: RadiansToDegrees
        nameWithType: MathUtility.RadiansToDegrees
        qualifiedName: Refinity.Math.MathUtility.RadiansToDegrees
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.RadiansToDegrees
  Refinity.Math.MathUtility.Median*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Median*
        name: Median
        nameWithType: MathUtility.Median
        qualifiedName: Refinity.Math.MathUtility.Median
      VB:
      - id: Refinity.Math.MathUtility.Median*
        name: Median
        nameWithType: MathUtility.Median
        qualifiedName: Refinity.Math.MathUtility.Median
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Median
  Refinity.Math.MathUtility.Mode*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.Mode*
        name: Mode
        nameWithType: MathUtility.Mode
        qualifiedName: Refinity.Math.MathUtility.Mode
      VB:
      - id: Refinity.Math.MathUtility.Mode*
        name: Mode
        nameWithType: MathUtility.Mode
        qualifiedName: Refinity.Math.MathUtility.Mode
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.Mode
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
      VB: []
    isDefinition: true
    commentId: T:System.Object
  Refinity.Math.MathUtility.MatrixAddition*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.MatrixAddition*
        name: MatrixAddition
        nameWithType: MathUtility.MatrixAddition
        qualifiedName: Refinity.Math.MathUtility.MatrixAddition
      VB:
      - id: Refinity.Math.MathUtility.MatrixAddition*
        name: MatrixAddition
        nameWithType: MathUtility.MatrixAddition
        qualifiedName: Refinity.Math.MathUtility.MatrixAddition
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.MatrixAddition
  Refinity.Math.MathUtility.MatrixSubtraction*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.MatrixSubtraction*
        name: MatrixSubtraction
        nameWithType: MathUtility.MatrixSubtraction
        qualifiedName: Refinity.Math.MathUtility.MatrixSubtraction
      VB:
      - id: Refinity.Math.MathUtility.MatrixSubtraction*
        name: MatrixSubtraction
        nameWithType: MathUtility.MatrixSubtraction
        qualifiedName: Refinity.Math.MathUtility.MatrixSubtraction
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.MatrixSubtraction
  Refinity.Math.MathUtility.MatrixMultiplication*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.MatrixMultiplication*
        name: MatrixMultiplication
        nameWithType: MathUtility.MatrixMultiplication
        qualifiedName: Refinity.Math.MathUtility.MatrixMultiplication
      VB:
      - id: Refinity.Math.MathUtility.MatrixMultiplication*
        name: MatrixMultiplication
        nameWithType: MathUtility.MatrixMultiplication
        qualifiedName: Refinity.Math.MathUtility.MatrixMultiplication
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.MatrixMultiplication
  Refinity.Math.MathUtility.MatrixScalarMultiplication*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.MatrixScalarMultiplication*
        name: MatrixScalarMultiplication
        nameWithType: MathUtility.MatrixScalarMultiplication
        qualifiedName: Refinity.Math.MathUtility.MatrixScalarMultiplication
      VB:
      - id: Refinity.Math.MathUtility.MatrixScalarMultiplication*
        name: MatrixScalarMultiplication
        nameWithType: MathUtility.MatrixScalarMultiplication
        qualifiedName: Refinity.Math.MathUtility.MatrixScalarMultiplication
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.MatrixScalarMultiplication
  Refinity.Math.MathUtility.MatrixTranspose*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.MatrixTranspose*
        name: MatrixTranspose
        nameWithType: MathUtility.MatrixTranspose
        qualifiedName: Refinity.Math.MathUtility.MatrixTranspose
      VB:
      - id: Refinity.Math.MathUtility.MatrixTranspose*
        name: MatrixTranspose
        nameWithType: MathUtility.MatrixTranspose
        qualifiedName: Refinity.Math.MathUtility.MatrixTranspose
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.MatrixTranspose
  Refinity.Math.MathUtility.MatrixInverse*:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility.MatrixInverse*
        name: MatrixInverse
        nameWithType: MathUtility.MatrixInverse
        qualifiedName: Refinity.Math.MathUtility.MatrixInverse
      VB:
      - id: Refinity.Math.MathUtility.MatrixInverse*
        name: MatrixInverse
        nameWithType: MathUtility.MatrixInverse
        qualifiedName: Refinity.Math.MathUtility.MatrixInverse
    isDefinition: true
    commentId: Overload:Refinity.Math.MathUtility.MatrixInverse
  Refinity.Math.MathUtility:
    name:
      CSharp:
      - id: Refinity.Math.MathUtility
        name: MathUtility
        nameWithType: MathUtility
        qualifiedName: Refinity.Math.MathUtility
      VB:
      - id: Refinity.Math.MathUtility
        name: MathUtility
        nameWithType: MathUtility
        qualifiedName: Refinity.Math.MathUtility
    isDefinition: true
    commentId: T:Refinity.Math.MathUtility
  Refinity.Math.LinearRegressionModel.#ctor*:
    name:
      CSharp:
      - id: Refinity.Math.LinearRegressionModel.#ctor*
        name: LinearRegressionModel
        nameWithType: LinearRegressionModel.LinearRegressionModel
        qualifiedName: Refinity.Math.LinearRegressionModel.LinearRegressionModel
      VB:
      - id: Refinity.Math.LinearRegressionModel.#ctor*
        name: LinearRegressionModel
        nameWithType: LinearRegressionModel.LinearRegressionModel
        qualifiedName: Refinity.Math.LinearRegressionModel.LinearRegressionModel
    isDefinition: true
    commentId: Overload:Refinity.Math.LinearRegressionModel.#ctor
  Refinity.Math.LinearRegressionModel.Slope*:
    name:
      CSharp:
      - id: Refinity.Math.LinearRegressionModel.Slope*
        name: Slope
        nameWithType: LinearRegressionModel.Slope
        qualifiedName: Refinity.Math.LinearRegressionModel.Slope
      VB:
      - id: Refinity.Math.LinearRegressionModel.Slope*
        name: Slope
        nameWithType: LinearRegressionModel.Slope
        qualifiedName: Refinity.Math.LinearRegressionModel.Slope
    isDefinition: true
    commentId: Overload:Refinity.Math.LinearRegressionModel.Slope
  Refinity.Math.LinearRegressionModel.Intercept*:
    name:
      CSharp:
      - id: Refinity.Math.LinearRegressionModel.Intercept*
        name: Intercept
        nameWithType: LinearRegressionModel.Intercept
        qualifiedName: Refinity.Math.LinearRegressionModel.Intercept
      VB:
      - id: Refinity.Math.LinearRegressionModel.Intercept*
        name: Intercept
        nameWithType: LinearRegressionModel.Intercept
        qualifiedName: Refinity.Math.LinearRegressionModel.Intercept
    isDefinition: true
    commentId: Overload:Refinity.Math.LinearRegressionModel.Intercept
  Refinity.Math.LinearRegressionModel.Correlation*:
    name:
      CSharp:
      - id: Refinity.Math.LinearRegressionModel.Correlation*
        name: Correlation
        nameWithType: LinearRegressionModel.Correlation
        qualifiedName: Refinity.Math.LinearRegressionModel.Correlation
      VB:
      - id: Refinity.Math.LinearRegressionModel.Correlation*
        name: Correlation
        nameWithType: LinearRegressionModel.Correlation
        qualifiedName: Refinity.Math.LinearRegressionModel.Correlation
    isDefinition: true
    commentId: Overload:Refinity.Math.LinearRegressionModel.Correlation
  Refinity.Strings.StringsUtility.RemoveWhitespace*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.RemoveWhitespace*
        name: RemoveWhitespace
        nameWithType: StringsUtility.RemoveWhitespace
        qualifiedName: Refinity.Strings.StringsUtility.RemoveWhitespace
      VB:
      - id: Refinity.Strings.StringsUtility.RemoveWhitespace*
        name: RemoveWhitespace
        nameWithType: StringsUtility.RemoveWhitespace
        qualifiedName: Refinity.Strings.StringsUtility.RemoveWhitespace
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.RemoveWhitespace
  Refinity.Strings.StringsUtility.RemoveTabs*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.RemoveTabs*
        name: RemoveTabs
        nameWithType: StringsUtility.RemoveTabs
        qualifiedName: Refinity.Strings.StringsUtility.RemoveTabs
      VB:
      - id: Refinity.Strings.StringsUtility.RemoveTabs*
        name: RemoveTabs
        nameWithType: StringsUtility.RemoveTabs
        qualifiedName: Refinity.Strings.StringsUtility.RemoveTabs
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.RemoveTabs
  Refinity.Strings.StringsUtility.RemoveHTMLTags*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.RemoveHTMLTags*
        name: RemoveHTMLTags
        nameWithType: StringsUtility.RemoveHTMLTags
        qualifiedName: Refinity.Strings.StringsUtility.RemoveHTMLTags
      VB:
      - id: Refinity.Strings.StringsUtility.RemoveHTMLTags*
        name: RemoveHTMLTags
        nameWithType: StringsUtility.RemoveHTMLTags
        qualifiedName: Refinity.Strings.StringsUtility.RemoveHTMLTags
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.RemoveHTMLTags
  Refinity.Strings.StringsUtility.Reverse*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.Reverse*
        name: Reverse
        nameWithType: StringsUtility.Reverse
        qualifiedName: Refinity.Strings.StringsUtility.Reverse
      VB:
      - id: Refinity.Strings.StringsUtility.Reverse*
        name: Reverse
        nameWithType: StringsUtility.Reverse
        qualifiedName: Refinity.Strings.StringsUtility.Reverse
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.Reverse
  Refinity.Strings.StringsUtility.Truncate*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.Truncate*
        name: Truncate
        nameWithType: StringsUtility.Truncate
        qualifiedName: Refinity.Strings.StringsUtility.Truncate
      VB:
      - id: Refinity.Strings.StringsUtility.Truncate*
        name: Truncate
        nameWithType: StringsUtility.Truncate
        qualifiedName: Refinity.Strings.StringsUtility.Truncate
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.Truncate
  Refinity.Strings.StringsUtility.IsPalindrome*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.IsPalindrome*
        name: IsPalindrome
        nameWithType: StringsUtility.IsPalindrome
        qualifiedName: Refinity.Strings.StringsUtility.IsPalindrome
      VB:
      - id: Refinity.Strings.StringsUtility.IsPalindrome*
        name: IsPalindrome
        nameWithType: StringsUtility.IsPalindrome
        qualifiedName: Refinity.Strings.StringsUtility.IsPalindrome
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.IsPalindrome
  Refinity.Strings.StringsUtility.SplitCamelCase*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.SplitCamelCase*
        name: SplitCamelCase
        nameWithType: StringsUtility.SplitCamelCase
        qualifiedName: Refinity.Strings.StringsUtility.SplitCamelCase
      VB:
      - id: Refinity.Strings.StringsUtility.SplitCamelCase*
        name: SplitCamelCase
        nameWithType: StringsUtility.SplitCamelCase
        qualifiedName: Refinity.Strings.StringsUtility.SplitCamelCase
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.SplitCamelCase
  Refinity.Strings.StringsUtility.ToPascalCase*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.ToPascalCase*
        name: ToPascalCase
        nameWithType: StringsUtility.ToPascalCase
        qualifiedName: Refinity.Strings.StringsUtility.ToPascalCase
      VB:
      - id: Refinity.Strings.StringsUtility.ToPascalCase*
        name: ToPascalCase
        nameWithType: StringsUtility.ToPascalCase
        qualifiedName: Refinity.Strings.StringsUtility.ToPascalCase
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.ToPascalCase
  Refinity.Strings.StringsUtility.ToBase64*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.ToBase64*
        name: ToBase64
        nameWithType: StringsUtility.ToBase64
        qualifiedName: Refinity.Strings.StringsUtility.ToBase64
      VB:
      - id: Refinity.Strings.StringsUtility.ToBase64*
        name: ToBase64
        nameWithType: StringsUtility.ToBase64
        qualifiedName: Refinity.Strings.StringsUtility.ToBase64
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.ToBase64
  Refinity.Strings.StringsUtility.FromBase64*:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility.FromBase64*
        name: FromBase64
        nameWithType: StringsUtility.FromBase64
        qualifiedName: Refinity.Strings.StringsUtility.FromBase64
      VB:
      - id: Refinity.Strings.StringsUtility.FromBase64*
        name: FromBase64
        nameWithType: StringsUtility.FromBase64
        qualifiedName: Refinity.Strings.StringsUtility.FromBase64
    isDefinition: true
    commentId: Overload:Refinity.Strings.StringsUtility.FromBase64
  Encoding:
    name:
      CSharp:
      - id: Encoding
        name: Encoding
        nameWithType: Encoding
        qualifiedName: Encoding
        isExternal: true
      VB:
      - id: Encoding
        name: Encoding
        nameWithType: Encoding
        qualifiedName: Encoding
        isExternal: true
    isDefinition: true
  Refinity.Strings.StringsUtility:
    name:
      CSharp:
      - id: Refinity.Strings.StringsUtility
        name: StringsUtility
        nameWithType: StringsUtility
        qualifiedName: Refinity.Strings.StringsUtility
      VB:
      - id: Refinity.Strings.StringsUtility
        name: StringsUtility
        nameWithType: StringsUtility
        qualifiedName: Refinity.Strings.StringsUtility
    isDefinition: true
    commentId: T:Refinity.Strings.StringsUtility
  Refinity.Strings:
    name:
      CSharp:
      - name: Refinity.Strings
        nameWithType: Refinity.Strings
        qualifiedName: Refinity.Strings
      VB:
      - name: Refinity.Strings
        nameWithType: Refinity.Strings
        qualifiedName: Refinity.Strings
    isDefinition: true
    commentId: N:Refinity.Strings
